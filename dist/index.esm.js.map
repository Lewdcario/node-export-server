{"version":3,"file":"index.esm.js","sources":["../lib/fetch.js","../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/config.js","../lib/browser.js","../lib/export.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/chart.js","../lib/server/error.js","../lib/server/rate_limit.js","../lib/envConfig.js","../lib/server/websocket.js","../lib/errors/HttpError.js","../lib/server/routes/export.js","../lib/server/routes/health.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Returns the HTTP or HTTPS protocol module based on the provided URL.\r\n *\r\n * @param {string} url - The URL to determine the protocol.\r\n *\r\n * @returns {Object} The HTTP or HTTPS protocol module (http or https).\r\n */\r\nconst getProtocol = (url) => (url.startsWith('https') ? https : http);\r\n\r\n/**\r\n * Fetches data from the specified URL using either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to fetch data from.\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object\r\n * with added 'text' property or rejecting with an error.\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(url, requestOptions, (res) => {\r\n        let data = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          if (!data) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n\r\n          res.text = data;\r\n          resolve(res);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the provided JSON body using\r\n * either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to send the POST request to.\r\n * @param {Object} body - The JSON body to include in the POST request\r\n * (optional, default is an empty object).\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object with\r\n * added 'text' property or rejecting with an error.\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Load .env into environment variables\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Arguments array to send to Puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      type: 'string',\r\n      description: 'The Highcharts version to be used.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      envLink: 'HIGHCHARTS_CDN_URL',\r\n      type: 'string',\r\n      description: 'The CDN URL for Highcharts scripts to be used.'\r\n    },\r\n    coreScripts: {\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      type: 'string[]',\r\n      description: 'The core Highcharts scripts to fetch.'\r\n    },\r\n    modules: {\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'export-data',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'data-tools',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'tiledwebmap',\r\n        'timeline',\r\n        'treemap',\r\n        'treegraph',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'geoheatmap',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'overlapping-datalabels',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'solid-gauge',\r\n        'sonification',\r\n        'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi',\r\n        'flowmap'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'The modules of Highcharts to fetch.'\r\n    },\r\n    indicators: {\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      value: ['indicators-all'],\r\n      type: 'string[]',\r\n      description: 'The indicators of Highcharts to fetch.'\r\n    },\r\n    scripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Additional optional scripts or dependencies to fetch.'\r\n    },\r\n    forceFetch: {\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'The flag to determine whether to refetch all scripts after each server rerun.'\r\n    },\r\n    cachePath: {\r\n      envLink: 'HIGHCHARTS_CACHE_PATH',\r\n      value: '.cache',\r\n      type: 'string',\r\n      description:\r\n        'The path to the cache directory. It is used to store the Highcharts scripts and custom scripts.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Input, provided in the form of a stringified JSON or SVG file, will override the --infile option.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag.'\r\n    },\r\n    type: {\r\n      envLink: 'EXPORT_TYPE',\r\n      value: 'png',\r\n      type: 'string',\r\n      description: 'The file export format. It can be jpeg, png, pdf, or svg.'\r\n    },\r\n    constr: {\r\n      envLink: 'EXPORT_CONSTR',\r\n      value: 'chart',\r\n      type: 'string',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart, or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      value: 400,\r\n      type: 'number',\r\n      description:\r\n        'the default height of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultWidth: {\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      value: 600,\r\n      type: 'number',\r\n      description:\r\n        'The default width of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultScale: {\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      value: 1,\r\n      type: 'number',\r\n      description:\r\n        'The default scale of the exported chart. Used when no value is set.'\r\n    },\r\n    height: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The height of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    width: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The width of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description:\r\n        'The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Initiates a batch job with a string containing input/output pairs: \"in=out;in=out;...\".'\r\n    },\r\n    rasterizationTimeout: {\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      value: 1500,\r\n      type: 'number',\r\n      description:\r\n        'The duration in milliseconds to wait for rendering a webpage.'\r\n    }\r\n  },\r\n  customLogic: {\r\n    allowCodeExecution: {\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_CODE_EXECUTION',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Controls whether the execution of arbitrary code is allowed during the exporting process.'\r\n    },\r\n    allowFileResources: {\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_FILE_RESOURCES',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'JavaScript code to run during construction. It can be a function or a filename with the .js extension.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Additional resource in the form of a stringified JSON, which may contain files, js, and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      legacyName: 'fromFile',\r\n      description: 'A file containing a pre-defined configuration to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Enables setting options through a prompt and saving them in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      envLink: 'SERVER_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableServer',\r\n      description:\r\n        'When set to true, the server starts on the local IP address 0.0.0.0.'\r\n    },\r\n    host: {\r\n      envLink: 'SERVER_HOST',\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      description:\r\n        'The hostname of the server. Additionally, it starts a server on the provided hostname.'\r\n    },\r\n    port: {\r\n      envLink: 'SERVER_PORT',\r\n      value: 7801,\r\n      type: 'number',\r\n      description: 'The server port when enabled.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'SERVER_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'serverBenchmarking',\r\n      description:\r\n        'Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request.'\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        envLink: 'SERVER_SSL_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables or disables the SSL protocol.'\r\n      },\r\n      force: {\r\n        envLink: 'SERVER_SSL_FORCE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'sslForced',\r\n        legacyName: 'sslOnly',\r\n        description:\r\n          'When set to true, the server is forced to serve only over HTTPS.'\r\n      },\r\n      port: {\r\n        envLink: 'SERVER_SSL_PORT',\r\n        value: 443,\r\n        type: 'number',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        envLink: 'SERVER_SSL_CERT_PATH',\r\n        value: '',\r\n        type: 'string',\r\n        legacyName: 'sslPath',\r\n        description: 'The path to the SSL certificate/key file.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        envLink: 'SERVER_RATE_LIMITING_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting for the server.'\r\n      },\r\n      maxRequests: {\r\n        envLink: 'SERVER_RATE_LIMITING_MAX_REQUESTS',\r\n        value: 10,\r\n        type: 'number',\r\n        legacyName: 'rateLimit',\r\n        description: 'The maximum number of requests allowed in one minute.'\r\n      },\r\n      window: {\r\n        envLink: 'SERVER_RATE_LIMITING_WINDOW',\r\n        value: 1,\r\n        type: 'number',\r\n        description: 'The time window, in minutes, for the rate limiting.'\r\n      },\r\n      delay: {\r\n        envLink: 'SERVER_RATE_LIMITING_DELAY',\r\n        value: 0,\r\n        type: 'number',\r\n        description:\r\n          'The delay duration for each successive request before reaching the maximum limit.'\r\n      },\r\n      trustProxy: {\r\n        envLink: 'SERVER_RATE_LIMITING_TRUST_PROXY',\r\n        value: false,\r\n        type: 'boolean',\r\n        description: 'Set this to true if the server is behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_KEY',\r\n        value: '',\r\n        type: 'string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_TOKEN',\r\n        value: '',\r\n        type: 'string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipKey argument.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      envLink: 'POOL_MIN_WORKERS',\r\n      value: 4,\r\n      type: 'number',\r\n      description: 'The number of minimum and initial pool workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      envLink: 'POOL_MAX_WORKERS',\r\n      value: 8,\r\n      type: 'number',\r\n      legacyName: 'workers',\r\n      description: 'The number of maximum pool workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      envLink: 'POOL_WORK_LIMIT',\r\n      value: 40,\r\n      type: 'number',\r\n      description:\r\n        'The number of work pieces that can be performed before restarting the worker process.'\r\n    },\r\n    acquireTimeout: {\r\n      envLink: 'POOL_ACQUIRE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for acquiring a resource.'\r\n    },\r\n    createTimeout: {\r\n      envLink: 'POOL_CREATE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for creating a resource.'\r\n    },\r\n    destroyTimeout: {\r\n      envLink: 'POOL_DESTROY_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for destroying a resource.'\r\n    },\r\n    idleTimeout: {\r\n      envLink: 'POOL_IDLE_TIMEOUT',\r\n      value: 30000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, after which an idle resource is destroyed.'\r\n    },\r\n    createRetryInterval: {\r\n      envLink: 'POOL_CREATE_RETRY_INTERVAL',\r\n      value: 200,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait before retrying the create process in case of a failure.'\r\n    },\r\n    reaperInterval: {\r\n      envLink: 'POOL_REAPER_INTERVAL',\r\n      value: 1000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, after which the check for idle resources to destroy is triggered.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'POOL_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'poolBenchmarking',\r\n      description:\r\n        'Indicate whether to show statistics for the pool of resources or not.'\r\n    },\r\n    listenToProcessExits: {\r\n      envLink: 'POOL_LISTEN_TO_PROCESS_EXITS',\r\n      value: true,\r\n      type: 'boolean',\r\n      description: 'Decides whether or not to attach process.exit handlers.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      envLink: 'LOGGING_LEVEL',\r\n      value: 4,\r\n      type: 'number',\r\n      cliName: 'logLevel',\r\n      description: 'The logging level to be used.'\r\n    },\r\n    file: {\r\n      envLink: 'LOGGING_FILE',\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      cliName: 'logFile',\r\n      description:\r\n        'The name of a log file. The logDest option also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      envLink: 'LOGGING_DEST',\r\n      value: 'log/',\r\n      type: 'string',\r\n      cliName: 'logDest',\r\n      description:\r\n        'The path to store log files. This also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      envLink: 'UI_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableUi',\r\n      description:\r\n        'Enables or disables the user interface (UI) for the export server.'\r\n    },\r\n    route: {\r\n      envLink: 'UI_ROUTE',\r\n      value: '/',\r\n      type: 'string',\r\n      cliName: 'uiRoute',\r\n      description:\r\n        'The endpoint route to which the user interface (UI) should be attached.'\r\n    }\r\n  },\r\n  other: {\r\n    noLogo: {\r\n      envLink: 'OTHER_NO_LOGO',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  }\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The URL of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'scripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.scripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Force re-fetch the scripts',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cachePath',\r\n      message: 'The path to the cache directory',\r\n      initial: defaultConfig.highcharts.cachePath.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default export file type',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rasterizationTimeout',\r\n      message: 'The rendering webpage timeout in milliseconds',\r\n      initial: defaultConfig.export.rasterizationTimeout.value\r\n    }\r\n  ],\r\n  customLogic: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Enable execution of custom code',\r\n      initial: defaultConfig.customLogic.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Enable file resources',\r\n      initial: defaultConfig.customLogic.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts the server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'Server hostname',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'Server port',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable server benchmarking',\r\n      initial: defaultConfig.server.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force serving only over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'SSL server port',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'The path to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'The maximum requests allowed per minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The rate-limiting time window in minutes',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The delay for each successive request before reaching the maximum',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'minWorkers',\r\n      message: 'The initial number of workers to spawn',\r\n      initial: defaultConfig.pool.minWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The maximum number of workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a Puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createTimeout',\r\n      message: 'The number of milliseconds to wait for creating a resource',\r\n      initial: defaultConfig.pool.createTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'destroyTimeout',\r\n      message: 'The number of milliseconds to wait for destroying a resource',\r\n      initial: defaultConfig.pool.destroyTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'idleTimeout',\r\n      message: 'The number of milliseconds after an idle resource is destroyed',\r\n      initial: defaultConfig.pool.idleTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createRetryInterval',\r\n      message:\r\n        'The retry interval in milliseconds after a create process fails',\r\n      initial: defaultConfig.pool.createRetryInterval.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'reaperInterval',\r\n      message:\r\n        'The reaper interval in milliseconds after triggering the check for idle resources to destroy',\r\n      initial: defaultConfig.pool.reaperInterval.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable benchmarking for a resource pool',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message: 'A log file name. Set with the --logDest to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'The path to log files. Enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message: 'Skip printing the logo on startup. Replaced by simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Recursively creates a chain of nested arguments from an object.\r\n *\r\n * @param {Object} obj - The object containing nested arguments.\r\n * @param {string} propChain - The current chain of nested properties\r\n * (used internally during recursion).\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n\r\n        // Support for the legacy, PhantomJS properties names\r\n        if (entry.legacyName !== undefined) {\r\n          nestedArgs[entry.legacyName] = `${propChain}.${k}`.substring(1);\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray', 'green'];\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    },\r\n    {\r\n      title: 'benchmark',\r\n      color: colors[4]\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\n/**\r\n * Logs the provided texts to a file, if file logging is enabled. It creates\r\n * the necessary directory structure if not already created and appends the\r\n * content, including an optional prefix, to the specified log file.\r\n *\r\n * @param {string[]} texts - An array of texts to be logged.\r\n * @param {string} prefix - An optional prefix to be added to each log entry.\r\n */\r\nconst logToFile = (texts, prefix) => {\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range or is a benchmark log\r\n  if (\r\n    newLevel !== 5 &&\r\n    (newLevel === 0 || newLevel > level || level > levelsDesc.length)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n};\r\n\r\n/**\r\n * Logs an error message with its stack trace. Optionally, a custom message\r\n * can be provided.\r\n *\r\n * @param {number} level - The log level.\r\n * @param {Error} error - The error object.\r\n * @param {string} customMessage - An optional custom message to be logged along\r\n * with the error.\r\n */\r\nexport const logWithStack = (newLevel, error, customMessage) => {\r\n  // Get the main message\r\n  const mainMessage = customMessage || error.message;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // If the customMessage exists, we want to display the whole stack message\r\n  const stackMessage =\r\n    error.message !== error.stackMessage || error.stackMessage === undefined\r\n      ? error.stack\r\n      : error.stack.split('\\n').slice(1).join('\\n');\r\n\r\n  // Combine custom message or error message with error stack message\r\n  const texts = [mainMessage, '\\n', stackMessage];\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat([\r\n        mainMessage[colors[newLevel - 1]],\r\n        '\\n',\r\n        stackMessage\r\n      ])\r\n    );\r\n  }\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n};\r\n\r\n/**\r\n * Sets the log level to the specified value. Log levels are (0 = no logging,\r\n * 1 = error, 2 = warning, 3 = notice, 4 = verbose or 5 = benchmark)\r\n *\r\n * @param {number} newLevel - The new log level to be set.\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables file logging with the specified destination and log file.\r\n *\r\n * @param {string} logDest - The destination path for log files.\r\n * @param {string} logFile - The log file name.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging initialization: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes logging with the specified logging configuration.\r\n *\r\n * @param {Object} logging - The logging configuration object.\r\n */\r\nexport const initLogging = (logging) => {\r\n  // Set the log level\r\n  setLogLevel(logging && parseInt(logging.level));\r\n\r\n  // Set the log file path and name\r\n  if (logging && logging.dest) {\r\n    enableFileLogging(\r\n      logging.dest,\r\n      logging.file || 'highcharts-export-server.log'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a listener function to the logging system.\r\n *\r\n * @param {function} fn - The listener function to be added.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Toggles the standard output (console) logging.\r\n *\r\n * @param {boolean} enabled - If true, enables console logging; if false,\r\n * disables it.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n  initLogging,\r\n  listen,\r\n  toggleSTDOut\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears and standardizes text by replacing multiple consecutive whitespace\r\n * characters with a single space and trimming any leading or trailing\r\n * whitespace.\r\n *\r\n * @param {string} text - The input text to be cleared.\r\n * @param {RegExp} [rule=/\\s\\s+/g] - The regular expression rule to match\r\n * multiple consecutive whitespace characters.\r\n * @param {string} [replacer=' '] - The string used to replace multiple\r\n * consecutive whitespace characters.\r\n *\r\n * @returns {string} - The cleared and standardized text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Implements an exponential backoff strategy for retrying a function until\r\n * a certain number of attempts are reached.\r\n *\r\n * @param {Function} fn - The function to be retried.\r\n * @param {number} [attempt=0] - The current attempt number.\r\n * @param {...any} args - Arguments to be passed to the function.\r\n *\r\n * @returns {Promise} - A promise that resolves to the result of the function\r\n * if successful.\r\n *\r\n * @throws {Error} - Throws an error if the maximum number of attempts\r\n * is reached.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes the export type based on MIME types and file extensions.\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} outfile - The file path or name.\r\n *\r\n * @returns {string} - The corrected export type.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Check if extension has a correct type\r\n    if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles and validates resources for export.\r\n *\r\n * @param {Object|string} resources - The resources to be handled. Can be either\r\n * a JSON object, stringified JSON or a path to a JSON file.\r\n * @param {boolean} allowFileResources - Whether to allow loading resources from\r\n * files.\r\n *\r\n * @returns {Object|undefined} - The handled resources or undefined if no valid\r\n * resources are found.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n    } catch (error) {\r\n      return logWithStack(2, error, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (handledResources && !allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Validates and parses JSON data. Checks if provided data is or can\r\n * be a correct JSON.\r\n *\r\n * @param {Object|string} data - The JSON data to be validated and parsed.\r\n * @param {boolean} toString - Whether to return a stringified representation\r\n * of the parsed JSON.\r\n *\r\n * @returns {Object|string|boolean} - The parsed JSON object, stringified JSON,\r\n * or false if validation fails.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given item is an object.\r\n *\r\n * @param {any} item - The item to be checked.\r\n *\r\n * @returns {boolean} - True if the item is an object, false otherwise.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if the given object is empty.\r\n *\r\n * @param {Object} item - The object to be checked.\r\n *\r\n * @returns {boolean} - True if the object is empty, false otherwise.\r\n */\r\nexport const isObjectEmpty = (item) =>\r\n  typeof item === 'object' && item !== null && Object.keys(item).length === 0;\r\n\r\n/**\r\n * Checks if a private IP range URL is found in the given string.\r\n *\r\n * @param {string} item - The string to be checked for a private IP range URL.\r\n *\r\n * @returns {boolean} - True if a private IP range URL is found, false\r\n * otherwise.\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  return [\r\n    'localhost',\r\n    '(10).(.*).(.*).(.*)',\r\n    '(127).(.*).(.*).(.*)',\r\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\r\n    '(192).(168).(.*).(.*)'\r\n  ].some((ipRegEx) =>\r\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the given object or array.\r\n *\r\n * @param {Object|Array} obj - The object or array to be deeply copied.\r\n *\r\n * @returns {Object|Array} - The deep copy of the provided object or array.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Converts the provided options object to a JSON-formatted string with the\r\n * option to preserve functions.\r\n *\r\n * @param {Object} options - The options object to be converted to a string.\r\n * @param {boolean} allowFunctions - If set to true, functions are preserved\r\n * in the output.\r\n *\r\n * @returns {string} - The JSON-formatted string representing the options.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo and version information.\r\n *\r\n * @param {boolean} noLogo - If true, only prints version information without\r\n * the logo.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'))\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting Highcharts Export Server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the usage information for CLI arguments. If required, it can list\r\n * properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    '\\nUsage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information, visit the readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (options) => {\r\n    for (const [name, option] of Object.entries(options)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds a number to the specified precision.\r\n *\r\n * @param {number} value - The number to be rounded.\r\n * @param {number} precision - The number of decimal places to round to.\r\n *\r\n * @returns {number} - The rounded number.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Converts a value to a boolean.\r\n *\r\n * @param {any} item - The value to be converted to a boolean.\r\n *\r\n * @returns {boolean} - The boolean representation of the input value.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * Wraps custom code to execute it safely.\r\n *\r\n * @param {string} customCode - The custom code to be wrapped.\r\n * @param {boolean} allowFileResources - Flag to allow loading code from a file.\r\n *\r\n * @returns {string|boolean} - The wrapped custom code or false if wrapping\r\n * fails.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure elapsed time using the Node.js process.hrtime() method.\r\n *\r\n * @returns {function(): number} - A function to calculate the elapsed time\r\n * in milliseconds.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","class ExportError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.message = message;\r\n    this.stackMessage = message;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    if (error.name) {\r\n      this.name = error.name;\r\n    }\r\n    if (error.statusCode) {\r\n      this.statusCode = error.statusCode;\r\n    }\r\n    if (error.stack) {\r\n      this.stackMessage = error.message;\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport dotenv from 'dotenv';\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\n\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { __dirname } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\ndotenv.config();\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\r\nlet appliedConfig = false;\r\n\r\n/**\r\n * Extracts and caches the Highcharts version from the sources string.\r\n *\r\n * @returns {string} The extracted Highcharts version.\r\n */\r\nconst extractVersion = () =>\r\n  (cache.hcVersion = cache.sources\r\n    .substring(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim());\r\n\r\n\r\n/**\r\n * Extracts the Highcharts module name based on the scriptPath.\r\n */\r\nconst extractModuleName = (scriptPath) => {\r\n  return scriptPath.replace(\r\n    /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Saves the provided configuration and fetched modules to the cache manifest\r\n * file.\r\n *\r\n * @param {object} config - Highcharts-related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs while writing\r\n * the cache manifest.\r\n */\r\nconst saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(3, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(__dirname, config.cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[cache] Error writing the cache manifest.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script and updates the fetchedModules accordingly.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {Object} proxyAgent - The proxy agent to use for a request.\r\n * @param {Object} fetchedModules - An object which tracks which Highcharts modules have been fetched.\r\n * @param {boolean} shouldThrowError - A flag to indicate if the error should be thrown. This should be used only for the core scripts.\r\n *\r\n * @returns {Promise<string>} A Promise resolving to the text representation\r\n * of the fetched script.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is a problem with\r\n * fetching the script.\r\n */\r\nconst fetchAndProcessScript = async (\r\n  script,\r\n  proxyAgent,\r\n  fetchedModules,\r\n  shouldThrowError = false\r\n) => {\r\n  // Get rid of the .js from the custom strings\r\n  if (script.endsWith('.js')) {\r\n    script = script.substring(0, script.length - 3);\r\n  }\r\n\r\n  log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n  // If exists, add proxy agent to request options\r\n  const requestOptions = proxyAgent\r\n    ? {\r\n        agent: proxyAgent,\r\n        timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\r\n      }\r\n    : {};\r\n\r\n  // Fetch the script\r\n  const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n  // If OK, return its text representation\r\n  if (response.statusCode === 200 && typeof response.text == 'string') {\r\n    if (fetchedModules) {\r\n      const moduleName = extractModuleName(script);\r\n      fetchedModules[moduleName] = 1;\r\n    }\r\n\r\n    return response.text;\r\n  }\r\n\r\n  if (shouldThrowError) {\r\n    throw new ExportError(\r\n      `Could not fetch the ${script}.js. The script might not exist in the requested version (status code: ${response.statusCode}).`\r\n    ).setError(response);\r\n  } else {\r\n    log(\r\n      2,\r\n      `[cache] Could not fetch the ${script}.js. The script might not exist in the requested version.`\r\n    );\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\n/**\r\n * Fetches Highcharts scripts and customScripts from the given CDNs.\r\n *\r\n * @param {string} scripts - Array of Highcharts modules to fetch.\r\n * @param {string} customScripts - Array of custom script paths to fetch (full URLs).\r\n * @param {object} proxyAgent - The proxy agent to use for a request.\r\n * @param {object} fetchedModules - An object which tracks which Highcharts modules have been fetched.\r\n * @returns {Promise<string>} The fetched scripts content joined.\r\n */\r\nconst fetchScripts = async (\r\n  coreScripts,\r\n  moduleScripts,\r\n  customScripts,\r\n  cdnURL,\r\n  proxyAgent,\r\n  fetchedModules\r\n) => {\r\n  const allFetchPromises = [\r\n    ...coreScripts.map((script) =>\r\n      fetchAndProcessScript(\r\n        `${cdnURL}${script}`,\r\n        proxyAgent,\r\n        fetchedModules,\r\n        true\r\n      )\r\n    ),\r\n    ...moduleScripts.map((script) =>\r\n      fetchAndProcessScript(`${cdnURL}${script}`, proxyAgent, fetchedModules)\r\n    ),\r\n    ...customScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, proxyAgent)\r\n    )\r\n  ];\r\n\r\n  const fetchedScripts = await Promise.all(allFetchPromises);\r\n  return fetchedScripts.join(';\\n');\r\n};\r\n\r\n/**\r\n * Updates the local cache with Highcharts scripts and their versions.\r\n *\r\n * @param {Object} config - The configuration object containing information\r\n * about scripts and modules.\r\n * @param {string} sourcePath - The path to the source file in the cache.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to an object representing\r\n * the fetched modules.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * the local Highcharts cache.\r\n */\r\nconst updateCache = async (config, sourcePath) => {\r\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\r\n  const hcVersion =\r\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\r\n\r\n  log(\r\n    3,\r\n    `[cache] Updating cache version to Highcharts: ${hcVersion || 'latest'}.`\r\n  );\r\n\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\r\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: +proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError('[cache] Could not create a Proxy Agent.').setError(\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = await fetchScripts(\r\n      [...coreScripts.map((c) => `${hcVersion}${c}`)],\r\n      [\r\n        ...modules.map((m) =>\r\n          m === 'map'\r\n            ? `maps/${hcVersion}modules/${m}`\r\n            : `${hcVersion}modules/${m}`\r\n        ),\r\n        ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\r\n      ],\r\n      customScripts,\r\n      config.cdnURL || cache.cdnURL,\r\n      proxyAgent,\r\n      fetchedModules\r\n    );\r\n    extractVersion();\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update the local Highcharts cache.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts version in the applied configuration and checks\r\n * the cache for the new version.\r\n *\r\n * @param {string} newVersion - The new Highcharts version to be applied.\r\n *\r\n * @returns {Promise<(object|boolean)>} A Promise resolving to the updated\r\n * configuration with the new version, or false if no applied configuration\r\n * exists.\r\n */\r\nexport const updateVersion = async (newVersion) =>\r\n  appliedConfig\r\n    ? await checkAndUpdateCache(\r\n        Object.assign(appliedConfig, {\r\n          version: newVersion\r\n        })\r\n      )\r\n    : false;\r\n\r\n/**\r\n * Checks the cache for Highcharts dependencies, updates the cache if needed,\r\n * and loads the sources.\r\n *\r\n * @param {Object} config - Highcharts-related configuration object containing information\r\n * about scripts and modules.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the cache is checked\r\n * and updated.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * or reading the cache.\r\n */\r\nexport const checkAndUpdateCache = async (config) => {\r\n  const cachePath = join(__dirname, config.cachePath);\r\n\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // TODO: deal with trying to switch to the running version\r\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\r\n\r\n  appliedConfig = config;\r\n\r\n  // Create the cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || config.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(config, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, coreScripts, indicators } = config;\r\n    const numberOfModules =\r\n      modules.length + coreScripts.length + indicators.length;\r\n\r\n    // Compare the loaded config with the contents in cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== config.version) {\r\n      log(\r\n        2,\r\n        '[cache] A Highcharts version mismatch in the cache, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        2,\r\n        '[cache] The cache and the requested modules do not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (config.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            2,\r\n            `[cache] The ${moduleName} is missing in the cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(config, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n      extractVersion();\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(config, fetchedModules);\r\n};\r\n\r\nexport const getCachePath = () => {\r\n  return join(__dirname, appliedConfig.cachePath);\r\n};\r\n\r\nexport default {\r\n  checkAndUpdateCache,\r\n  getCachePath,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Retrieves and returns the general options for the export process.\r\n *\r\n * @returns {Object} The general options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace, keeping\r\n * the principle of the options load priority. It accepts optional userOptions\r\n * and args from the CLI.\r\n *\r\n * @param {Object} userOptions - User-provided options for customization.\r\n * @param {Array} args - Command-line arguments for additional configuration\r\n * (CLI usage).\r\n *\r\n * @returns {Object} The updated general options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Allows manual configuration based on specified prompts and saves\r\n * the configuration to a file.\r\n *\r\n * @param {string} configFileName - The name of the configuration file.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to true once the manual\r\n * configuration is completed and saved.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            prompt.choices ? prompt.choices[answer] : answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              1,\r\n              error,\r\n              `[config] An error occurred while creating the ${configFileName} file.`\r\n            );\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps old-structured (PhantomJS) options to a new configuration format\r\n * (Puppeteer).\r\n *\r\n * @param {Object} oldOptions - Old-structured options to be mapped.\r\n *\r\n * @returns {Object} New options structured based on the defined nestedArgs\r\n * mapping.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges two sets of configuration options, considering absolute properties.\r\n *\r\n * @param {Object} options - Original configuration options.\r\n * @param {Object} newOptions - New configuration options to be merged.\r\n * @param {Array} absoluteProps - List of properties that should\r\n * not be recursively merged.\r\n *\r\n * @returns {Object} Merged configuration options.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n          ? value\r\n          : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes export settings based on provided exportOptions\r\n * and generalOptions.\r\n *\r\n * @param {Object} exportOptions - Options specific to the export process.\r\n * @param {Object} generalOptions - General configuration options.\r\n *\r\n * @returns {Object} Initialized export settings.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads additional configuration from a specified file using\r\n * the --loadConfig option.\r\n *\r\n * @param {Array} args - Command-line arguments to check for\r\n * the --loadConfig option.\r\n *\r\n * @returns {Object} Additional configuration loaded from the specified file,\r\n * or an empty object if not found or invalid.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load the configuration from the ${fileName} file.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Updates the default configuration object with values from a custom object\r\n * and environment variables.\r\n *\r\n * @param {Object} configObj - The default configuration object.\r\n * @param {Object} customObj - Custom configuration object to override defaults.\r\n * @param {string} propChain - Property chain for tracking nested properties\r\n * during recursion.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    const entry = configObj[key];\r\n    const customValue = customObj && customObj[key];\r\n    let numEnvVal;\r\n\r\n    if (typeof entry.value === 'undefined') {\r\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n    } else {\r\n      // If a value from a custom JSON exists, it take precedence\r\n      if (customValue !== undefined) {\r\n        entry.value = customValue;\r\n      }\r\n\r\n      // If a value from an env variable exists, it take precedence\r\n      if (entry.envLink) {\r\n        // Load the env var\r\n        if (entry.type === 'boolean') {\r\n          entry.value = toBoolean(\r\n            [process.env[entry.envLink], entry.value].find(\r\n              (el) => el || el === 'false'\r\n            )\r\n          );\r\n        } else if (entry.type === 'number') {\r\n          numEnvVal = +process.env[entry.envLink];\r\n          entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\r\n        } else if (entry.type.indexOf(']') >= 0 && process.env[entry.envLink]) {\r\n          entry.value = process.env[entry.envLink].split(',');\r\n        } else {\r\n          entry.value = process.env[entry.envLink] || entry.value;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes options object based on provided items, setting values from\r\n * nested properties recursively.\r\n *\r\n * @param {Object} items - Configuration items to be used for initializing\r\n * options.\r\n *\r\n * @returns {Object} Initialized options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument values with corresponding options in the configuration,\r\n * updating the options object.\r\n *\r\n * @param {Object} options - Configuration options object to be updated.\r\n * @param {Array} args - Command-line arguments containing values for specific\r\n * options.\r\n * @param {Object} defaultConfig - Default configuration object for reference.\r\n *\r\n * @returns {Object} Updated options object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  let showUsage = false;\r\n  for (let i = 0; i < args.length; i++) {\r\n    const option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    // Get the correct type for CLI args which are passed as strings\r\n    let argumentType;\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        argumentType = obj[prop].type;\r\n      }\r\n      return obj[prop];\r\n    }, defaultConfig);\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            if (argumentType === 'boolean') {\r\n              obj[prop] = toBoolean(args[i]);\r\n            } else if (argumentType === 'number') {\r\n              obj[prop] = +args[i];\r\n            } else if (argumentType.indexOf(']') >= 0) {\r\n              obj[prop] = args[i].split(',');\r\n            } else {\r\n              obj[prop] = args[i];\r\n            }\r\n          } else {\r\n            log(\r\n              2,\r\n              `[config] Missing value for the '${option}' argument. Using the default value.`\r\n            );\r\n            showUsage = true;\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  // Display the usage for the reference if needed\r\n  if (showUsage) {\r\n    printUsage(defaultConfig);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively updates properties in an object based on nested names and assigns\r\n * the final value.\r\n *\r\n * @param {Object} objectToUpdate - The object to be updated.\r\n * @param {Array} nestedNames - Array of nested property names.\r\n * @param {any} value - The final value to be assigned.\r\n *\r\n * @returns {Object} Updated object with assigned values.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport fs from 'fs';\r\nimport * as url from 'url';\r\nimport path from 'node:path';\r\n\r\nimport puppeteer from 'puppeteer';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\n\r\nimport { getCachePath } from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\n/**\r\n * Sets the content for a Puppeteer Page using a predefined template\r\n * and additional scripts. Also, sets the pageerror in order to catch\r\n * and display errors from the window context.\r\n *\r\n * @param {Object} page - The Puppeteer Page object for which the content\r\n * is being set.\r\n */\r\nconst setPageContent = async (page) => {\r\n  await page.setContent(template);\r\n  await page.addScriptTag({ path: `${getCachePath()}/sources.js` });\r\n  // eslint-disable-next-line no-undef\r\n  await page.evaluate(() => window.setupHighcharts());\r\n\r\n  page.on('pageerror', async (error) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    await page.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${error.toString()}`\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Clears the content of a Puppeteer Page based on the specified mode.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to be cleared.\r\n * @param {boolean} hardReset - A flag indicating the type of clearing\r\n * to be performed. If true, navigates to 'about:blank' and resets content\r\n * and scripts. If false, clears the body content by setting a predefined HTML\r\n * structure.\r\n *\r\n * @throws {Error} Logs thrown error if clearing the page content fails.\r\n */\r\nexport const clearPage = async (page, hardReset = false) => {\r\n  try {\r\n    if (hardReset) {\r\n      // Navigate to about:blank\r\n      await page.goto('about:blank');\r\n\r\n      // Set the content and and scripts again\r\n      await setPageContent(page);\r\n    } else {\r\n      // Clear body content\r\n      await page.evaluate(() => {\r\n        document.body.innerHTML =\r\n          '<div id=\"chart-container\"><div id=\"container\"></div></div>';\r\n      });\r\n    }\r\n  } catch (error) {\r\n    logWithStack(\r\n      2,\r\n      error,\r\n      '[browser] Could not clear the content of the page.'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new Puppeteer Page within an existing browser instance.\r\n *\r\n * If the browser instance is not available, returns false.\r\n *\r\n * The function creates a new page, disables caching, sets content using\r\n * setPageContent(), and returns the created Puppeteer Page.\r\n *\r\n * @returns {(boolean|object)} Returns false if the browser instance is not\r\n * available, or a Puppeteer Page object representing the newly created page.\r\n */\r\nexport const newPage = async () => {\r\n  if (!browser) {\r\n    return false;\r\n  }\r\n\r\n  const page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await setPageContent(page);\r\n  return page;\r\n};\r\n\r\n/**\r\n * Creates a Puppeteer browser instance with the specified arguments.\r\n *\r\n * @param {Array} puppeteerArgs - Additional arguments for Puppeteer launch.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if max retries to open a browser\r\n * instance are reached, or if no browser instance is found after retries.\r\n */\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${++tryCount}).`\r\n        );\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Failed to launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Maximum retries to open a browser instance reached.'\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.');\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Retrieves the existing Puppeteer browser instance.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if no valid browser has been\r\n * created.\r\n */\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.');\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Closes the Puppeteer browser instance if it is connected.\r\n *\r\n * @returns {Promise<boolean>} A Promise resolving to true after the browser\r\n * is closed.\r\n */\r\nexport const close = async () => {\r\n  // Close the browser when connnected\r\n  if (browser?.isConnected()) {\r\n    await browser.close();\r\n    log(4, '[browser] Closed the browser.');\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default {\r\n  newPage,\r\n  clearPage,\r\n  get,\r\n  close\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nimport cache from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n/**\r\n * Retrieves the clipping region coordinates of the specified page element with\r\n * the id 'chart-container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to an object containing\r\n * x, y, width, and height properties.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Creates an image using Puppeteer's page screenshot functionality with\r\n * specified options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {string} type - Image type.\r\n * @param {string} encoding - Image encoding.\r\n * @param {Object} clip - Clipping region coordinates.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the image buffer or rejecting\r\n * with an ExportError for timeout.\r\n */\r\nconst createImage = (page, type, encoding, clip, rasterizationTimeout) =>\r\n  Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n\r\n      // #447, #463 - always render on a transparent page if the expected type\r\n      // format is PNG\r\n      omitBackground: type == 'png'\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new ExportError('Rasterization timeout')),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Creates a PDF using Puppeteer's page pdf functionality with specified\r\n * options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {number} height - PDF height.\r\n * @param {number} width - PDF width.\r\n * @param {string} encoding - PDF encoding.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the PDF buffer.\r\n */\r\nconst createPDF = (page, height, width, encoding) =>\r\n  page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Creates an SVG string by evaluating the outerHTML of the first 'svg' element\r\n * inside an element with the id 'container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<string>} Promise resolving to the SVG string.\r\n */\r\nconst createSVG = (page) =>\r\n  page.$eval('#container svg:first-of-type', (element) => element.outerHTML);\r\n\r\n/**\r\n * Sets the specified chart and options as configuration into the triggerExport\r\n * function within the window context using page.evaluate.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object to be configured.\r\n * @param {Object} options - Configuration options for the chart.\r\n *\r\n * @returns {Promise<void>} Promise resolving after the configuration is set.\r\n */\r\nconst setAsConfig = (page, chart, options) =>\r\n  page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/**\r\n * Exports to a chart from a page using Puppeteer.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object or SVG configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<string | Buffer | ExportError>} Promise resolving to\r\n * the exported data or rejecting with an ExportError.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    let isSVG;\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG input handling\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also SVG, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      await page.setContent(svgTemplate(chart));\r\n    } else {\r\n      // JSON config handling\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n      } else {\r\n        // Basic configuration export\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        await setAsConfig(page, chart, options);\r\n      }\r\n    }\r\n\r\n    // Use resources\r\n    const resources = options.customLogic.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              2,\r\n              error,\r\n              `[export] The JS file ${file} cannot be loaded.`\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customLogic.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          (element, scale) => ({\r\n            chartHeight: element.height.baseVal.value * scale,\r\n            chartWidth: element.width.baseVal.value * scale\r\n          }),\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    let data;\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\r\n      // PNG or JPEG\r\n      data = await createImage(\r\n        page,\r\n        exportOptions.type,\r\n        'base64',\r\n        {\r\n          width: viewportWidth,\r\n          height: viewportHeight,\r\n          x,\r\n          y\r\n        },\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw new ExportError(\r\n        `[export] Unsupported output format ${exportOptions.type}.`\r\n      );\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\r\n      // exports\r\n      if (typeof Highcharts !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        const oldCharts = Highcharts.charts;\r\n\r\n        // Check in any already existing charts\r\n        if (Array.isArray(oldCharts) && oldCharts.length) {\r\n          // Destroy old charts\r\n          for (const oldChart of oldCharts) {\r\n            oldChart && oldChart.destroy();\r\n            // eslint-disable-next-line no-undef\r\n            Highcharts.charts.shift();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    await clearInjected(page);\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  close as browserClose,\r\n  create as createBrowser,\r\n  newPage as browserNewPage,\r\n  clearPage\r\n} from './browser.js';\r\nimport puppeteerExport from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { measureTime } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet performedExports = 0;\r\nlet exportAttempts = 0;\r\nlet timeSpent = 0;\r\nlet droppedExports = 0;\r\nlet spentAverage = 0;\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker page for the export pool.\r\n   *\r\n   * @returns {Object} - An object containing the worker ID, a reference to the\r\n   * browser page, and initial work count.\r\n   *\r\n   * @throws {ExportError} - If there's an error during the creation of the new\r\n   * page.\r\n   */\r\n  create: async () => {\r\n    let page = false;\r\n\r\n    const id = uuid();\r\n    const startDate = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw new ExportError('The page is invalid or closed.');\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - startDate\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when creating a new page.'\r\n      ).setError(error);\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker page in the export pool, checking if it has exceeded\r\n   * the work limit.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing the\r\n   * worker's ID, a reference to the browser page, and work count.\r\n   *\r\n   * @returns {boolean} - Returns true if the worker is valid and within\r\n   * the work limit; otherwise, returns false.\r\n   */\r\n  validate: async (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation: exceeded work limit (limit is ${poolConfig.workLimit}).`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // Clear page\r\n    await clearPage(workerHandle.page, true);\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker entry in the export pool, closing its associated page.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing\r\n   * the worker's ID and a reference to the browser page.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes the export pool with the provided configuration, creating\r\n * a browser instance and setting up worker resources.\r\n *\r\n * @param {Object} config - Configuration options for the export pool along\r\n * with custom puppeteer arguments for the puppeteer.launch function.\r\n */\r\nexport const initPool = async (config) => {\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Create a browser instance\r\n  await createBrowser(puppeteerArgs);\r\n\r\n  log(\r\n    3,\r\n    `[pool] Initializing pool with workers: min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\r\n    poolConfig.minWorkers = poolConfig.maxWorkers;\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: parseInt(poolConfig.minWorkers),\r\n      max: parseInt(poolConfig.maxWorkers),\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      createTimeoutMillis: poolConfig.createTimeout,\r\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\r\n      idleTimeoutMillis: poolConfig.idleTimeout,\r\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\r\n      reapIntervalMillis: poolConfig.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      await clearPage(resource.page, false);\r\n      log(4, `[pool] Releasing a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(2, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    // Close browser if for some reason cannot establish the pool\r\n    await browserClose();\r\n    throw new ExportError(\r\n      '[pool] Could not create the pool of workers.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches exit listeners to the process, ensuring proper cleanup of resources\r\n * and termination on exit signals. Handles 'exit', 'SIGINT', 'SIGTERM', and\r\n * 'uncaughtException' events.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(3, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async (code) => {\r\n    log(4, `Process exited with code ${code}.`);\r\n    await killPool();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', async (error, name) => {\r\n    logWithStack(1, error, `The ${name} error.`);\r\n    await killPool();\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills all workers in the pool, destroys the pool, and closes the browser\r\n * instance.\r\n *\r\n * @returns {Promise<void>} A promise that resolves after the workers are\r\n * killed, the pool is destroyed, and the browser is closed.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing all pool workers and browser, if any exist.');\r\n\r\n  // Return true when the pool is already destroyed\r\n  if (pool?.destroyed) {\r\n    // Close the browser instance if still connected\r\n    return browserClose();\r\n  }\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  if (pool) {\r\n    await pool.destroy();\r\n    log(4, '[browser] Destroyed the pool of resources.');\r\n  }\r\n\r\n  // Close the browser instance\r\n  return browserClose();\r\n}\r\n\r\n/**\r\n * Processes the export work using a worker from the pool. Acquires a worker\r\n * handle from the pool, performs the export using puppeteer, and releases\r\n * the worker handle back to the pool.\r\n *\r\n * @param {string} chart - The chart data or configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<Object>} A promise that resolves with the export resultand\r\n * options.\r\n *\r\n * @throws {ExportError} If an error occurs during the export process.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    ++exportAttempts;\r\n    if (poolConfig.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    if (!pool) {\r\n      throw new ExportError('Work received, but pool has not been started.');\r\n    }\r\n\r\n    // Acquire the worker along with the id of resource and work count\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n      const acquireCounter = measureTime();\r\n      workerHandle = await pool.acquire().promise;\r\n\r\n      // Check the page acquire time\r\n      if (options.server.benchmarking) {\r\n        log(\r\n          5,\r\n          options.payload?.requestId\r\n            ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n            : '[benchmark]',\r\n          `Acquired a worker handle: ${acquireCounter()}ms.`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when acquiring an available entry.'\r\n      ).setError(error);\r\n    }\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      throw new ExportError(\r\n        'Resolved worker page is invalid: the pool setup is wonky.'\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry with ID ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const exportCounter = measureTime();\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      throw new ExportError('Error encountered during export.').setError(\r\n        result\r\n      );\r\n    }\r\n\r\n    // Check the Puppeteer export time\r\n    if (options.server.benchmarking) {\r\n      log(\r\n        5,\r\n        options.payload?.requestId\r\n          ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n          : '[benchmark]',\r\n        `Exported a chart sucessfully: ${exportCounter()}ms.`\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    timeSpent += exportTime;\r\n    spentAverage = timeSpent / ++performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw new ExportError(`[pool] In pool.postWork: ${error.message}`).setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the current pool instance.\r\n *\r\n * @returns {Object|null} The current pool instance if initialized, or null\r\n * if the pool has not been created.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\n/**\r\n * Retrieves pool information in JSON format, including minimum and maximum\r\n * workers, available workers, workers in use, and pending acquire requests.\r\n *\r\n * @returns {Object} Pool information in JSON format.\r\n */\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  available: pool.numFree(),\r\n  inUse: pool.numUsed(),\r\n  pendingAcquire: pool.numPendingAcquires()\r\n});\r\n\r\n/**\r\n * Logs information about the current state of the pool, including the minimum\r\n * and maximum workers, available workers, workers in use, and pending acquire\r\n * requests.\r\n */\r\nexport function getPoolInfo() {\r\n  const { min, max } = pool;\r\n\r\n  log(5, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(5, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    5,\r\n    `[pool] The number of resources that are currently available: ${pool.numFree()}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources that are currently acquired: ${pool.numUsed()}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pool.numPendingAcquires()}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  initPool,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  workAttempts: () => exportAttempts,\r\n  droppedWork: () => droppedExports,\r\n  averageTime: () => spentAverage,\r\n  processedWorkCount: () => performedExports\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { getOptions, initExportSettings } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { killPool, postWork } from './pool.js';\r\nimport {\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\n/**\r\n * Starts an export process. The `settings` contains final options gathered\r\n * from all possible sources (config, env, cli, json). The `endCallback` is\r\n * called when the export is completed, with an error object as the first\r\n * argument and the second containing the base64 respresentation of a chart.\r\n *\r\n * @param {Object} settings - The settings object containing export\r\n * configuration.\r\n * @param {function} endCallback - The callback function to be invoked upon\r\n * finalizing work or upon error occurance of the exporting process.\r\n *\r\n * @returns {void} This function does not return a value directly; instead,\r\n * it communicates results via the endCallback.\r\n */\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting the exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a SVG input.');\r\n      return exportAsString(options.payload.svg.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading SVG input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    // Try to read the file to get the string representation\r\n    try {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n      options.export.instr = readFileSync(exportOptions.infile, 'utf8');\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading input file.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customLogic?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading raw input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  return endCallback(\r\n    new ExportError(\r\n      `[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.`\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Starts a batch export process for multiple charts based on the information\r\n * in the batch option. The batch is a string in the following format:\r\n * \"infile1.json=outfile1.png;infile2.json=outfile2.png;...\"\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a batch export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the batch export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * any of the batch export process.\r\n */\r\nexport const batchExport = async (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        startExport(\r\n          {\r\n            ...options,\r\n            export: {\r\n              ...options.export,\r\n              infile: pair[0],\r\n              outfile: pair[1]\r\n            }\r\n          },\r\n          (error, info) => {\r\n            // Throw an error\r\n            if (error) {\r\n              throw error;\r\n            }\r\n\r\n            // Save the base64 from a buffer to a correct image file\r\n            writeFileSync(\r\n              info.options.export.outfile,\r\n              Buffer.from(info.result, 'base64')\r\n            );\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Await all exports are done\r\n    await Promise.all(batchFunctions);\r\n\r\n    // Kill pool and close browser after finishing batch export\r\n    await killPool();\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[chart] Error encountered during batch export.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Starts a single export process based on the specified options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a single export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the single export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * the single export process.\r\n */\r\nexport const singleExport = async (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  await startExport(options, async (error, info) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.result, 'base64') : info.result\r\n    );\r\n\r\n    // Kill the pool\r\n    await killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Determines the size and scale for chart export based on the provided options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * chart export.\r\n *\r\n * @returns {Object} An object containing the calculated height, width,\r\n * and scale for the chart export.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  const size = {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n\r\n  // Get rid of potential px and %\r\n  for (let [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n  return size;\r\n};\r\n\r\n/**\r\n * Function for finalizing options before export.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * the export process.\r\n * @param {Object} chartJson - The JSON representation of the chart.\r\n * @param {Function} endCallback - The callback function to be called upon\r\n * completion or error.\r\n * @param {string} svg - The SVG representation of the chart.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the export process\r\n * is completed.\r\n */\r\nconst doExport = async (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customLogic: customLogicOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customLogicOptions.allowCodeExecution === 'boolean'\r\n      ? customLogicOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customLogicOptions) {\r\n    customLogicOptions = options.customLogic = {};\r\n  } else if (allowCodeExecutionScoped) {\r\n    if (typeof options.customLogic.resources === 'string') {\r\n      // Process resources\r\n      options.customLogic.resources = handleResources(\r\n        options.customLogic.resources,\r\n        toBoolean(options.customLogic.allowFileResources)\r\n      );\r\n    } else if (!options.customLogic.resources) {\r\n      try {\r\n        const resources = readFileSync('resources.json', 'utf8');\r\n        options.customLogic.resources = handleResources(\r\n          resources,\r\n          toBoolean(options.customLogic.allowFileResources)\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[chart] Unable to load the default resources.json file.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customLogicOptions) {\r\n    if (\r\n      customLogicOptions.callback ||\r\n      customLogicOptions.resources ||\r\n      customLogicOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return endCallback(\r\n        new ExportError(\r\n          `[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customLogicOptions.callback = false;\r\n    customLogicOptions.resources = false;\r\n    customLogicOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      logWithStack(2, error, `[chart] The '${optionsName}' cannot be loaded.`);\r\n    }\r\n  });\r\n\r\n  // Prepare the customCode\r\n  if (customLogicOptions.allowCodeExecution) {\r\n    try {\r\n      customLogicOptions.customCode = wrapAround(\r\n        customLogicOptions.customCode,\r\n        customLogicOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, `[chart] The 'customCode' cannot be loaded.`);\r\n    }\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customLogicOptions &&\r\n    customLogicOptions.callback &&\r\n    customLogicOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customLogicOptions.allowFileResources) {\r\n      try {\r\n        customLogicOptions.callback = readFileSync(\r\n          customLogicOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        customLogicOptions.callback = false;\r\n        logWithStack(2, error, `[chart] The 'callback' cannot be loaded.`);\r\n      }\r\n    } else {\r\n      customLogicOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  try {\r\n    const result = await postWork(\r\n      exportOptions.strInj || chartJson || svg,\r\n      options\r\n    );\r\n    return endCallback(false, result);\r\n  } catch (error) {\r\n    return endCallback(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Performs a direct inject of options before export. The function attempts\r\n * to stringify the provided options and removes unnecessary characters,\r\n * ensuring a clean and formatted input. The resulting string is saved as\r\n * a \"stright inject\" string in the export options. It then invokes the\r\n * doExport function with the updated options.\r\n *\r\n * IMPORTANT: Dangerous and must be used deliberately by someone who sets up\r\n * a server (see the  --allowCodeExecution option).\r\n *\r\n * @param {Object} options - The export options containing the input\r\n * to be injected.\r\n * @param {function} endCallback - The callback function to be invoked\r\n * at the end of the process.\r\n *\r\n * @returns {Promise} A Promise that resolves with the result of the export\r\n * operation or rejects with an error if any issues occur during the process.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customLogic?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    return endCallback(\r\n      new ExportError(\r\n        `[chart] Malformed input detected for ${options.export?.requestId || '?'}. Please make sure that your JSON/JavaScript options are sent using the \"options\" attribute, and that if you're using SVG, it is unescaped.`\r\n      ).setError(error)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Exports a string based on the provided options and invokes an end callback.\r\n *\r\n * @param {string} stringToExport - The string content to be exported.\r\n * @param {Object} options - Export options, including customLogic with\r\n * allowCodeExecution flag.\r\n * @param {Function} endCallback - Callback function to be invoked at the end\r\n * of the export process.\r\n *\r\n * @returns {any} Result of the export process or an error if encountered.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customLogic;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return endCallback(\r\n        new ExportError(\r\n          '[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.'\r\n        ).setError(error)\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves and returns the current status of code execution permission.\r\n *\r\n * @returns {any} The value of allowCodeExecution.\r\n */\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\n/**\r\n * Sets the code execution permission based on the provided boolean value.\r\n *\r\n * @param {any} value - The value to be converted and assigned\r\n * to allowCodeExecution.\r\n */\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","import { logWithStack } from '../logger.js';\r\n\r\n/**\r\n * Middleware for logging errors with stack trace and handling error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst logErrorMiddleware = (error, req, res, next) => {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the returnErrorMiddleware\r\n  next(error);\r\n};\r\n\r\n/**\r\n * Middleware for returning error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst returnErrorMiddleware = (error, req, res, next) => {\r\n  // Gather all requied information for the response\r\n  const { statusCode: stCode, status, message, stack } = error;\r\n  const statusCode = stCode || status || 500;\r\n\r\n  // Set and return response\r\n  res.status(statusCode).json({ statusCode, message, stack });\r\n};\r\n\r\nexport default (app) => {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Middleware for enabling rate limiting on the specified Express app.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n * @param {Object} limitConfig - Configuration options for rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    `[rate limiting] Enabled rate limiting with ${rateOptions.max} requests per ${rateOptions.window} minute for each IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n  );\r\n};\r\n","import { z } from 'zod';\r\n\r\nconst envToBoolean = () =>\r\n  z.enum(['true', 'false']).transform((v) => v === 'true');\r\n\r\nconst EnvConfig = z.object({\r\n  WS_ENABLE: envToBoolean().optional(),\r\n  WS_RECONNECT: envToBoolean().optional(),\r\n  WS_REJECT_UNAUTHORIZED: envToBoolean().optional(),\r\n  WS_PING_TIMEOUT: z.coerce.number().optional(),\r\n  WS_RECONNECT_INTERVAL: z.coerce.number().optional(),\r\n  WS_URL: z.string().optional(),\r\n  WS_SECRET: z.string().optional()\r\n});\r\n\r\nexport const envConfig = EnvConfig.parse(process.env);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\nimport WebSocket from 'ws';\r\n\r\nimport { log } from '../logger.js';\r\nimport { envConfig } from '../envConfig.js';\r\n\r\n// WebSocket client\r\nlet webSocket;\r\n\r\n// In case of closing or termination of a client connection\r\nlet reconnectInterval;\r\n\r\n/**\r\n * Connects to WebSocket on a provided url.\r\n *\r\n * @param {string} webSocketUrl - The WebSocket server's URL.\r\n * @param {object} options - Options for WebSocket connection.\r\n */\r\nfunction connect(webSocketUrl, options) {\r\n  // Try to connect to indicated WebSocket server\r\n  webSocket = new WebSocket(webSocketUrl, options);\r\n\r\n  // Open event\r\n  webSocket.on('open', () => {\r\n    log(3, `[websocket] Connected to WebSocket server: ${webSocketUrl}`);\r\n    clearInterval(reconnectInterval);\r\n  });\r\n\r\n  // Close event where ping timeout is cleared\r\n  webSocket.on('close', (code) => {\r\n    log(\r\n      3,\r\n      '[websocket]',\r\n      `Disconnected from WebSocket server: ${webSocketUrl} with code: ${code}`\r\n    );\r\n    clearTimeout(webSocket._pingTimeout);\r\n    webSocket = null;\r\n  });\r\n\r\n  // Error event\r\n  webSocket.on('error', (error) => {\r\n    log(1, `[websocket] WebSocket error occured: ${error.message}`);\r\n  });\r\n\r\n  // Message event\r\n  webSocket.on('message', (message) => {\r\n    log(3, `[websocket] Data received: ${message}`);\r\n  });\r\n\r\n  // Ping event with the connection health check and termination logic\r\n  webSocket.on('ping', () => {\r\n    log(3, '[websocket] PING');\r\n    clearTimeout(webSocket._pingTimeout);\r\n    webSocket._pingTimeout = setTimeout(() => {\r\n      // Terminate the client connection\r\n      webSocket.terminate();\r\n\r\n      // Try to reconnect if required\r\n      if (envConfig.WS_RECONNECT === true) {\r\n        reconnect(webSocketUrl, options);\r\n      }\r\n    }, envConfig.WS_PING_TIMEOUT);\r\n  });\r\n}\r\n\r\n/**\r\n * Re-connects to WebSocket on a provided url.\r\n *\r\n * @param {string} webSocketUrl - The WebSocket server's URL.\r\n * @param {object} options - Options for WebSocket connection.\r\n */\r\nfunction reconnect(webSocketUrl, options) {\r\n  reconnectInterval = setInterval(() => {\r\n    if (webSocket === null) {\r\n      connect(webSocketUrl, options);\r\n    }\r\n  }, envConfig.WS_RECONNECT_INTERVAL);\r\n}\r\n\r\n/**\r\n * Gets the instance of the WebSocket connection.\r\n */\r\nfunction getClient() {\r\n  return webSocket;\r\n}\r\n\r\nexport default {\r\n  connect,\r\n  getClient\r\n};\r\n","import ExportError from './ExportError.js';\r\n\r\nclass HttpError extends ExportError {\r\n  constructor(message, status) {\r\n    super(message);\r\n    this.status = this.statusCode = status;\r\n  }\r\n\r\n  setStatus(status) {\r\n    this.status = status;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HttpError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { WebSocket } from 'ws';\r\n\r\nimport websocket from '../websocket.js';\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  fixType,\r\n  isCorrectJSON,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Invokes an array of callback functions with specified parameters, allowing\r\n * customization of request handling.\r\n *\r\n * @param {Function[]} callbacks - An array of callback functions\r\n * to be executed.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Object} data - An object containing parameters like id, uniqueId,\r\n * type, and body.\r\n *\r\n * @returns {boolean} - Returns a boolean indicating the overall result\r\n * of the callback invocations.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles the export requests from the client.\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {Promise<void>} - A promise that resolves once the export process\r\n * is complete.\r\n */\r\nconst exportHandler = async (request, response, next) => {\r\n  try {\r\n    // Start counting time\r\n    const stopCounter = measureTime();\r\n\r\n    // Create a unique ID for a request\r\n    const uniqueId = uuid().replace(/-/g, '');\r\n\r\n    // Get the current server's general options\r\n    const defaultOptions = getOptions();\r\n\r\n    // Get the WebSocket client\r\n    const websocketClient = websocket.getClient();\r\n\r\n    const body = request.body;\r\n    const id = ++requestsCounter;\r\n\r\n    let type = fixType(body.type);\r\n\r\n    // Throw 'Bad Request' if there's no body\r\n    if (!body || isObjectEmpty(body)) {\r\n      throw new HttpError(\r\n        'The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).',\r\n        400\r\n      );\r\n    }\r\n\r\n    // All of the below can be used\r\n    let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n    // Throw 'Bad Request' if there's no JSON or SVG to export\r\n    if (!instr && !body.svg) {\r\n      log(\r\n        2,\r\n        `The request with ID ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Payload received: ${JSON.stringify(body)}.`\r\n      );\r\n\r\n      throw new HttpError(\r\n        \"No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.\",\r\n        400\r\n      );\r\n    }\r\n\r\n    let callResponse = false;\r\n\r\n    // Call the before request functions\r\n    callResponse = doCallbacks(beforeRequest, request, response, {\r\n      id,\r\n      uniqueId,\r\n      type,\r\n      body\r\n    });\r\n\r\n    // Block the request if one of a callbacks failed\r\n    if (callResponse !== true) {\r\n      return response.send(callResponse);\r\n    }\r\n\r\n    let connectionAborted = false;\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    request.socket.on('close', () => {\r\n      connectionAborted = true;\r\n    });\r\n\r\n    log(4, `[export] Got an incoming HTTP request with ID ${uniqueId}.`);\r\n\r\n    body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n    // Gather and organize options from the payload\r\n    const requestOptions = {\r\n      export: {\r\n        instr,\r\n        type,\r\n        constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale || defaultOptions.export.scale,\r\n        globalOptions: isCorrectJSON(body.globalOptions, true),\r\n        themeOptions: isCorrectJSON(body.themeOptions, true)\r\n      },\r\n      customLogic: {\r\n        allowCodeExecution: getAllowCodeExecution(),\r\n        allowFileResources: false,\r\n        resources: isCorrectJSON(body.resources, true),\r\n        callback: body.callback,\r\n        customCode: body.customCode\r\n      }\r\n    };\r\n\r\n    if (instr) {\r\n      // Stringify JSON with options\r\n      requestOptions.export.instr = optionsStringify(\r\n        instr,\r\n        requestOptions.customLogic.allowCodeExecution\r\n      );\r\n    }\r\n\r\n    // Merge the request options into default ones\r\n    const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n    // Save the JSON if exists\r\n    options.export.options = instr;\r\n\r\n    // Lastly, add the server specific arguments into options as payload\r\n    options.payload = {\r\n      svg: body.svg || false,\r\n      b64: body.b64 || false,\r\n      noDownload: body.noDownload || false,\r\n      requestId: uniqueId\r\n    };\r\n\r\n    // Test xlink:href elements from payload's SVG\r\n    if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n      throw new HttpError(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.',\r\n        400\r\n      );\r\n    }\r\n\r\n    // If the client is found, send data through WebSocket\r\n    if (websocketClient && websocketClient.readyState === WebSocket.OPEN) {\r\n      // Already prepared options but before the export process\r\n      websocketClient.send(JSON.stringify(options));\r\n    }\r\n\r\n    // Start the export process\r\n    await startExport(options, (error, info) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // After the whole exporting process\r\n      if (defaultOptions.server.benchmarking) {\r\n        log(\r\n          5,\r\n          `[benchmark] Request with ID ${uniqueId} - After the whole exporting process: ${stopCounter()}ms.`\r\n        );\r\n      }\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        return log(\r\n          3,\r\n          `[export] The client closed the connection before the chart finished processing.`\r\n        );\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!info || !info.result) {\r\n        throw new HttpError(\r\n          `Unexpected return from chart generation. Please check your request data. For the request with ID ${uniqueId}, the result is ${info.result}.`,\r\n          400\r\n        );\r\n      }\r\n\r\n      // Get the type from options\r\n      type = info.options.export.type;\r\n\r\n      // The after request callbacks\r\n      doCallbacks(afterRequest, request, response, { id, body: info.result });\r\n\r\n      if (info.result) {\r\n        // If only base64 is required, return it\r\n        if (body.b64) {\r\n          // SVG Exception for the Highcharts 11.3.0 version\r\n          if (type === 'pdf' || type == 'svg') {\r\n            return response.send(\r\n              Buffer.from(info.result, 'utf8').toString('base64')\r\n            );\r\n          }\r\n\r\n          return response.send(info.result);\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!body.noDownload) {\r\n          response.attachment(\r\n            `${request.params.filename || request.body.filename || 'chart'}.${\r\n              type || 'png'\r\n            }`\r\n          );\r\n        }\r\n\r\n        // If SVG, return plain content\r\n        return type === 'svg'\r\n          ? response.send(info.result)\r\n          : response.send(Buffer.from(info.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\nexport default (app) => {\r\n  /**\r\n   * Adds the POST / a route for handling POST requests at the root endpoint.\r\n   */\r\n  app.post('/', exportHandler);\r\n\r\n  /**\r\n   * Adds the POST /:filename a route for handling POST requests with\r\n   * a specified filename parameter.\r\n   */\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pather } from 'path';\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\nconst pkgFile = JSON.parse(readFileSync(pather(__dirname, 'package.json')));\r\n\r\nconst serverStartTime = new Date();\r\n\r\n/**\r\n * Adds the GET /health route, which outputs basic stats for the server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/health', (request, response) => {\r\n        response.send({\r\n          status: 'OK',\r\n          bootTime: serverStartTime,\r\n          uptime:\r\n            Math.floor(\r\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n            ) + ' minutes',\r\n          version: pkgFile.version,\r\n          highchartsVersion: cache.version(),\r\n          averageProcessingTime: pool.averageTime(),\r\n          performedExports: pool.processedWorkCount(),\r\n          failedExports: pool.droppedWork(),\r\n          exportAttempts: pool.workAttempts(),\r\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\r\n          // eslint-disable-next-line import/no-named-as-default-member\r\n          pool: pool.getPoolInfoJSON()\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport jwt from 'jsonwebtoken';\r\nimport multer from 'multer';\r\n\r\nimport errorHandler from './error.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport websocket from './websocket.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport { envConfig } from '../envConfig.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport vSwitchRoute from './routes/change_hc_version.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport healthRoute from './routes/health.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldSize: 50 * 1024 * 1024\r\n  }\r\n});\r\n\r\n// Enable body parser\r\napp.use(express.json({ limit: 50 * 1024 * 1024 }));\r\napp.use(express.urlencoded({ extended: true, limit: 50 * 1024 * 1024 }));\r\n\r\n// Use only non-file multipart form fields\r\napp.use(upload.none());\r\n\r\n/**\r\n * Attach error handlers to the server.\r\n *\r\n * @param {http.Server} server - The HTTP/HTTPS server instance.\r\n */\r\nconst attachErrorHandlers = (server) => {\r\n  server.on('clientError', (error) => {\r\n    logWithStack(1, error, `[server] Client error: ${error.message}`);\r\n  });\r\n  server.on('error', (error) => {\r\n    logWithStack(1, error, `[server] Server error: ${error.message}`);\r\n  });\r\n  server.on('connection', (socket) => {\r\n    socket.on('error', (error) => {\r\n      logWithStack(1, error, `[server] Socket error: ${error.message}`);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Starts an HTTP server based on the provided configuration. The `serverConfig`\r\n * object contains all server related properties (see the `server` section\r\n * in the `lib/schemas/config.js` file for a reference).\r\n *\r\n * @param {Object} serverConfig - The server configuration object.\r\n *\r\n * @throws {ExportError} - Throws an error if the server cannot be configured\r\n * and started.\r\n */\r\nexport const startServer = async (serverConfig) => {\r\n  try {\r\n    // Stop if not enabled\r\n    if (!serverConfig.enable) {\r\n      return false;\r\n    }\r\n\r\n    // Listen HTTP server\r\n    if (!serverConfig.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      // Attach error handlers and listen to the server\r\n      attachErrorHandlers(httpServer);\r\n\r\n      // Listen\r\n      httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n      );\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverConfig.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(\r\n          2,\r\n          `[server] Unable to load key/certificate from the '${serverConfig.ssl.certPath}' path. Could not run secured layer server.`\r\n        );\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer({ key, cert }, app);\r\n\r\n        // Attach error handlers and listen to the server\r\n        attachErrorHandlers(httpsServer);\r\n\r\n        // Listen\r\n        httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enable the rate limiter if config says so\r\n    if (\r\n      serverConfig.rateLimiting &&\r\n      serverConfig.rateLimiting.enable &&\r\n      ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n    ) {\r\n      rateLimit(app, serverConfig.rateLimiting);\r\n    }\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n    // Set up routes\r\n    healthRoute(app);\r\n    exportRoutes(app);\r\n    uiRoute(app);\r\n    vSwitchRoute(app);\r\n\r\n    // Set up centralized error handler\r\n    errorHandler(app);\r\n    \r\n    // Set the WebSocket connection if enabled\r\n    if (envConfig.WS_ENABLE === true) {\r\n      websocket.connect(envConfig.WS_URL, {\r\n        rejectUnauthorized: envConfig.WS_REJECT_UNAUTHORIZED,\r\n        headers: {\r\n          // Set an access token that lasts only 5 minutes\r\n          auth: jwt.sign({ success: 'success' }, envConfig.WS_SECRET, {\r\n            algorithm: 'HS256',\r\n            expiresIn: '5m'\r\n          })\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Enable rate limiting for the server.\r\n *\r\n * @param {Object} limitConfig - Configuration object for rate limiting.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => rateLimit(app, limitConfig);\r\n\r\n/**\r\n * Get the Express instance.\r\n *\r\n * @returns {Object} - The Express instance.\r\n */\r\nexport const getExpress = () => express;\r\n\r\n/**\r\n * Get the Express app instance.\r\n *\r\n * @returns {Object} - The Express app instance.\r\n */\r\nexport const getApp = () => app;\r\n\r\n/**\r\n * Apply middleware(s) to a specific path.\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with GET method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with POST method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  enableRateLimiting,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n\r\n/**\r\n * Adds the GET / route for a UI when enabled on the export server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n/**\r\n * Adds the POST /change_hc_version/:newVersion route that can be utilized to modify\r\n * the Highcharts version on the server.\r\n *\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post(\r\n        '/version/change/:newVersion',\r\n        async (request, response, next) => {\r\n          try {\r\n            const adminToken = process.env.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n            // Check the existence of the token\r\n            if (!adminToken || !adminToken.length) {\r\n              throw new HttpError(\r\n                'The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Check if the hc-auth header contain a correct token\r\n            const token = request.get('hc-auth');\r\n            if (!token || token !== adminToken) {\r\n              throw new HttpError(\r\n                'Invalid or missing token: Set the token in the hc-auth header.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Compare versions\r\n            const newVersion = request.params.newVersion;\r\n            if (newVersion) {\r\n              try {\r\n                // eslint-disable-next-line import/no-named-as-default-member\r\n                await cache.updateVersion(newVersion);\r\n              } catch (error) {\r\n                throw new HttpError(\r\n                  `Version change: ${error.message}`,\r\n                  error.statusCode\r\n                ).setError(error);\r\n              }\r\n\r\n              // Success\r\n              response.status(200).send({\r\n                statusCode: 200,\r\n                version: cache.version(),\r\n                message: `Successfully updated Highcharts to version: ${newVersion}.`\r\n              });\r\n            } else {\r\n              // No version specified\r\n              throw new HttpError('No new version supplied.', 400);\r\n            }\r\n          } catch (error) {\r\n            next(error);\r\n          }\r\n        }\r\n      );\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport 'colors';\r\n\r\nimport { checkAndUpdateCache } from './cache.js';\r\nimport {\r\n  batchExport,\r\n  setAllowCodeExecution,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, manualConfig, setOptions } from './config.js';\r\nimport {\r\n  initLogging,\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging\r\n} from './logger.js';\r\nimport { initPool, killPool } from './pool.js';\r\nimport server, { startServer } from './server/server.js';\r\nimport { printLogo, printUsage } from './utils.js';\r\n\r\n/**\r\n * Initializes the export process. Tasks such as configuring logging, checking\r\n * cache and sources, and initializing the pool of resources happen during\r\n * this stage. Function that is required to be called before trying to export charts or setting a server. The `options` is an object that contains all options.\r\n *\r\n * @param {Object} options - All export options.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the updated export options.\r\n */\r\nconst initExport = async (options) => {\r\n  // Set the allowCodeExecution per export module scope\r\n  setAllowCodeExecution(\r\n    options.customLogic && options.customLogic.allowCodeExecution\r\n  );\r\n\r\n  // Init the logging\r\n  initLogging(options.logging);\r\n\r\n  // Check if cache needs to be updated\r\n  await checkAndUpdateCache(options.highcharts || { version: 'latest' });\r\n\r\n  // Init the pool\r\n  await initPool({\r\n    pool: options.pool || {\r\n      minWorkers: 1,\r\n      maxWorkers: 1\r\n    },\r\n    puppeteerArgs: options.puppeteer?.args || []\r\n  });\r\n\r\n  // Return updated options\r\n  return options;\r\n};\r\n\r\nexport default {\r\n  // Server\r\n  server,\r\n  startServer,\r\n  setOptions,\r\n\r\n  // Exporting\r\n  initExport,\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n  killPool,\r\n\r\n  // Logs\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n\r\n  // Utils\r\n  mapToNewConfig,\r\n  manualConfig,\r\n  printLogo,\r\n  printUsage\r\n};\r\n"],"names":["async","fetch","url","requestOptions","Promise","resolve","reject","protocol","startsWith","https","http","getProtocol","get","res","data","on","chunk","text","error","dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","forceFetch","cachePath","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customLogic","allowCodeExecution","allowFileResources","customCode","callback","resources","loadConfig","legacyName","createConfig","server","enable","cliName","host","port","benchmarking","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","listenToProcessExits","logging","level","file","dest","ui","route","other","noLogo","promptsConfig","name","message","initial","join","separator","instructions","choices","hint","min","max","round","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","undefined","colors","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","logToFile","texts","prefix","existsSync","mkdirSync","appendFile","concat","console","log","newLevel","length","Date","toString","split","trim","fn","apply","logWithStack","customMessage","mainMessage","stackMessage","stack","slice","setLogLevel","enableFileLogging","logDest","logFile","endsWith","__dirname","fileURLToPath","URL","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","isCorrectJSON","readFileSync","files","propName","map","item","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","replaceAll","printUsage","bold","yellow","cycleCategories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","measureTime","start","process","hrtime","bigint","Number","ExportError","Error","constructor","super","this","setError","statusCode","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","indexOf","fetchAndProcessScript","script","proxyAgent","fetchedModules","shouldThrowError","agent","timeout","env","response","updateCache","sourcePath","customScripts","proxyHost","proxyPort","HttpsProxyAgent","moduleScripts","allFetchPromises","all","fetchScripts","c","m","writeFileSync","checkAndUpdateCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","getCachePath","cache$1","newVersion","assign","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","numEnvVal","el","initOptions","items","recursiveProps","objectToUpdate","nestedNames","shift","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","setPageContent","page","setContent","addScriptTag","evaluate","setupHighcharts","$eval","element","errorMessage","_displayErrors","innerHTML","clearPage","hardReset","goto","document","body","newPage","setCacheEnabled","close","isConnected","__basedir","setAsConfig","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportOptions","requestAnimationFrame","displayErrors","debugger","isSVG","d","svgTemplate","strInj","js","push","content","isLocal","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","_resolve","setTimeout","createImage","pdf","createPDF","oldCharts","oldChart","destroy","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","startDate","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","initPool","code","killPool","exit","allArgs","tryCount","open","launch","headless","userDataDir","createBrowser","parseInt","Pool","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","resource","eventId","initialResources","acquire","promise","release","browserClose","destroyed","postWork","getPoolInfo","acquireCounter","payload","requestId","workStart","exportCounter","result","exportTime","numFree","numUsed","numPendingAcquires","pool$1","available","inUse","pendingAcquire","startExport","settings","endCallback","svg","initExportSettings","exportAsString","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customLogicOptions","allowCodeExecutionScoped","enabled","optionsName","stringToExport","chartJSON","logErrorMiddleware","req","next","NODE_ENV","returnErrorMiddleware","stCode","status","json","rateLimit","app","limitConfig","msg","rateOptions","limiter","windowMs","delayMs","handler","request","format","send","default","skip","query","access_token","use","envToBoolean","z","enum","transform","v","envConfig","object","WS_ENABLE","optional","WS_RECONNECT","WS_REJECT_UNAUTHORIZED","WS_PING_TIMEOUT","coerce","number","WS_RECONNECT_INTERVAL","WS_URL","string","WS_SECRET","webSocket","reconnectInterval","connect","webSocketUrl","WebSocket","clearInterval","clearTimeout","_pingTimeout","terminate","setInterval","reconnect","websocket","getClient","HttpError","setStatus","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","stopCounter","defaultOptions","websocketClient","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","substr","b64","noDownload","ipRegEx","isPrivateRangeUrlFound","readyState","OPEN","info","removeAllListeners","Buffer","from","header","attachment","params","filename","pkgFile","pather","serverStartTime","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldSize","limit","urlencoded","extended","none","attachErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","readFile","posix","httpsServer","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","adminToken","HIGHCHARTS_ADMIN_TOKEN","token","vSwitchRoute","errorHandler","rejectUnauthorized","auth","jwt","sign","success","algorithm","expiresIn","enableRateLimiting","getExpress","getApp","middlewares","index","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","showUsage","propertiesChain","argumentType","reduce","prop","pairArgumentValue","initExport","initLogging","singleExport","batchExport","batchFunctions","pair","mapToNewConfig","oldOptions","manualConfig","configFileName","configFile","choice","prompts","onSubmit","p","categories","questionsCounter","allQuestions","section","prompt","answer","module","writeFile","printLogo","packageVersion"],"mappings":"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"}
