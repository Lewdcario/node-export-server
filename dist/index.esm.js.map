{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/server/rate_limit.js","../lib/envConfig.js","../lib/server/websocket.js","../lib/fetch.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../lib/benchmark.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/server/routes/health.js","../lib/config.js","../lib/chart.js","../lib/server/routes/export.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Load .env into environment variables\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Array of arguments to send to puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      type: 'string',\r\n      description: 'Highcharts version to use.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      envLink: 'HIGHCHARTS_CDN',\r\n      type: 'string',\r\n      description: 'The CDN URL of Highcharts scripts to use.'\r\n    },\r\n    coreScripts: {\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      type: 'string[]',\r\n      description: 'Highcharts core scripts to fetch.'\r\n    },\r\n    modules: {\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'export-data',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'timeline',\r\n        'treemap',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'solid-gauge',\r\n        'sonification',\r\n        'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Highcharts modules to fetch.'\r\n    },\r\n    indicators: {\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      value: ['indicators-all'],\r\n      type: 'string[]',\r\n      description: 'Highcharts indicators to fetch.'\r\n    },\r\n    scripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description:\r\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\r\n    },\r\n    forceFetch: {\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Should all the scripts be refetched after rerunning the server.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file name along with a type (json or svg). It can be a correct JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag.'\r\n    },\r\n    type: {\r\n      envLink: 'EXPORT_DEFAULT_TYPE',\r\n      value: 'png',\r\n      type: 'string',\r\n      description:\r\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\r\n    },\r\n    constr: {\r\n      envLink: 'EXPORT_DEFAULT_CONSTR',\r\n      value: 'chart',\r\n      type: 'string',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      value: 400,\r\n      type: 'number',\r\n      description:\r\n        'The default height of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultWidth: {\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      value: 600,\r\n      type: 'number',\r\n      description:\r\n        'The default width of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultScale: {\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      value: 1,\r\n      type: 'number',\r\n      description:\r\n        'The default scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    height: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The default height of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    width: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The width of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description: 'The scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Starts a batch job. A string that contains input/output pairs: \"in=out;in=out;..\".'\r\n    }\r\n  },\r\n  customCode: {\r\n    allowCodeExecution: {\r\n      envLink: 'HIGHCHARTS_ALLOW_CODE_EXECUTION',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'If set to true, allow for the execution of arbitrary code when exporting.'\r\n    },\r\n    allowFileResources: {\r\n      envLink: 'HIGHCHARTS_ALLOW_FILE_RESOURCES',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Allow injecting resources from the filesystem. Has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A function to be called before chart initialization. Can be a filename with the js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A JavaScript file with a function to run on construction.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An additional resource in a form of stringified JSON. It can contain files, js and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A file that contains a pre-defined config to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Allows to set options through a prompt and save in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_SERVER_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableServer',\r\n      description: 'If set to true, starts a server on 0.0.0.0.'\r\n    },\r\n    host: {\r\n      envLink: 'HIGHCHARTS_SERVER_HOST',\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      description:\r\n        'The hostname of the server. Also starts a server listening on the supplied hostname.'\r\n    },\r\n    port: {\r\n      envLink: 'HIGHCHARTS_SERVER_PORT',\r\n      value: 7801,\r\n      type: 'number',\r\n      description: 'The port to use for the server. Defaults to 7801.'\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables the SSL protocol.'\r\n      },\r\n      force: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_FORCE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'sslForced',\r\n        description:\r\n          'If set to true, forces the server to only serve over HTTPS.'\r\n      },\r\n      port: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_PORT',\r\n        value: 443,\r\n        type: 'number',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_CERT_PATH',\r\n        value: '',\r\n        type: 'string',\r\n        description: 'The path to the SSL certificate/key.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting.'\r\n      },\r\n      maxRequests: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_MAX',\r\n        value: 10,\r\n        type: 'number',\r\n        description: 'Max requests allowed in a one minute.'\r\n      },\r\n      window: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_WINDOW',\r\n        value: 1,\r\n        type: 'number',\r\n        description: 'The time window in minutes for rate limiting.'\r\n      },\r\n      delay: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_DELAY',\r\n        value: 0,\r\n        type: 'number',\r\n        description:\r\n          'The amount to delay each successive request before hitting the max.'\r\n      },\r\n      trustProxy: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_TRUST_PROXY',\r\n        value: false,\r\n        type: 'boolean',\r\n        description: 'Set this to true if behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_KEY',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipKey argument.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    initialWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MIN_WORKERS',\r\n      value: 4,\r\n      type: 'number',\r\n      description: 'The number of initial workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MAX_WORKERS',\r\n      value: 8,\r\n      type: 'number',\r\n      description: 'The number of max workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      envLink: 'HIGHCHARTS_POOL_WORK_LIMIT',\r\n      value: 40,\r\n      type: 'number',\r\n      description:\r\n        'The pieces of work that can be performed before restarting process.'\r\n    },\r\n    queueSize: {\r\n      envLink: 'HIGHCHARTS_POOL_QUEUE_SIZE',\r\n      value: 5,\r\n      type: 'number',\r\n      description: 'The size of the request overflow queue.'\r\n    },\r\n    timeoutThreshold: {\r\n      envLink: 'HIGHCHARTS_POOL_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description: 'The number of milliseconds before timing out.'\r\n    },\r\n    acquireTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_ACQUIRE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds to wait for acquiring a resource.'\r\n    },\r\n    reaper: {\r\n      envLink: 'HIGHCHARTS_POOL_REAPER_ENABLE',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Whether or not to evict workers after a certain time period.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'HIGHCHARTS_POOL_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      description: 'Enable benchmarking.'\r\n    },\r\n    listenToProcessExits: {\r\n      envLink: 'HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Set to false in order to skip attaching process.exit handlers.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      envLink: 'HIGHCHARTS_LOG_LEVEL',\r\n      value: 4,\r\n      type: 'number',\r\n      cliName: 'logLevel',\r\n      description:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose).'\r\n    },\r\n    file: {\r\n      envLink: 'HIGHCHARTS_LOG_FILE',\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      cliName: 'logFile',\r\n      description:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      envLink: 'HIGHCHARTS_LOG_DEST',\r\n      value: 'log/',\r\n      type: 'string',\r\n      cliName: 'logDest',\r\n      description: 'The path to store log files. Also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_UI_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableUi',\r\n      description: 'Enables the UI for the export server.'\r\n    },\r\n    route: {\r\n      envLink: 'HIGHCHARTS_UI_ROUTE',\r\n      value: '/',\r\n      type: 'string',\r\n      cliName: 'uiRoute',\r\n      description: 'The route to attach the UI to.'\r\n    }\r\n  },\r\n  other: {\r\n    noLogo: {\r\n      envLink: 'HIGHCHARTS_NO_LOGO',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  },\r\n  payload: {}\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The url of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'scripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.scripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Should refetch all the scripts after each server rerun',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default type of a file to export to',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts to use',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    }\r\n  ],\r\n  customCode: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Allow to execute custom code',\r\n      initial: defaultConfig.customCode.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Allow file resources',\r\n      initial: defaultConfig.customCode.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts a server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'A hostname of a server',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'A port of a server',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force to only serve over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'Port on which to run the SSL server',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'A path where to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'Max requests allowed in a one minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The time window in minutes for rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The amount to delay each successive request before hitting the max',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set this to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'initialWorkers',\r\n      message: 'The number of initial workers to spawn',\r\n      initial: defaultConfig.pool.initialWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The number of max workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'queueSize',\r\n      message: 'The size of the request overflow queue',\r\n      initial: defaultConfig.pool.queueSize.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'timeoutThreshold',\r\n      message: 'The number of seconds before timing out',\r\n      initial: defaultConfig.pool.timeoutThreshold.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'reaper',\r\n      message: 'The reaper to remove hanging processes',\r\n      initial: defaultConfig.pool.reaper.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Set benchmarking',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false in order to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 4\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'A path to log files. It enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI to',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Creates nested arguments chain for all options\r\n *\r\n * @param {object} obj - The object based on which the initial configuration be\r\n * made.\r\n * @param {string } propChain - Required for creating a string chain of\r\n * properties for nested arguments.\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: 'red'\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: 'yellow'\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: 'gray'\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the file logging configuration.\r\n *\r\n * @param {string} logDest - A path to log to.\r\n * @param {string} logFile - The name of the log file.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging init: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a log listener.\r\n *\r\n * @param {function} fn - The function to call when getting a log event.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Sets the current log level. Log levels are:\r\n * - 0 = no logging\r\n * - 1 = error\r\n * - 2 = warning\r\n * - 3 = notice\r\n * - 4 = verbose\r\n *\r\n * @param {number} newLevel - The new log level (0 - 4).\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables or disables logging to the stdout.\r\n *\r\n * @param {boolean} enabled - Whether log to console or not.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  enableFileLogging,\r\n  listen,\r\n  setLogLevel,\r\n  toggleSTDOut\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears text from whitespaces with a regex rule.\r\n *\r\n * @param {string} rule - The rule for clearing a string, default to /\\s\\s+/g.\r\n * @return {string} - Cleared text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Delays calling the function by time calculated based on the backoff\r\n * algorithm.\r\n *\r\n * @param {function} fn - A function to try to call with the backoff algorithm\r\n * on.\r\n * @param {number} attempt - The number of an attempt, where the first one is 0.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes to supported type format if MIME.\r\n *\r\n * @param {string} type - Type to be corrected.\r\n * @param {string} outfile - Name of the outfile.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Check if extension has a correct type\r\n    if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles the provided resources.\r\n *\r\n * @param {string} resources - The stringified resources.\r\n * @param {string} allowFileResources - Decide if resources from file are\r\n * allowed.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      if (!resources) {\r\n        handledResources = isCorrectJSON(\r\n          readFileSync('resources.json', 'utf8')\r\n        );\r\n      } else if (resources && resources.endsWith('.json')) {\r\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n      } else {\r\n        handledResources = isCorrectJSON(resources);\r\n        if (handledResources === true) {\r\n          handledResources = isCorrectJSON(\r\n            readFileSync('resources.json', 'utf8')\r\n          );\r\n        }\r\n      }\r\n    } catch (notice) {\r\n      return log(3, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (!allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Checks if provided data is or can be a correct JSON.\r\n *\r\n * @param {any} data - Data to be checked.\r\n * @param {boolean} toString - If true, return stringified representation.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if item is an object.\r\n *\r\n * @param {any} item - Item to be checked.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if string contains private range urls.\r\n *\r\n * @export utils\r\n * @param item {string} item to be checked\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  return [\r\n    'localhost',\r\n    '(10).(.*).(.*).(.*)',\r\n    '(127).(.*).(.*).(.*)',\r\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\r\n    '(192).(168).(.*).(.*)'\r\n  ].some((ipRegEx) =>\r\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\r\n  );\r\n};\r\n\r\n/**\r\n * Creates and returns a deep copy of the given object.\r\n *\r\n * @param {object} object - Object to copy.\r\n * @return {object} - Deep copy of the object.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Stringifies object with options. Possible to preserve functions with\r\n * allowFunctions flag.\r\n *\r\n * @param {object} options - Options to stringify.\r\n * @param {boolean} allowFunctions - Flag for keeping functions.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the export server logo.\r\n *\r\n * @param {boolean} noLogo - Whether to display logo or text.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion =\r\n    process.env.npm_package_version ||\r\n    JSON.parse(readFileSync(new URL('../package.json', import.meta.url)))\r\n      .version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting highcharts export server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the CLI usage. If required, it can list properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    'Usage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information visit readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (categories) => {\r\n    for (const [name, option] of Object.entries(categories)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds number to passed precision.\r\n *\r\n * @param {number} value - Number to round.\r\n * @param {number} precision - A precision of rounding.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Casts the item to boolean.\r\n *\r\n * @param {any} item - Item to be cast.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * If necessary, places a custom code inside a function.\r\n *\r\n * @param {any} customCode - The customCode.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure time.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { clearText } from '../utils.js';\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Enables rate limiting for a given app.\r\n *\r\n * @param {object} app - The express app.\r\n * @param {object} limitConfig - The options for the rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate-limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    clearText(\r\n      `[rate-limiting] Enabled rate limiting: ${rateOptions.max} requests\r\n      per ${rateOptions.window} minute per IP, trusting proxy:\r\n      ${rateOptions.trustProxy}.`\r\n    )\r\n  );\r\n};\r\n","import { z } from 'zod';\r\n\r\nconst envToBoolean = () =>\r\n  z.enum(['true', 'false']).transform((v) => v === 'true');\r\n\r\nconst EnvConfig = z.object({\r\n  WS_ENABLE: envToBoolean(),\r\n  WS_RECONNECT: envToBoolean(),\r\n  WS_REJECT_UNAUTHORIZED: envToBoolean(),\r\n  WS_PING_TIMEOUT: z.coerce.number(),\r\n  WS_RECONNECT_INTERVAL: z.coerce.number(),\r\n  WS_URL: z.string(),\r\n  WS_SECRET: z.string()\r\n});\r\n\r\nexport const envConfig = EnvConfig.parse(process.env);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\nimport WebSocket from 'ws';\r\n\r\nimport { log } from '../logger.js';\r\nimport { envConfig } from '../envConfig.js';\r\n\r\n// WebSocket client\r\nlet webSocket;\r\n\r\n// In case of closing or termination of a client connection\r\nlet reconnectInterval;\r\n\r\n/**\r\n * Connects to WebSocket on a provided url.\r\n *\r\n * @param {string} webSocketUrl - The WebSocket server's URL.\r\n * @param {object} options - Options for WebSocket connection.\r\n */\r\nfunction connect(webSocketUrl, options) {\r\n  // Try to connect to indicated WebSocket server\r\n  webSocket = new WebSocket(webSocketUrl, options);\r\n\r\n  // Open event\r\n  webSocket.on('open', () => {\r\n    log(3, `[websocket] Connected to WebSocket server: ${webSocketUrl}`);\r\n    clearInterval(reconnectInterval);\r\n  });\r\n\r\n  // Close event where ping timeout is cleared\r\n  webSocket.on('close', (code) => {\r\n    log(\r\n      3,\r\n      '[websocket]',\r\n      `Disconnected from WebSocket server: ${webSocketUrl} with code: ${code}`\r\n    );\r\n    clearTimeout(webSocket._pingTimeout);\r\n    webSocket = null;\r\n  });\r\n\r\n  // Error event\r\n  webSocket.on('error', (error) => {\r\n    log(1, `[websocket] WebSocket error occured: ${error.message}`);\r\n  });\r\n\r\n  // Message event\r\n  webSocket.on('message', (message) => {\r\n    log(3, `[websocket] Data received: ${message}`);\r\n  });\r\n\r\n  // Ping event with the connection health check and termination logic\r\n  webSocket.on('ping', () => {\r\n    log(3, '[websocket] PING');\r\n    clearTimeout(webSocket._pingTimeout);\r\n    webSocket._pingTimeout = setTimeout(() => {\r\n      // Terminate the client connection\r\n      webSocket.terminate();\r\n\r\n      // Try to reconnect if required\r\n      if (envConfig.WS_RECONNECT === true) {\r\n        reconnect(webSocketUrl, options);\r\n      }\r\n    }, envConfig.WS_PING_TIMEOUT);\r\n  });\r\n}\r\n\r\n/**\r\n * Re-connects to WebSocket on a provided url.\r\n *\r\n * @param {string} webSocketUrl - The WebSocket server's URL.\r\n * @param {object} options - Options for WebSocket connection.\r\n */\r\nfunction reconnect(webSocketUrl, options) {\r\n  reconnectInterval = setInterval(() => {\r\n    if (webSocket === null) {\r\n      connect(webSocketUrl, options);\r\n    }\r\n  }, envConfig.WS_RECONNECT_INTERVAL);\r\n}\r\n\r\n/**\r\n * Gets the instance of the WebSocket connection.\r\n */\r\nfunction getClient() {\r\n  return webSocket;\r\n}\r\n\r\nexport default {\r\n  connect,\r\n  getClient\r\n};\r\n","/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Determines the protocol of the given URL (either `http` or `https`).\r\n *\r\n * @function\r\n * @param {string} url - The URL whose protocol needs to be determined.\r\n * @returns {Object} Returns the `https` module if the URL starts with 'https',\r\n * otherwise returns the `http` module.\r\n * @private\r\n *\r\n * @example\r\n *\r\n * const protocol = getProtocol('https://example.com');\r\n * console.log(protocol); // Outputs the 'https' module\r\n */\r\nconst getProtocol = (url) => {\r\n  return url.startsWith('https') ? https : http;\r\n};\r\n\r\n/**\r\n * Sends a GET request to the specified URL with optional request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to fetch.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} Returns a promise that resolves with the response object.\r\n * The response object contains a `.text` property with the raw response data.\r\n * @throws {Error} Throws an error if the request fails or if no data is fetched from the URL.\r\n *\r\n * @example\r\n *\r\n * async function getData() {\r\n *   try {\r\n *     const response = await fetch('https://api.example.com/data');\r\n *     console.log(response.text);\r\n *   } catch (error) {\r\n *     console.error('Error fetching data:', error);\r\n *   }\r\n * }\r\n *\r\n * getData();\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(url, requestOptions, (res) => {\r\n        let data = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          if (!data) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n\r\n          res.text = data;\r\n          resolve(res);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the given body and request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to which the request should be sent.\r\n * @param {Object} [body={}] - The data to be sent as the request body, in JSON format.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} - Returns a promise that resolves with the parsed JSON response.\r\n * @throws {Error} Throws an error if the request fails or if the response cannot be parsed.\r\n *\r\n * @example\r\n *\r\n * async function sendData() {\r\n *   const dataToSend = {\r\n *     key1: 'value1',\r\n *     key2: 'value2',\r\n *   };\r\n *   try {\r\n *     const response = await post('https://api.example.com/data', dataToSend);\r\n *     console.log(response);\r\n *   } catch (error) {\r\n *     console.error('Error sending data:', error);\r\n *   }\r\n * }\r\n *\r\n * sendData();\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport dotenv from 'dotenv';\r\nimport HttpsProxyAgent from 'https-proxy-agent';\r\nimport { fetch } from './fetch.js';\r\n\r\nimport { log } from './logger.js';\r\nimport { __dirname } from '../lib/utils.js';\r\n\r\ndotenv.config();\r\n\r\nconst cachePath = join(__dirname, '.cache');\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\r\nlet appliedConfig = false;\r\n\r\n/**\r\n * Extracts the Highcharts version from the cache\r\n */\r\nconst extractVersion = () =>\r\n  (cache.hcVersion = cache.sources\r\n    .substr(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim());\r\n\r\n/**\r\n * Saves the Highcharts part of a config to a manifest file in the cache\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n */\r\nconst saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(4, '[cache] writing new manifest');\r\n\r\n  try {\r\n    writeFileSync(\r\n      join(cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    log(1, `[cache] Error writing cache manifest: ${error}.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {object} proxyAgent - The proxy agent to use for a request.\r\n */\r\nconst fetchScript = async (script, proxyAgent) => {\r\n  try {\r\n    // Get rid of the .js from the custom strings\r\n    if (script.endsWith('.js')) {\r\n      script = script.substring(0, script.length - 3);\r\n    }\r\n\r\n    log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n    // If exists, add proxy agent to request options\r\n    const requestOptions = proxyAgent\r\n      ? {\r\n          agent: proxyAgent,\r\n          timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\r\n        }\r\n      : {};\r\n\r\n    // Fetch the script\r\n    const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n    // If OK, return its text representation\r\n    if (response.statusCode === 200) {\r\n      return response.text;\r\n    }\r\n\r\n    throw `${response.statusCode}`;\r\n  } catch (error) {\r\n    log(1, `[cache] Error fetching script ${script}.js: ${error}.`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts cache.\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n * @param {string} sourcePath - A path to the file where save updated sources.\r\n * @return {object} An object that contains mapped names of fetched Highcharts\r\n * modules to use.\r\n */\r\nconst updateCache = async (config, sourcePath) => {\r\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\r\n  const hcVersion =\r\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\r\n\r\n  log(3, '[cache] Updating cache to Highcharts ', hcVersion);\r\n\r\n  // Gather all scripts to fetch\r\n  const allScripts = [\r\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\r\n    ...modules.map((m) =>\r\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\r\n    ),\r\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\r\n  ];\r\n\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\r\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\r\n\r\n  if (proxyHost && proxyPort) {\r\n    proxyAgent = new HttpsProxyAgent({\r\n      host: proxyHost,\r\n      port: +proxyPort\r\n    });\r\n  }\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = // TODO: convert to for loop\r\n      (\r\n        await Promise.all([\r\n          ...allScripts.map(async (script) => {\r\n            const text = await fetchScript(\r\n              `${config.cdnURL || cache.cdnURL}${script}`,\r\n              proxyAgent\r\n            );\r\n\r\n            // If fetched correctly, set it\r\n            if (typeof text === 'string') {\r\n              fetchedModules[\r\n                script.replace(\r\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n                  ''\r\n                )\r\n              ] = 1;\r\n            }\r\n\r\n            return text;\r\n          }),\r\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\r\n        ])\r\n      ).join(';\\n');\r\n    extractVersion();\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    log(1, '[cache] Unable to update local Highcharts cache.');\r\n  }\r\n};\r\n\r\nexport const updateVersion = async (newVersion) =>\r\n  appliedConfig\r\n    ? await checkCache(\r\n        Object.assign(appliedConfig, {\r\n          version: newVersion\r\n        })\r\n      )\r\n    : false;\r\n\r\n/**\r\n * Fetches any missing Highcharts and dependencies\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n */\r\nexport const checkCache = async (config) => {\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // TODO: deal with trying to switch to the running version\r\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\r\n\r\n  appliedConfig = config;\r\n\r\n  // Create the .cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || config.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(config, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, coreScripts, indicators } = config;\r\n    const numberOfModules =\r\n      modules.length + coreScripts.length + indicators.length;\r\n\r\n    // Compare the loaded config with the contents in .cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== config.version) {\r\n      log(3, '[cache] Highcharts version mismatch in cache, need to re-fetch.');\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        3,\r\n        '[cache] Cache and requested modules does not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (config.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            3,\r\n            `[cache] The ${moduleName} missing in cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(config, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n      extractVersion();\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(config, fetchedModules);\r\n};\r\n\r\nexport default {\r\n  checkCache,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport puppeteer from 'puppeteer';\r\nimport fs from 'fs';\r\nimport * as url from 'url';\r\nimport { log } from './logger.js';\r\nimport path from 'node:path';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\nexport const newPage = async () => {\r\n  if (!browser) return false;\r\n\r\n  const p = await browser.newPage();\r\n\r\n  await p.setContent(template);\r\n  await p.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\r\n  // eslint-disable-next-line no-undef\r\n  await p.evaluate(() => window.setupHighcharts());\r\n\r\n  p.on('pageerror', async (err) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    log(1, '[page error]', err);\r\n    await p.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${err.toString()}`\r\n    );\r\n  });\r\n\r\n  return p;\r\n};\r\n\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          '[browser] attempting to get a browser instance (try',\r\n          tryCount + ')'\r\n        );\r\n\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (e) {\r\n        log(0, '[browser]', e);\r\n        if (++tryCount < 25) {\r\n          log(3, '[browser] failed:', e);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          log(0, 'Max retries reached');\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (e) {\r\n      log(0, '[browser] Unable to open browser');\r\n      return false;\r\n    }\r\n\r\n    if (!browser) {\r\n      log(0, '[browser] Unable to open browser');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw 'No valid browser has been created';\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\nexport const close = async () => {\r\n  // Close the browser when connnected\r\n  if (browser.connected) {\r\n    await browser.close();\r\n  }\r\n};\r\n\r\nexport default {\r\n  get,\r\n  close,\r\n  newPage\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// TODO: remove this temp benchmark stuff. I had this idea of doing a general benchmarking\r\n// system, but it adds so much bloat in the code that it shouldn't be there.\r\n\r\nimport benchmark from './benchmark.js';\r\nimport cache from './cache.js';\r\nimport { log } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n// const jsonTemplate = require('./../templates/json_export/json_export.js');\r\n\r\n/**\r\n * Gets the clip region for the chart DOM node.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - A clipped region.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Rasterizes the page to an image (PNG or JPEG)\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {string} type - The type of a result image.\r\n * @param {string} encoding - The type of encoding used.\r\n * @param {string} clip - The clip region.\r\n * @returns {string} - A string representation of a screenshot.\r\n */\r\nconst createImage = async (page, type, encoding, clip) =>\r\n  await Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n\r\n      // #447 - always render on a transparent page\r\n      // this will not affect users who do not explicitly set\r\n      // chart.backgroundColor to a color with opacity lower than 1\r\n      omitBackground: true\r\n    }),\r\n    new Promise((resolve, reject) =>\r\n      setTimeout(() => reject(new Error('Rasterization timeout')), 1500)\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Turns page into a PDF.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {number} height - The height of a chart.\r\n * @param {number} width - The width of a chart.\r\n * @param {string} encoding - The type of encoding used.\r\n * @return {object} - A buffer with PDF representation.\r\n */\r\nconst createPDF = async (page, height, width, encoding) =>\r\n  await page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Exports as a SVG.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - The outerHTML element with the SVG representation.\r\n */\r\nconst createSVG = async (page) =>\r\n  await page.$eval(\r\n    '#container svg:first-of-type',\r\n    (element) => element.outerHTML\r\n  );\r\n\r\n/** Load config into a page and render a chart */\r\nconst setAsConfig = async (page, chart, options) =>\r\n  await page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/** Load SVG into a page */\r\n// const setAsSVG = async (page, svgStr) => true;\r\n\r\n/**\r\n * Does an export for a given browser.\r\n *\r\n * @param {object} browser - A browser instance.\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n * @return {object} - The data returned from one of the methods for exporting\r\n * a specific type of an image.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    const exportBench = benchmark('Puppeteer');\r\n\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    const svgBench = benchmark('SVG handling');\r\n\r\n    let isSVG;\r\n\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG INPUT HANDLING\r\n\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also svg, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      const setPageBench = benchmark('Setting content');\r\n      await page.setContent(svgTemplate(chart));\r\n      setPageBench();\r\n    } else {\r\n      // JSON Config handling\r\n\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        const setPageBench = benchmark('Setting page content (inject)');\r\n\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n\r\n        setPageBench();\r\n      } else {\r\n        // Basic configuration export\r\n\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        const setContentBench = benchmark('Setting page content (config)');\r\n        await setAsConfig(page, chart, options);\r\n        setContentBench();\r\n      }\r\n    }\r\n\r\n    svgBench();\r\n    const resBench = benchmark('Applying resources');\r\n\r\n    // Use resources\r\n    const resources = options.customCode.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (notice) {\r\n            log(4, '[export] JS file not found.');\r\n          }\r\n        }\r\n      }\r\n\r\n      const cssBench = benchmark('Loading css');\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customCode.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n\r\n      cssBench();\r\n    }\r\n\r\n    resBench();\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          async (element, scale) => {\r\n            return {\r\n              chartHeight: element.height.baseVal.value * scale,\r\n              chartWidth: element.width.baseVal.value * scale\r\n            };\r\n          },\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(async () => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    const vpBench = benchmark('Setting viewport');\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    vpBench();\r\n\r\n    let data;\r\n\r\n    const expBenchmark = benchmark('Rasterizing chart');\r\n\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\r\n      // PNG or JPEG\r\n      data = await createImage(page, exportOptions.type, 'base64', {\r\n        width: viewportWidth,\r\n        height: viewportHeight,\r\n        x,\r\n        y\r\n      });\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw `Unsupported output format ${exportOptions.type}`;\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const oldCharts = Highcharts.charts;\r\n\r\n      // Check in any already existing charts\r\n      if (oldCharts.length) {\r\n        // Destroy old charts\r\n        for (const oldChart of oldCharts) {\r\n          oldChart && oldChart.destroy();\r\n          // eslint-disable-next-line no-undef\r\n          Highcharts.charts.shift();\r\n        }\r\n      }\r\n    });\r\n\r\n    expBenchmark();\r\n    exportBench();\r\n\r\n    await clearInjected(page);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    log(1, `[export] Error encountered during export: ${error}`);\r\n\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2022, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { log } from './logger.js';\r\nconst timers = {};\r\n\r\n// TODO: Read from config\r\nlet enabled = false;\r\n\r\nexport default (id) => {\r\n  if (!enabled) {\r\n    return () => {};\r\n  }\r\n\r\n  timers[id] = new Date();\r\n  return () => {\r\n    log(\r\n      3,\r\n      `[benchmark] - ${id}: ${new Date().getTime() - timers[id].getTime()}ms`\r\n    );\r\n  };\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Pool } from 'tarn';\r\nimport {\r\n  close,\r\n  newPage as browserNewPage,\r\n  create as createBrowser\r\n} from './browser.js';\r\nimport { log } from './logger.js';\r\n\r\nimport puppeteerExport from './export.js';\r\n\r\nlet performedExports = 0;\r\nlet exportAttempts = 0;\r\nlet timeSpent = 0;\r\nlet droppedExports = 0;\r\nlet spentAverage = 0;\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker.\r\n   *\r\n   * @return {object} - An object with the id of a resource, the work count and\r\n   * a reference to the browser page.\r\n   */\r\n  create: async () => {\r\n    const id = uuid();\r\n    let page = false;\r\n\r\n    const s = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw 'invalid page';\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - s\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      log(\r\n        1,\r\n        `[pool] Error creating a new page in pool entry creation! ${error}`\r\n      );\r\n\r\n      throw 'Error creating page';\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   *\r\n   * @return {boolean} - Bool that indicates if a resource is valid or not.\r\n   */\r\n  validate: (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation:`,\r\n        `exceeded work limit (limit is ${poolConfig.workLimit})`\r\n      );\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  },\r\n\r\n  // Logger function\r\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\r\n};\r\n\r\n/**\r\n * Inits the pool of resources.\r\n *\r\n * @param {object} config - Pool configuration along with custom puppeteer\r\n * arguments for the puppeteer.launch function.\r\n */\r\nexport const init = async (config) => {\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Wait until we've sucessfully created a browser instance.\r\n  try {\r\n    await createBrowser(puppeteerArgs);\r\n  } catch (e) {\r\n    log(0, '[pool|browser]', e);\r\n  }\r\n\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  log(\r\n    3,\r\n    '[pool] Initializing pool:',\r\n    `min ${poolConfig.initialWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: poolConfig.initialWorkers,\r\n      max: poolConfig.maxWorkers,\r\n      createRetryIntervalMillis: 200,\r\n      createTimeoutMillis: poolConfig.acquireTimeout,\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      destroyTimeoutMillis: poolConfig.acquireTimeout,\r\n      idleTimeoutMillis: poolConfig.timeoutThreshold,\r\n      reapIntervalMillis: 1000, // poolConfig.reaper ? 120000 : 0, for now\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('createFail', (eventId, err) => {\r\n      log(\r\n        1,\r\n        `[pool] Error when creating worker of an event id ${eventId}:`,\r\n        err\r\n      );\r\n    });\r\n\r\n    pool.on('acquireFail', (eventId, err) => {\r\n      log(\r\n        1,\r\n        `[pool] Error when acquiring worker of an event id ${eventId}:`,\r\n        err\r\n      );\r\n    });\r\n\r\n    pool.on('destroyFail', (eventId, resource, err) => {\r\n      log(\r\n        1,\r\n        `[pool] Error when destroying worker of an id ${resource.id}, event id ${eventId}:`,\r\n        err\r\n      );\r\n    });\r\n\r\n    pool.on('release', (resource) => {\r\n      log(4, `[pool] Releasing a worker of an id ${resource.id}`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker of an id ${resource.id}`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.initialWorkers; i++) {\r\n      initialResources.push(await pool.acquire().promise);\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready with ${poolConfig.initialWorkers} initial resources waiting.`\r\n    );\r\n  } catch (error) {\r\n    log(1, `[pool] Couldn't create the worker pool ${error}`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches process' exit listeners.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(4, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async () => {\r\n    await killPool();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', async (error, name) => {\r\n    log(4, `The ${name} error, message: ${error.message}.`);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills the pool and flush the browser instance.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing all workers.');\r\n\r\n  // Return true when the pool is already destroyed\r\n  if (pool.destroyed) {\r\n    // Close the browser instance if still connected\r\n    await close();\r\n    return true;\r\n  }\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  await pool.destroy();\r\n\r\n  // Close the browser instance\r\n  await close();\r\n  return true;\r\n}\r\n\r\n/**\r\n * Posts work to the pool.\r\n *\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  // Handle fail conditions\r\n  const fail = (msg) => {\r\n    ++droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw 'In pool.postWork: ' + msg;\r\n  };\r\n\r\n  log(4, '[pool] Work received, starting to process.');\r\n\r\n  if (poolConfig.benchmarking) {\r\n    getPoolInfo();\r\n  }\r\n\r\n  ++exportAttempts;\r\n\r\n  if (!pool) {\r\n    log(1, '[pool] Work received, but pool has not been started.');\r\n    return fail('Pool is not inited but work was posted to it!');\r\n  }\r\n\r\n  // Acquire the worker along with the id of resource and work count\r\n  try {\r\n    log(4, '[pool] Acquiring worker');\r\n    workerHandle = await pool.acquire().promise;\r\n  } catch (error) {\r\n    return fail(`[pool] Error when acquiring available entry: ${error}`);\r\n  }\r\n\r\n  log(4, '[pool] Acquired worker handle');\r\n\r\n  if (!workerHandle.page) {\r\n    return fail('Resolved worker page is invalid: pool setup is wonky');\r\n  }\r\n\r\n  try {\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      return fail(result);\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    timeSpent += exportTime;\r\n    spentAverage = timeSpent / ++performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      data: result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    fail(`Error trying to perform puppeteer export: ${error}.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the pool.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  size: pool.size,\r\n  available: pool.available,\r\n  borrowed: pool.borrowed,\r\n  pending: pool.pending,\r\n  spareResourceCapacity: pool.spareResourceCapacity\r\n});\r\n\r\n/**\r\n * Gets the pool's information.\r\n */\r\nexport function getPoolInfo() {\r\n  const {\r\n    min,\r\n    max,\r\n    size,\r\n    available,\r\n    borrowed,\r\n    pending,\r\n    spareResourceCapacity\r\n  } = pool;\r\n\r\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    4,\r\n    `[pool] The number of all resources in pool (free or in use): ${size}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently available: ${available}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently acquired: ${borrowed}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pending}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of how many more resources can the pool manage/create: ${spareResourceCapacity}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  init,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  workAttempts: () => exportAttempts,\r\n  droppedWork: () => droppedExports,\r\n  averageTime: () => spentAverage,\r\n  processedWorkCount: () => performedExports\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\n\r\nconst packageVersion = process.env.npm_package_version;\r\nconst serverStartTime = new Date();\r\n\r\n/**\r\n * Adds the /health route which outputs basic stats for the server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/health', (request, response) => {\r\n        response.send({\r\n          status: 'OK',\r\n          bootTime: serverStartTime,\r\n          uptime:\r\n            Math.floor(\r\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n            ) + ' minutes',\r\n          version: packageVersion,\r\n          highchartsVersion: cache.version(),\r\n          averageProcessingTime: pool.averageTime(),\r\n          performedExports: pool.processedWorkCount(),\r\n          failedExports: pool.droppedWork(),\r\n          exportAttempts: pool.workAttempts(),\r\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\r\n          // eslint-disable-next-line import/no-named-as-default-member\r\n          pool: pool.getPoolInfoJSON()\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport { log } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Getter for the general options.\r\n *\r\n * @return {object} - General options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace.\r\n *\r\n * @param {object} userOptions - Additional user options (e.g. from the node\r\n * module usage).\r\n * @param {string[]} args - CLI arguments.\r\n * @return {object} - General options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Displays a prompt for the manual configuration.\r\n *\r\n * @param {string} configFileName - The name of a configuration file.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            log(1, `[config] Error while creating config.json: ${error}`);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps the old options to the new config structure.\r\n *\r\n * @param {object} oldOptions - Options to be mapped.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges the new options to the options object. It omits undefined values.\r\n *\r\n * @param {object} options - Old options.\r\n * @param {object} newOptions - New options.\r\n * @param {string[]} absoluteProps - Array of object names that should be force\r\n * merged.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n        ? value\r\n        : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes options for the `startExport` method by merging user options\r\n * with the general options.\r\n *\r\n * @param {any} exportOptions - User options for exporting.\r\n * @param {any} generalOptions - General options are used for the export server.\r\n * @return {object} - User options merged with default options.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads the configuration from a custom JSON file.\r\n *\r\n * @param {string[]} args - CLI arguments.\r\n * @return {object} - Options object from the JSON file.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      log(1, `[config] Unable to load config from the ${fileName}: ${error}`);\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Setting correct values of the options from the default config.\r\n *\r\n * @param {object} configObj - The config object based on which the initial\r\n * configuration be made.\r\n * @param {object} customObj - The custom object which can contain additional\r\n * option values to set.\r\n * @param {string} propChain - Required for creating a string chain of\r\n * properties for nested arguments.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    if (!['puppeteer', 'highcharts'].includes(key)) {\r\n      const entry = configObj[key];\r\n      const customValue = customObj && customObj[key];\r\n      let numEnvVal;\r\n\r\n      if (typeof entry.value === 'undefined') {\r\n        updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n      } else {\r\n        // If a value from a custom JSON exists, it take precedence\r\n        if (customValue !== undefined) {\r\n          entry.value = customValue;\r\n        }\r\n\r\n        // If a value from an env variable exists, it take precedence\r\n        if (entry.envLink) {\r\n          // Load the env var\r\n          if (entry.type === 'boolean') {\r\n            entry.value = toBoolean(\r\n              [process.env[entry.envLink], entry.value].find(\r\n                (el) => el || el === 'false'\r\n              )\r\n            );\r\n          } else if (entry.type === 'number') {\r\n            numEnvVal = +process.env[entry.envLink];\r\n            entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\r\n          } else if (\r\n            entry.type.indexOf(']') >= 0 &&\r\n            process.env[entry.envLink]\r\n          ) {\r\n            entry.value = process.env[entry.envLink].split(',');\r\n          } else {\r\n            entry.value = process.env[entry.envLink] || entry.value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Inits options recursively.\r\n *\r\n * @param {any} items - Items to update options from.\r\n * @return {object} - Updated options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument with a corresponding value.\r\n *\r\n * @param {object} options - All server options.\r\n * @param {string[]} args - Array of arguments from a user.\r\n * @param {object} defaultConfig - The default config object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  for (let i = 0; i < args.length; i++) {\r\n    let option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            obj[prop] = args[i] || obj[prop];\r\n          } else {\r\n            console.log(`Missing argument value for ${option}!`.red, '\\n');\r\n            options = printUsage(defaultConfig);\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively sets a property in a correct indentation level based on the\r\n * array of nested properties names.\r\n *\r\n * @param {object} objectToUpdate - Object where a property must be set on a\r\n * correct level.\r\n * @param  {string[]}nestedNames - Array of nasted names that indicates\r\n * indentation level.\r\n * @param {any} value - A value to assign to the property.\r\n * @return {object} - Updated options object.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFile, readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { log } from './logger.js';\r\nimport { killPool, postWork } from './pool.js';\r\nimport {\r\n  clearText,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\nimport { initExportSettings, getOptions } from './config.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    return exportAsString(options.payload.svg.trim(), options, endCallback);\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    log(4, '[chart] Attempting to export from an input file.');\r\n\r\n    // Try to read the file\r\n    return readFile(exportOptions.infile, 'utf8', (error, infile) => {\r\n      if (error) {\r\n        return log(1, `[chart] Error loading input file: ${error}.`);\r\n      }\r\n\r\n      // Get the string representation\r\n      options.export.instr = infile;\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    });\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n    // Perform a direct inject when forced\r\n    if (toBoolean(options.customCode?.allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    }\r\n\r\n    // Either try to parse to JSON first or do the direct export\r\n    return typeof exportOptions.instr === 'string'\r\n      ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n      : doExport(\r\n          options,\r\n          exportOptions.instr || exportOptions.options,\r\n          endCallback\r\n        );\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  log(\r\n    1,\r\n    clearText(\r\n      `[chart] No input specified.\r\n      ${JSON.stringify(exportOptions, undefined, '  ')}.`\r\n    )\r\n  );\r\n\r\n  return (\r\n    endCallback &&\r\n    endCallback(false, {\r\n      error: true,\r\n      message: 'No input specified.'\r\n    })\r\n  );\r\n};\r\n\r\nexport const batchExport = (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        new Promise((resolve, reject) => {\r\n          startExport(\r\n            {\r\n              ...options,\r\n              export: {\r\n                ...options.export,\r\n                infile: pair[0],\r\n                outfile: pair[1]\r\n              }\r\n            },\r\n            (info, error) => {\r\n              // Throw an error\r\n              if (error) {\r\n                return reject(error);\r\n              }\r\n\r\n              // Save the base64 from a buffer to a correct image file\r\n              writeFileSync(\r\n                info.options.export.outfile,\r\n                Buffer.from(info.data, 'base64')\r\n              );\r\n\r\n              resolve();\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  // Kill the pool after all exports are done\r\n  Promise.all(batchFunctions)\r\n    .then(() => {\r\n      killPool();\r\n    })\r\n    .catch((error) => {\r\n      log(1, `[chart] Error encountered during batch export: ${error}`);\r\n      killPool();\r\n    });\r\n};\r\n\r\nexport const singleExport = (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  startExport(options, (info, error) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      log(1, `[cli] ${error.message}`);\r\n      process.exit(1);\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.data, 'base64') : info.data\r\n    );\r\n\r\n    // Kill the pool\r\n    killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Function for choosing chart size and scale based on options prioritization.\r\n *\r\n * @param {object} options - All options object.\r\n * @return {object} - An object with updated size and scale for a chart.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  return {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n};\r\n\r\n/**\r\n * Function for final options preparation before export.\r\n *\r\n * @param {object} options - All options object.\r\n * @param {object} chartJson - Chart JSON.\r\n * @param {function} endCallback - The end callback.\r\n * @param {string} svg - The SVG representation.\r\n */\r\nconst doExport = (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customCode: customCodeOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customCodeOptions.allowCodeExecution === 'boolean'\r\n      ? customCodeOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customCodeOptions) {\r\n    customCodeOptions = options.customCode = {};\r\n  } else if (typeof options.customCode.resources === 'string') {\r\n    // Process resources\r\n    options.customCode.resources = handleResources(\r\n      options.customCode.resources,\r\n      toBoolean(options.customCode.allowFileResources)\r\n    );\r\n  } else if (!options.customCode.resources) {\r\n    try {\r\n      const resources = readFileSync('resources.json', 'utf8');\r\n      options.customCode.resources = handleResources(\r\n        resources,\r\n        toBoolean(options.customCode.allowFileResources)\r\n      );\r\n    } catch (err) {\r\n      log(3, `[chart] The default resources.json file not found.`);\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customCodeOptions) {\r\n    if (\r\n      customCodeOptions.callback ||\r\n      customCodeOptions.resources ||\r\n      customCodeOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return (\r\n        endCallback &&\r\n        endCallback(false, {\r\n          error: true,\r\n          message: clearText(\r\n            `The callback, resources and customCode have been disabled for this\r\n            server.`\r\n          )\r\n        })\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customCodeOptions.callback = false;\r\n    customCodeOptions.resources = false;\r\n    customCodeOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      log(1, `[chart] The ${optionsName} not found.`);\r\n    }\r\n  });\r\n\r\n  // Prepare customCode\r\n  if (customCodeOptions.allowCodeExecution) {\r\n    customCodeOptions.customCode = wrapAround(\r\n      customCodeOptions.customCode,\r\n      customCodeOptions.allowFileResources\r\n    );\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customCodeOptions &&\r\n    customCodeOptions.callback &&\r\n    customCodeOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customCodeOptions.allowFileResources) {\r\n      try {\r\n        customCodeOptions.callback = readFileSync(\r\n          customCodeOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(2, `[chart] Error loading callback: ${error}.`);\r\n        customCodeOptions.callback = false;\r\n      }\r\n    } else {\r\n      customCodeOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  postWork(exportOptions.strInj || chartJson || svg, options)\r\n    .then((result) => endCallback(result))\r\n    .catch((error) => {\r\n      log(0, '[chart] When posting work:', error);\r\n      return endCallback(false, error);\r\n    });\r\n};\r\n\r\n/**\r\n * Function for straight injecting the code.\r\n * Dangerous and must be used deliberately by someone who sets up a server\r\n * (see  --allowCodeExecution).\r\n *\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customCode?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    const message = clearText(\r\n      `Malformed input detected for ${options.export?.requestId || '?'}:\r\n      Please make sure that your JSON/JavaScript options\r\n      are sent using the \"options\" attribute, and that if you're using\r\n      SVG, it is unescaped.`\r\n    );\r\n\r\n    log(1, message);\r\n    return (\r\n      endCallback &&\r\n      endCallback(\r\n        false,\r\n        JSON.stringify({\r\n          error: true,\r\n          message\r\n        })\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Prepares an input before exporting.\r\n *\r\n * @param {string} stringToExport - String representation of SVG/export options.\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customCode;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return (\r\n        endCallback &&\r\n        endCallback(false, {\r\n          error: true,\r\n          message: clearText(\r\n            `Only JSON configurations and SVG is allowed for this server. If\r\n            this is your server, JavaScript exporting can be enabled by starting\r\n            the server with the --allowCodeExecution flag.`\r\n          )\r\n        })\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\n/**\r\n * Starts an exporting process\r\n *\r\n * @param {object} settings - Settings for export.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { WebSocket } from 'ws';\r\n\r\nimport websocket from '../websocket.js';\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  clearText,\r\n  fixType,\r\n  isCorrectJSON,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\nconst benchmark = false;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Calls callbacks.\r\n *\r\n * @param {Array} callbacks - An array of callbacks.\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n * @param {object} data - The data to send to callbacks.\r\n * @return {object} - The result from a callback.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles an export.\r\n *\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n */\r\nconst exportHandler = (request, response) => {\r\n  // Start counting time\r\n  const stopCounter = measureTime();\r\n\r\n  // Get the current server's general options\r\n  const defaultOptions = getOptions();\r\n\r\n  // Init default options\r\n  if (benchmark) {\r\n    console.log('Init default options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Get the WebSocket client\r\n  const websocketClient = websocket.getClient();\r\n\r\n  const body = request.body;\r\n  const id = ++requestsCounter;\r\n  const uniqueId = uuid().replace(/-/g, '');\r\n  let type = fixType(body.type);\r\n\r\n  // Fix type\r\n  if (benchmark) {\r\n    console.log('Fix type:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Throw 'Bad Request' if there's no body\r\n  if (!body) {\r\n    return response.status(400).send(\r\n      clearText(\r\n        `Body is required. Sending a body? Make sure your Content-type header\r\n        is correct. Accepted is application/json and multipart/form-data.`\r\n      )\r\n    );\r\n  }\r\n\r\n  // All of the below can be used\r\n  let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n  // Is correct JSON\r\n  if (benchmark) {\r\n    console.log('Is correct JSON:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Throw 'Bad Request' if there's no JSON or SVG to export\r\n  if (!instr && !body.svg) {\r\n    log(\r\n      2,\r\n      clearText(\r\n        `Request ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Check your payload.`\r\n      )\r\n    );\r\n\r\n    return response.status(400).send(\r\n      clearText(\r\n        `No correct chart data found. Please make sure you are using\r\n        application/json or multipart/form-data headers, and that the chart\r\n        data is in the 'infile', 'options' or 'data' attribute if sending\r\n        JSON or in the 'svg' if sending SVG.`\r\n      )\r\n    );\r\n  }\r\n\r\n  let callResponse = false;\r\n\r\n  // Call the before request functions\r\n  callResponse = doCallbacks(beforeRequest, request, response, {\r\n    id,\r\n    uniqueId,\r\n    type,\r\n    body\r\n  });\r\n\r\n  // Do callbacks\r\n  if (benchmark) {\r\n    console.log('Do callbacks:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Block the request if one of a callbacks failed\r\n  if (callResponse !== true) {\r\n    return response.send(callResponse);\r\n  }\r\n\r\n  let connectionAborted = false;\r\n\r\n  // In case the connection is closed, force to abort further actions\r\n  request.socket.on('close', () => {\r\n    connectionAborted = true;\r\n  });\r\n\r\n  log(4, `[export] Got an incoming HTTP request ${uniqueId}.`);\r\n\r\n  body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n  // Gather and organize options from the payload\r\n  const requestOptions = {\r\n    export: {\r\n      instr,\r\n      type,\r\n      constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n      height: body.height,\r\n      width: body.width,\r\n      scale: body.scale || defaultOptions.export.scale,\r\n      globalOptions: isCorrectJSON(body.globalOptions, true),\r\n      themeOptions: isCorrectJSON(body.themeOptions, true)\r\n    },\r\n    customCode: {\r\n      allowCodeExecution: getAllowCodeExecution(),\r\n      allowFileResources: false,\r\n      resources: isCorrectJSON(body.resources, true),\r\n      callback: body.callback,\r\n      customCode: body.customCode\r\n    }\r\n  };\r\n\r\n  // Organize options\r\n  if (benchmark) {\r\n    console.log('Organize options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  if (instr) {\r\n    // Stringify JSON with options\r\n    requestOptions.export.instr = optionsStringify(\r\n      instr,\r\n      requestOptions.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Stringify JSON with options\r\n    if (benchmark) {\r\n      console.log('Stringify JSON with options:', stopCounter(), 'ms.');\r\n    }\r\n  }\r\n\r\n  // Merge the request options into default ones\r\n  const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n  // Merge config options\r\n  if (benchmark) {\r\n    console.log('Merge config options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Save the JSON if exists\r\n  options.export.options = instr;\r\n\r\n  // Lastly, add the server specific arguments into options as payload\r\n  options.payload = {\r\n    svg: body.svg || false,\r\n    b64: body.b64 || false,\r\n    dataOptions: isCorrectJSON(body.dataOptions, true),\r\n    noDownload: body.noDownload || false,\r\n    requestId: uniqueId\r\n  };\r\n\r\n  // Setting payload\r\n  if (benchmark) {\r\n    console.log('Setting payload:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Test xlink:href elements from payload's SVG\r\n  if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n    return response\r\n      .status(400)\r\n      .send(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element.'\r\n      );\r\n  }\r\n\r\n  // Check URL range\r\n  if (benchmark) {\r\n    console.log('Check URL range:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // If the client is found, send data through WebSocket\r\n  if (websocketClient && websocketClient.readyState === WebSocket.OPEN) {\r\n    // Already prepared options but before the export process\r\n    websocketClient.send(JSON.stringify(options));\r\n  }\r\n\r\n  // Start the export process\r\n  startExport(options, (info, error) => {\r\n    // Remove the close event from the socket\r\n    request.socket.removeAllListeners('close');\r\n\r\n    // After Puppeteer exporting\r\n    if (benchmark) {\r\n      console.log('After Puppeteer exporting:', stopCounter(), 'ms.', '\\n');\r\n    }\r\n\r\n    // If the connection was closed, do nothing\r\n    if (connectionAborted) {\r\n      return log(\r\n        3,\r\n        clearText(\r\n          `[export] The client closed the connection before the chart was done\r\n          processing.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // If error, return it\r\n    if (error) {\r\n      log(\r\n        1,\r\n        clearText(\r\n          `[export] Work: ${uniqueId} could not be completed, sending:\r\n          ${error}`\r\n        )\r\n      );\r\n      return response.status(400).send(error.message);\r\n    }\r\n\r\n    // If data is missing, return the error\r\n    if (!info || !info.data) {\r\n      log(\r\n        1,\r\n        clearText(\r\n          `[export] Unexpected return from chart generation, please check your\r\n          data Request: ${uniqueId} is ${info.data}.`\r\n        )\r\n      );\r\n      return response\r\n        .status(400)\r\n        .send(\r\n          'Unexpected return from chart generation, please check your data.'\r\n        );\r\n    }\r\n\r\n    // Get the type from options\r\n    type = info.options.export.type;\r\n\r\n    // The after request callbacks\r\n    doCallbacks(afterRequest, request, response, { id, body: info.data });\r\n\r\n    if (info.data) {\r\n      // If only base64 is required, return it\r\n      if (body.b64) {\r\n        // Check if it is already base64 or a raw SVG\r\n        if (type === 'pdf') {\r\n          return response.send(\r\n            Buffer.from(info.data, 'utf8').toString('base64')\r\n          );\r\n        }\r\n        return response.send(info.data);\r\n      }\r\n\r\n      // Set correct content type\r\n      response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n      // Decide whether to download or not chart file\r\n      if (!body.noDownload) {\r\n        response.attachment(\r\n          `${request.params.filename || 'chart'}.${type || 'png'}`\r\n        );\r\n      }\r\n\r\n      // If SVG, return plain content\r\n      return type === 'svg'\r\n        ? response.send(info.data)\r\n        : response.send(Buffer.from(info.data, 'base64'));\r\n    }\r\n  });\r\n};\r\n\r\nexport default (app) => {\r\n  app.post('/', exportHandler);\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport jwt from 'jsonwebtoken';\r\nimport multer from 'multer';\r\n\r\nimport rateLimit from './rate_limit.js';\r\nimport websocket from './websocket.js';\r\nimport { envConfig } from '../envConfig.js';\r\nimport { log } from '../logger.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport healthRoute from './routes/health.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport vswitchRoute from './routes/change_hc_version.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldsSize: '50MB'\r\n  }\r\n});\r\n\r\napp.use(upload.any());\r\n\r\n// Enable body parser\r\napp.use(bodyParser.json({ limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }));\r\n\r\n/**\r\n * Error handler function.\r\n *\r\n * @param {object} error - An error object.\r\n * @return {string} - An error message.\r\n */\r\nconst errorHandler = (error) => log(1, `[server] Socket error: ${error}`);\r\n\r\n/**\r\n * Attaches error handlers for a server.\r\n *\r\n * @param {object} server - The http/https server.\r\n */\r\nconst attachErrorHandlers = (server) => {\r\n  server.on('clientError', errorHandler);\r\n  server.on('error', errorHandler);\r\n  server.on('connection', (socket) =>\r\n    socket.on('error', (error) => errorHandler(error, socket))\r\n  );\r\n};\r\n\r\nexport const startServer = async (serverConfig) => {\r\n  // Stop if not enabled\r\n  if (!serverConfig.enable) {\r\n    return false;\r\n  }\r\n\r\n  // Listen HTTP server, if TLS is not forced\r\n  if (!serverConfig.ssl.force) {\r\n    // Main server instance (HTTP)\r\n    const httpServer = http.createServer(app);\r\n    // Attach error handlers and listen to the server\r\n    attachErrorHandlers(httpServer);\r\n    // Listen\r\n    httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n    log(\r\n      3,\r\n      `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n    );\r\n  }\r\n\r\n  // Listen HTTPS server\r\n  if (serverConfig.ssl.enable) {\r\n    // Set up an SSL server also\r\n    let key, cert;\r\n\r\n    try {\r\n      // Get the SSL key\r\n      key = await fsPromises.readFile(\r\n        posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n        'utf8'\r\n      );\r\n\r\n      // Get the SSL certificate\r\n      cert = await fsPromises.readFile(\r\n        posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n        'utf8'\r\n      );\r\n    } catch (error) {\r\n      log(\r\n        1,\r\n        `[server] Unable to load key/certificate from ${serverConfig.ssl.certPath}.`\r\n      );\r\n    }\r\n\r\n    if (key && cert) {\r\n      // Main server instance (HTTPS)\r\n      const httpsServer = https.createServer({ key, cert }, app);\r\n      // Attach error handlers and listen to the server\r\n      attachErrorHandlers(httpsServer);\r\n      // Listen\r\n      httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Enable the rate limiter if config says so\r\n  if (\r\n    serverConfig.rateLimiting &&\r\n    serverConfig.rateLimiting.enable &&\r\n    ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n  ) {\r\n    rateLimit(app, serverConfig.rateLimiting);\r\n  }\r\n\r\n  // Set up static folder's route\r\n  app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n  // Set up routes\r\n  healthRoute(app);\r\n  exportRoutes(app);\r\n  uiRoute(app);\r\n  vswitchRoute(app);\r\n\r\n  // Set the WebSocket connection if enabled\r\n  if (envConfig.WS_ENABLE == true) {\r\n    websocket.connect(envConfig.WS_URL, {\r\n      rejectUnauthorized: envConfig.WS_REJECT_UNAUTHORIZED,\r\n      headers: {\r\n        // Set an access token that lasts only 5 minutes\r\n        auth: jwt.sign({ success: 'success' }, envConfig.WS_SECRET, {\r\n          algorithm: 'HS256',\r\n          expiresIn: '5m'\r\n        })\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Returns the express instance.\r\n */\r\nexport const getExpress = () => {\r\n  return express;\r\n};\r\n\r\n/**\r\n * Returns the app instance.\r\n */\r\nexport const getApp = () => {\r\n  return app;\r\n};\r\n\r\n/**\r\n * Adds a middleware to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a get route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for GET method.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a post route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for POST method.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Forcefully enables rate limiting.\r\n *\r\n * @param {object} limitConfig - The options object for the rate limiter\r\n * configuration.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => {\r\n  return rateLimit(app, limitConfig);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post,\r\n  enableRateLimiting\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n/**\r\n * Adds the / route for a UI when enabled for the export server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\n\r\n/**\r\n * Adds a route that can be used to change the HC version on the server\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post('/change_hc_version/:newVersion', async (request, response) => {\r\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n        if (!ctoken || !ctoken.length) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set'\r\n          });\r\n        }\r\n\r\n        const token = request.get('hc-auth');\r\n\r\n        if (!token || token !== ctoken) {\r\n          return response.send({\r\n            error: true,\r\n            message: 'Invalid or missing token: set token in the hc-auth header'\r\n          });\r\n        }\r\n\r\n        const newVersion = request.params.newVersion;\r\n\r\n        if (newVersion) {\r\n          try {\r\n            // eslint-disable-next-line import/no-named-as-default-member\r\n            await cache.updateVersion(newVersion);\r\n          } catch (e) {\r\n            response.send({\r\n              error: true,\r\n              message: e\r\n            });\r\n          }\r\n\r\n          response.send({\r\n            version: cache.version()\r\n          });\r\n        } else {\r\n          response.send({\r\n            error: true,\r\n            message: 'No new version supplied'\r\n          });\r\n        }\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Add the main directory in the global object\r\nimport 'colors';\r\n\r\nimport server, { startServer } from './server/server.js';\r\nimport {\r\n  setAllowCodeExecution,\r\n  batchExport,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, setOptions } from './config.js';\r\nimport { log, setLogLevel, enableFileLogging } from './logger.js';\r\nimport { killPool, init } from './pool.js';\r\nimport { checkCache } from './cache.js';\r\n\r\nexport default {\r\n  log,\r\n  mapToNewConfig,\r\n  setOptions,\r\n  singleExport,\r\n  startExport,\r\n  batchExport,\r\n  server,\r\n  startServer,\r\n  killPool,\r\n  initPool: async (options = {}) => {\r\n    // Set the allowCodeExecution per export module scope\r\n    setAllowCodeExecution(\r\n      options.customCode && options.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Set the log level\r\n    setLogLevel(options.logging && parseInt(options.logging.level));\r\n\r\n    // Set the log file path and name\r\n    if (options.logging && options.logging.dest) {\r\n      enableFileLogging(\r\n        options.logging.dest,\r\n        options.logging.file || 'highcharts-export-server.log'\r\n      );\r\n    }\r\n\r\n    // Check if cache needs to be updated\r\n    await checkCache(options.highcharts || { version: 'latest' });\r\n\r\n    // Init the pool\r\n    await init({\r\n      pool: options.pool || {\r\n        initialWorkers: 1,\r\n        maxWorkers: 1\r\n      },\r\n      puppeteerArgs: options.puppeteer?.args || []\r\n    });\r\n\r\n    // Return updated options\r\n    return options;\r\n  }\r\n};\r\n"],"names":["dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","forceFetch","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","initialWorkers","maxWorkers","workLimit","queueSize","timeoutThreshold","acquireTimeout","reaper","benchmarking","listenToProcessExits","logging","level","file","dest","ui","route","other","noLogo","payload","join","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","log","newLevel","texts","length","prefix","Date","toString","split","trim","fn","existsSync","mkdirSync","appendFile","concat","error","console","apply","undefined","__dirname","fileURLToPath","URL","url","clearText","text","rule","replacer","replaceAll","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","endsWith","isCorrectJSON","readFileSync","notice","files","propName","map","item","data","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","name","startsWith","printUsage","bold","yellow","cycleCategories","categories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","rateLimit","app","limitConfig","msg","rateOptions","max","limiter","windowMs","delayMs","handler","request","response","format","json","status","send","message","default","skip","query","access_token","use","envToBoolean","z","enum","transform","v","envConfig","object","WS_ENABLE","WS_RECONNECT","WS_REJECT_UNAUTHORIZED","WS_PING_TIMEOUT","coerce","number","WS_RECONNECT_INTERVAL","WS_URL","string","WS_SECRET","process","env","webSocket","reconnectInterval","connect","webSocketUrl","WebSocket","on","clearInterval","code","clearTimeout","_pingTimeout","setTimeout","terminate","setInterval","reconnect","websocket","getClient","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","res","chunk","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","indexOf","fetchScript","script","proxyAgent","agent","timeout","statusCode","updateCache","sourcePath","customScripts","allScripts","c","m","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","newPage","p","setContent","addScriptTag","evaluate","setupHighcharts","err","$eval","element","errorMessage","_displayErrors","innerHTML","close","connected","__basedir","setAsConfig","page","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportBench","exportOptions","requestAnimationFrame","displayErrors","debugger","d","svgBench","isSVG","setPageBench","svgTemplate","strInj","setContentBench","resBench","js","push","content","isLocal","cssBench","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","vpBench","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","body","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","round","expBenchmark","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","Error","createImage","pdf","createPDF","oldCharts","oldChart","destroy","shift","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","s","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","logLevel","init","allArgs","tryCount","open","launch","headless","userDataDir","e","createBrowser","killPool","exit","Pool","min","createRetryIntervalMillis","createTimeoutMillis","acquireTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","propagateCreateError","eventId","resource","initialResources","acquire","promise","release","destroyed","postWork","fail","getPoolInfo","workStart","result","exportTime","available","borrowed","pending","spareResourceCapacity","pool$1","packageVersion","npm_package_version","serverStartTime","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","numEnvVal","el","initOptions","items","startExport","settings","endCallback","svg","initExportSettings","exportAsString","readFile","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","chartJson","customCodeOptions","allowCodeExecutionScoped","enabled","optionsName","then","catch","requestId","stringToExport","chartJSON","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","websocketClient","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","dataOptions","noDownload","ipRegEx","readyState","OPEN","info","removeAllListeners","Buffer","from","header","attachment","params","filename","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldsSize","any","bodyParser","limit","urlencoded","extended","errorHandler","attachErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","posix","httpsServer","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vswitchRoute","rejectUnauthorized","auth","jwt","sign","success","algorithm","expiresIn","getExpress","getApp","middlewares","enableRateLimiting","index","mapToNewConfig","oldOptions","propertiesChain","reduce","prop","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","pairArgumentValue","singleExport","batchExport","batchFunctions","pair","initPool","parseInt","logDest","logFile","enableFileLogging"],"mappings":"4sBAiBAA,EAAOC,SAIA,MAAMC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,6CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPK,QAAS,qBACTJ,KAAM,SACNC,YAAa,8BAEfI,OAAQ,CACNN,MAAO,+BACPK,QAAS,iBACTJ,KAAM,SACNC,YAAa,6CAEfK,YAAa,CACXF,QAAS,0BACTL,MAAO,CAAC,aAAc,kBAAmB,iBACzCC,KAAM,WACNC,YAAa,qCAEfM,QAAS,CACPH,QAAS,qBACTL,MAAO,CACL,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,mBACA,eACA,cACA,UACA,UACA,WACA,UACA,cACA,YACA,sBACA,SACA,SACA,WACA,YACA,eACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,cAEFC,KAAM,WACNC,YAAa,gCAEfO,WAAY,CACVJ,QAAS,wBACTL,MAAO,CAAC,kBACRC,KAAM,WACNC,YAAa,mCAEfQ,QAAS,CACPV,MAAO,CACL,wEACA,kGAEFC,KAAM,WACNC,YACE,qEAEJS,WAAY,CACVN,QAAS,yBACTL,OAAO,EACPC,KAAM,UACNC,YACE,oEAGNU,OAAQ,CACNC,OAAQ,CACNb,OAAO,EACPC,KAAM,SACNC,YACE,8FAEJY,MAAO,CACLd,OAAO,EACPC,KAAM,SACNC,YACE,iFAEJa,QAAS,CACPf,OAAO,EACPC,KAAM,SACNC,YAAa,oCAEfc,QAAS,CACPhB,OAAO,EACPC,KAAM,SACNC,YACE,2FAEJD,KAAM,CACJI,QAAS,sBACTL,MAAO,MACPC,KAAM,SACNC,YACE,sEAEJe,OAAQ,CACNZ,QAAS,wBACTL,MAAO,QACPC,KAAM,SACNC,YACE,6EAEJgB,cAAe,CACbb,QAAS,wBACTL,MAAO,IACPC,KAAM,SACNC,YACE,gFAEJiB,aAAc,CAC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"}