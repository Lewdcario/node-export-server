"use strict";require("colors");var e=require("fs"),t=require("path"),r=require("https-proxy-agent"),o=require("prompts"),i=require("dotenv"),n=require("zod"),s=require("url"),a=require("http"),c=require("https"),l=require("tarn"),p=require("uuid"),u=require("puppeteer"),h=require("jsdom"),d=require("dompurify"),m=require("cors"),g=require("express"),f=require("multer"),v=require("express-rate-limit"),y=require("jsonwebtoken"),b=require("ws"),w="undefined"!=typeof document?document.currentScript:null;const E={core:["highcharts","highcharts-more","highcharts-3d"],modules:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap"],indicators:["indicators-all"]},T={puppeteer:{args:{value:["--allow-running-insecure-content","--ash-no-nudges","--autoplay-policy=user-gesture-required","--block-new-web-contents","--disable-accelerated-2d-canvas","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-checker-imaging","--disable-client-side-phishing-detection","--disable-component-extensions-with-background-pages","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-logging","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-search-engine-choice-screen","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-site-isolation-trials","--disable-speech-api","--disable-sync","--enable-unsafe-webgpu","--hide-crash-restore-bubble","--hide-scrollbars","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-startup-window","--no-zygote","--password-store=basic","--process-per-tab","--use-mock-keychain"],type:"string[]",description:"Arguments array to send to Puppeteer."}},highcharts:{version:{value:"latest",type:"string",envLink:"HIGHCHARTS_VERSION",description:"The Highcharts version to be used."},cdnURL:{value:"https://code.highcharts.com/",type:"string",envLink:"HIGHCHARTS_CDN_URL",description:"The CDN URL for Highcharts scripts to be used."},coreScripts:{value:E.core,type:"string[]",envLink:"HIGHCHARTS_CORE_SCRIPTS",description:"The core Highcharts scripts to fetch."},moduleScripts:{value:E.modules,type:"string[]",envLink:"HIGHCHARTS_MODULE_SCRIPTS",description:"The modules of Highcharts to fetch."},indicatorScripts:{value:E.indicators,type:"string[]",envLink:"HIGHCHARTS_INDICATOR_SCRIPTS",description:"The indicators of Highcharts to fetch."},customScripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional custom scripts or dependencies to fetch."},forceFetch:{value:!1,type:"boolean",envLink:"HIGHCHARTS_FORCE_FETCH",description:"The flag to determine whether to refetch all scripts after each server rerun."},cachePath:{value:".cache",type:"string",envLink:"HIGHCHARTS_CACHE_PATH",description:"The path to the cache directory. It is used to store the Highcharts scripts and custom scripts."}},export:{infile:{value:!1,type:"string",description:"The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file."},instr:{value:!1,type:"string",description:"Input, provided in the form of a stringified JSON or SVG file, will override the --infile option."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag."},type:{value:"png",type:"string",envLink:"EXPORT_TYPE",description:"The file export format. It can be jpeg, png, pdf, or svg."},constr:{value:"chart",type:"string",envLink:"EXPORT_CONSTR",description:"The constructor to use. Can be chart, stockChart, mapChart, or ganttChart."},defaultHeight:{value:400,type:"number",envLink:"EXPORT_DEFAULT_HEIGHT",description:"the default height of the exported chart. Used when no value is set."},defaultWidth:{value:600,type:"number",envLink:"EXPORT_DEFAULT_WIDTH",description:"The default width of the exported chart. Used when no value is set."},defaultScale:{value:1,type:"number",envLink:"EXPORT_DEFAULT_SCALE",description:"The default scale of the exported chart. Used when no value is set."},height:{value:!1,type:"number",description:"The height of the exported chart, overriding the option in the chart settings."},width:{value:!1,type:"number",description:"The width of the exported chart, overriding the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0."},globalOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Initiates a batch job with a string containing input/output pairs: "in=out;in=out;...".'},rasterizationTimeout:{value:1500,type:"number",envLink:"EXPORT_RASTERIZATION_TIMEOUT",description:"The duration in milliseconds to wait for rendering a webpage."}},customLogic:{allowCodeExecution:{value:!1,type:"boolean",envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",description:"Controls whether the execution of arbitrary code is allowed during the exporting process."},allowFileResources:{value:!1,type:"boolean",envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",description:"Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server."},customCode:{value:!1,type:"string",description:"Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension."},callback:{value:!1,type:"string",description:"JavaScript code to run during construction. It can be a function or a filename with the .js extension."},resources:{value:!1,type:"string",description:"Additional resource in the form of a stringified JSON, which may contain files, js, and css sections."},loadConfig:{value:!1,type:"string",legacyName:"fromFile",description:"A file containing a pre-defined configuration to use."},createConfig:{value:!1,type:"string",description:"Enables setting options through a prompt and saving them in a provided config file."}},server:{enable:{value:!1,type:"boolean",envLink:"SERVER_ENABLE",cliName:"enableServer",description:"When set to true, the server starts on the local IP address 0.0.0.0."},host:{value:"0.0.0.0",type:"string",envLink:"SERVER_HOST",description:"The hostname of the server. Additionally, it starts a server on the provided hostname."},port:{value:7801,type:"number",envLink:"SERVER_PORT",description:"The server port when enabled."},benchmarking:{value:!1,type:"boolean",envLink:"SERVER_BENCHMARKING",cliName:"serverBenchmarking",description:"Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request."},proxy:{host:{value:!1,type:"string",envLink:"SERVER_PROXY_HOST",cliName:"proxyHost",description:"The host of the proxy server to use, if it exists."},port:{value:8080,type:"number",envLink:"SERVER_PROXY_PORT",cliName:"proxyPort",description:"The port of the proxy server to use, if it exists."},timeout:{value:5e3,type:"number",envLink:"SERVER_PROXY_TIMEOUT",cliName:"proxyTimeout",description:"The timeout for the proxy server to use, if it exists."}},rateLimiting:{enable:{value:!1,type:"boolean",envLink:"SERVER_RATE_LIMITING_ENABLE",cliName:"enableRateLimiting",description:"Enables rate limiting for the server."},maxRequests:{value:10,type:"number",envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",legacyName:"rateLimit",description:"The maximum number of requests allowed in one minute."},window:{value:1,type:"number",envLink:"SERVER_RATE_LIMITING_WINDOW",description:"The time window, in minutes, for the rate limiting."},delay:{value:0,type:"number",envLink:"SERVER_RATE_LIMITING_DELAY",description:"The delay duration for each successive request before reaching the maximum limit."},trustProxy:{value:!1,type:"boolean",envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",description:"Set this to true if the server is behind a load balancer."},skipKey:{value:!1,type:"string",envLink:"SERVER_RATE_LIMITING_SKIP_KEY",description:"Allows bypassing the rate limiter and should be provided with the skipToken argument."},skipToken:{value:!1,type:"string",envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",description:"Allows bypassing the rate limiter and should be provided with the skipKey argument."}},ssl:{enable:{value:!1,type:"boolean",envLink:"SERVER_SSL_ENABLE",cliName:"enableSsl",description:"Enables or disables the SSL protocol."},force:{value:!1,type:"boolean",envLink:"SERVER_SSL_FORCE",cliName:"sslForce",legacyName:"sslOnly",description:"When set to true, the server is forced to serve only over HTTPS."},port:{value:443,type:"number",envLink:"SERVER_SSL_PORT",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{value:!1,type:"string",envLink:"SERVER_SSL_CERT_PATH",legacyName:"sslPath",description:"The path to the SSL certificate/key file."}}},pool:{minWorkers:{value:4,type:"number",envLink:"POOL_MIN_WORKERS",description:"The number of minimum and initial pool workers to spawn."},maxWorkers:{value:8,type:"number",envLink:"POOL_MAX_WORKERS",legacyName:"workers",description:"The number of maximum pool workers to spawn."},workLimit:{value:40,type:"number",envLink:"POOL_WORK_LIMIT",description:"The number of work pieces that can be performed before restarting the worker process."},acquireTimeout:{value:5e3,type:"number",envLink:"POOL_ACQUIRE_TIMEOUT",description:"The duration, in milliseconds, to wait for acquiring a resource."},createTimeout:{value:5e3,type:"number",envLink:"POOL_CREATE_TIMEOUT",description:"The duration, in milliseconds, to wait for creating a resource."},destroyTimeout:{value:5e3,type:"number",envLink:"POOL_DESTROY_TIMEOUT",description:"The duration, in milliseconds, to wait for destroying a resource."},idleTimeout:{value:3e4,type:"number",envLink:"POOL_IDLE_TIMEOUT",description:"The duration, in milliseconds, after which an idle resource is destroyed."},createRetryInterval:{value:200,type:"number",envLink:"POOL_CREATE_RETRY_INTERVAL",description:"The duration, in milliseconds, to wait before retrying the create process in case of a failure."},reaperInterval:{value:1e3,type:"number",envLink:"POOL_REAPER_INTERVAL",description:"The duration, in milliseconds, after which the check for idle resources to destroy is triggered."},benchmarking:{value:!1,type:"boolean",envLink:"POOL_BENCHMARKING",cliName:"poolBenchmarking",description:"Indicate whether to show statistics for the pool of resources or not."}},logging:{level:{value:4,type:"number",envLink:"LOGGING_LEVEL",cliName:"logLevel",description:"The logging level to be used."},file:{value:"highcharts-export-server.log",type:"string",envLink:"LOGGING_FILE",cliName:"logFile",description:"The name of a log file. The logDest option also needs to be set to enable file logging."},dest:{value:"log/",type:"string",envLink:"LOGGING_DEST",cliName:"logDest",description:"The path to store log files. This also enables file logging."}},ui:{enable:{value:!1,type:"boolean",envLink:"UI_ENABLE",cliName:"enableUi",description:"Enables or disables the user interface (UI) for the export server."},route:{value:"/",type:"string",envLink:"UI_ROUTE",cliName:"uiRoute",description:"The endpoint route to which the user interface (UI) should be attached."}},other:{nodeEnv:{value:"production",type:"string",envLink:"OTHER_NODE_ENV",description:"The type of Node.js environment."},listenToProcessExits:{value:!0,type:"boolean",envLink:"OTHER_LISTEN_TO_PROCESS_EXITS",description:"Decides whether or not to attach process.exit handlers."},noLogo:{value:!1,type:"boolean",envLink:"OTHER_NO_LOGO",description:"Skip printing the logo on a startup. Will be replaced by a simple text."},hardResetPage:{value:!1,type:"boolean",envLink:"OTHER_HARD_RESET_PAGE",description:"Decides if the page content should be reset entirely."},browserShellMode:{value:!0,type:"boolean",envLink:"OTHER_BROWSER_SHELL_MODE",description:"Decides if the browser runs in the shell mode."}},debug:{enable:{value:!1,type:"boolean",envLink:"DEBUG_ENABLE",cliName:"enableDebug",description:"Enables or disables debug mode for the underlying browser."},headless:{value:!0,type:"boolean",envLink:"DEBUG_HEADLESS",description:"Controls the mode in which the browser is launched when in the debug mode."},devtools:{value:!1,type:"boolean",envLink:"DEBUG_DEVTOOLS",description:"Decides whether to enable DevTools when the browser is in a headful state."},listenToConsole:{value:!1,type:"boolean",envLink:"DEBUG_LISTEN_TO_CONSOLE",description:"Decides whether to enable a listener for console messages sent from the browser."},dumpio:{value:!1,type:"boolean",envLink:"DEBUG_DUMPIO",description:"Redirects browser process stdout and stderr to process.stdout and process.stderr."},slowMo:{value:0,type:"number",envLink:"DEBUG_SLOW_MO",description:"Slows down Puppeteer operations by the specified number of milliseconds."},debuggingPort:{value:9222,type:"number",envLink:"DEBUG_DEBUGGING_PORT",description:"Specifies the debugging port."}},webSocket:{enable:{value:!1,type:"boolean",envLink:"WEB_SOCKET_ENABLE",cliName:"enableWs",description:"Enables or disables the WebSocket connection."},reconnect:{value:!1,type:"boolean",envLink:"WEB_SOCKET_RECONNECT",cliName:"wsReconnect",description:"Controls whether or not to try reconnecting to the WebSocket server in case of a disconnect."},rejectUnauthorized:{value:!1,type:"boolean",envLink:"WEB_SOCKET_REJECT_UNAUTHORIZED",cliName:"wsrejectUnauthorized",description:"Determines whether the client verifies the server's SSL/TLS certificate during the handshake process."},pingTimeout:{value:16e3,type:"number",envLink:"WEB_SOCKET_PING_TIMEOUT",cliName:"wsPingTimeout",description:"The timeout, in milliseconds, for the heartbeat mechanism between the client and server."},reconnectInterval:{value:3e3,type:"number",envLink:"WEB_SOCKET_RECONNECT_INTERVAL",cliName:"wsReconnectInterval",description:"The interval, in milliseconds, for the reconnect attempt."},reconnectAttempts:{value:3,type:"number",envLink:"WEB_SOCKET_RECONNECT_ATTEMPTS",cliName:"wsReconnectAttempts",description:"The number of reconnect attempts before returning a connection error."},messageInterval:{value:3,type:"number",envLink:"WEB_SOCKET_MESSAGE_INTERVAL",cliName:"wsMessageInterval",description:"The interval, in milliseconds, for auto sending the data through a WebSocket connection."},url:{value:!1,type:"string",envLink:"WEB_SOCKET_URL",cliName:"wsUrl",description:"The URL of the WebSocket server."},secret:{value:!1,type:"string",envLink:"WEB_SOCKET_SECRET",cliName:"wsSecret",description:"The secret used to create a JSON Web Token sent to the WebSocket server."}}},S={puppeteer:[{type:"list",name:"args",message:"Puppeteer arguments",initial:T.puppeteer.args.value.join(","),separator:","}],highcharts:[{type:"text",name:"version",message:"Highcharts version",initial:T.highcharts.version.value},{type:"text",name:"cdnURL",message:"The URL of CDN",initial:T.highcharts.cdnURL.value},{type:"multiselect",name:"coreScripts",message:"Available core scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:T.highcharts.coreScripts.value},{type:"multiselect",name:"moduleScripts",message:"Available module scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:T.highcharts.moduleScripts.value},{type:"multiselect",name:"indicatorScripts",message:"Available indicator scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:T.highcharts.indicatorScripts.value},{type:"list",name:"customScripts",message:"Custom scripts",initial:T.highcharts.customScripts.value.join(","),separator:","},{type:"toggle",name:"forceFetch",message:"Force re-fetch the scripts",initial:T.highcharts.forceFetch.value},{type:"text",name:"cachePath",message:"The path to the cache directory",initial:T.highcharts.cachePath.value}],export:[{type:"select",name:"type",message:"The default export file type",hint:`Default: ${T.export.type.value}`,initial:0,choices:["png","jpeg","pdf","svg"]},{type:"select",name:"constr",message:"The default constructor for Highcharts",hint:`Default: ${T.export.constr.value}`,initial:0,choices:["chart","stockChart","mapChart","ganttChart"]},{type:"number",name:"defaultHeight",message:"The default fallback height of the exported chart",initial:T.export.defaultHeight.value},{type:"number",name:"defaultWidth",message:"The default fallback width of the exported chart",initial:T.export.defaultWidth.value},{type:"number",name:"defaultScale",message:"The default fallback scale of the exported chart",initial:T.export.defaultScale.value,min:.1,max:5},{type:"number",name:"rasterizationTimeout",message:"The rendering webpage timeout in milliseconds",initial:T.export.rasterizationTimeout.value}],customLogic:[{type:"toggle",name:"allowCodeExecution",message:"Enable execution of custom code",initial:T.customLogic.allowCodeExecution.value},{type:"toggle",name:"allowFileResources",message:"Enable file resources",initial:T.customLogic.allowFileResources.value}],server:[{type:"toggle",name:"enable",message:"Starts the server on 0.0.0.0",initial:T.server.enable.value},{type:"text",name:"host",message:"Server hostname",initial:T.server.host.value},{type:"number",name:"port",message:"Server port",initial:T.server.port.value},{type:"toggle",name:"benchmarking",message:"Enable server benchmarking",initial:T.server.benchmarking.value},{type:"text",name:"proxy.host",message:"The host of the proxy server to use",initial:T.server.proxy.host.value},{type:"number",name:"proxy.port",message:"The port of the proxy server to use",initial:T.server.proxy.port.value},{type:"number",name:"proxy.timeout",message:"The timeout for the proxy server to use",initial:T.server.proxy.timeout.value},{type:"toggle",name:"rateLimiting.enable",message:"Enable rate limiting",initial:T.server.rateLimiting.enable.value},{type:"number",name:"rateLimiting.maxRequests",message:"The maximum requests allowed per minute",initial:T.server.rateLimiting.maxRequests.value},{type:"number",name:"rateLimiting.window",message:"The rate-limiting time window in minutes",initial:T.server.rateLimiting.window.value},{type:"number",name:"rateLimiting.delay",message:"The delay for each successive request before reaching the maximum",initial:T.server.rateLimiting.delay.value},{type:"toggle",name:"rateLimiting.trustProxy",message:"Set to true if behind a load balancer",initial:T.server.rateLimiting.trustProxy.value},{type:"text",name:"rateLimiting.skipKey",message:"Allows bypassing the rate limiter when provided with the skipToken argument",initial:T.server.rateLimiting.skipKey.value},{type:"text",name:"rateLimiting.skipToken",message:"Allows bypassing the rate limiter when provided with the skipKey argument",initial:T.server.rateLimiting.skipToken.value},{type:"toggle",name:"ssl.enable",message:"Enable SSL protocol",initial:T.server.ssl.enable.value},{type:"toggle",name:"ssl.force",message:"Force serving only over HTTPS",initial:T.server.ssl.force.value},{type:"number",name:"ssl.port",message:"SSL server port",initial:T.server.ssl.port.value},{type:"text",name:"ssl.certPath",message:"The path to find the SSL certificate/key",initial:T.server.ssl.certPath.value}],pool:[{type:"number",name:"minWorkers",message:"The initial number of workers to spawn",initial:T.pool.minWorkers.value},{type:"number",name:"maxWorkers",message:"The maximum number of workers to spawn",initial:T.pool.maxWorkers.value},{type:"number",name:"workLimit",message:"The pieces of work that can be performed before restarting a Puppeteer process",initial:T.pool.workLimit.value},{type:"number",name:"acquireTimeout",message:"The number of milliseconds to wait for acquiring a resource",initial:T.pool.acquireTimeout.value},{type:"number",name:"createTimeout",message:"The number of milliseconds to wait for creating a resource",initial:T.pool.createTimeout.value},{type:"number",name:"destroyTimeout",message:"The number of milliseconds to wait for destroying a resource",initial:T.pool.destroyTimeout.value},{type:"number",name:"idleTimeout",message:"The number of milliseconds after an idle resource is destroyed",initial:T.pool.idleTimeout.value},{type:"number",name:"createRetryInterval",message:"The retry interval in milliseconds after a create process fails",initial:T.pool.createRetryInterval.value},{type:"number",name:"reaperInterval",message:"The reaper interval in milliseconds after triggering the check for idle resources to destroy",initial:T.pool.reaperInterval.value},{type:"toggle",name:"benchmarking",message:"Enable benchmarking for a resource pool",initial:T.pool.benchmarking.value}],logging:[{type:"number",name:"level",message:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)",initial:T.logging.level.value,round:0,min:0,max:5},{type:"text",name:"file",message:"A log file name. Set with the --logDest to enable file logging",initial:T.logging.file.value},{type:"text",name:"dest",message:"The path to log files. Enables file logging",initial:T.logging.dest.value}],ui:[{type:"toggle",name:"enable",message:"Enable UI for the export server",initial:T.ui.enable.value},{type:"text",name:"route",message:"A route to attach the UI",initial:T.ui.route.value}],other:[{type:"text",name:"nodeEnv",message:"The type of Node.js environment",initial:T.other.nodeEnv.value},{type:"toggle",name:"listenToProcessExits",message:"Set to false to skip attaching process.exit handlers",initial:T.other.listenToProcessExits.value},{type:"toggle",name:"noLogo",message:"Skip printing the logo on startup. Replaced by simple text",initial:T.other.noLogo.value},{type:"toggle",name:"hardResetPage",message:"Decides if the page content should be reset entirely",initial:T.other.hardResetPage.value},{type:"toggle",name:"browserShellMode",message:"Decides if the browser runs in the shell mode",initial:T.other.browserShellMode.value}],debug:[{type:"toggle",name:"enable",message:"Enables debug mode for the browser instance",initial:T.debug.enable.value},{type:"toggle",name:"headless",message:"The mode setting for the browser",initial:T.debug.headless.value},{type:"toggle",name:"devtools",message:"The DevTools for the headful browser",initial:T.debug.devtools.value},{type:"toggle",name:"listenToConsole",message:"The event listener for console messages from the browser",initial:T.debug.listenToConsole.value},{type:"toggle",name:"dumpio",message:"Redirects the browser stdout and stderr to NodeJS process",initial:T.debug.dumpio.value},{type:"number",name:"slowMo",message:"Puppeteer operations slow down in milliseconds",initial:T.debug.slowMo.value},{type:"number",name:"debuggingPort",message:"The port number for debugging",initial:T.debug.debuggingPort.value}],webSocket:[{type:"toggle",name:"enable",message:"Enables WebSocket connection",initial:T.webSocket.enable.value},{type:"toggle",name:"reconnect",message:"The reconnect mechanism for WebSocket connection",initial:T.webSocket.reconnect.value},{type:"toggle",name:"rejectUnauthorized",message:"Reject connection if WebSocket is not secured, SSL/TLS",initial:T.webSocket.rejectUnauthorized.value},{type:"number",name:"pingTimeout",message:"Timeout for the hearbeat mechanism",initial:T.webSocket.pingTimeout.value},{type:"number",name:"reconnectInterval",message:"Interval for the reconnect mechanism",initial:T.webSocket.reconnectInterval.value},{type:"number",name:"reconnectAttempts",message:"The number of reconnect attempts",initial:T.webSocket.reconnectAttempts.value},{type:"number",name:"messageInterval",message:"Interval for auto sending the data",initial:T.webSocket.messageInterval.value},{type:"text",name:"url",message:"The URL of the WebSocket server",initial:T.webSocket.url.value},{type:"text",name:"secret",message:"The secret for the JWT to WebSocket server",initial:T.webSocket.secret.value}]},_=["options","globalOptions","themeOptions","resources","payload"],R={},k=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const o=e[r];void 0===o.value?k(o,`${t}.${r}`):(R[o.cliName||r]=`${t}.${r}`.substring(1),void 0!==o.legacyName&&(R[o.legacyName]=`${t}.${r}`.substring(1)))}}))};k(T),i.config();const x=e=>n.z.string().transform((t=>t.split(",").map((e=>e.trim())).filter((t=>e.includes(t))))).transform((e=>e.length?e:void 0)),O=()=>n.z.enum(["true","false",""]).transform((e=>""!==e?"true"===e:void 0)),L=e=>n.z.enum([...e,""]).transform((e=>""!==e?e:void 0)),I=()=>n.z.string().trim().refine((e=>!["false","undefined","null","NaN"].includes(e)||""===e),(e=>({message:`The string contains forbidden values, received '${e}'`}))).transform((e=>""!==e?e:void 0)),C=()=>n.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>0),(e=>({message:`The value must be numeric and positive, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),N=()=>n.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>=0),(e=>({message:`The value must be numeric and non-negative, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),A=n.z.object({HIGHCHARTS_VERSION:n.z.string().trim().refine((e=>/^(latest|\d+(\.\d+){0,2})$/.test(e)||""===e),(e=>({message:`HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ, received '${e}'`}))).transform((e=>""!==e?e:void 0)),HIGHCHARTS_CDN_URL:n.z.string().trim().refine((e=>e.startsWith("https://")||e.startsWith("http://")||""===e),(e=>({message:`Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://, received '${e}'`}))).transform((e=>""!==e?e:void 0)),HIGHCHARTS_CORE_SCRIPTS:x(E.core),HIGHCHARTS_MODULE_SCRIPTS:x(E.modules),HIGHCHARTS_INDICATOR_SCRIPTS:x(E.indicators),HIGHCHARTS_FORCE_FETCH:O(),HIGHCHARTS_CACHE_PATH:I(),HIGHCHARTS_ADMIN_TOKEN:I(),EXPORT_TYPE:L(["jpeg","png","pdf","svg"]),EXPORT_CONSTR:L(["chart","stockChart","mapChart","ganttChart"]),EXPORT_DEFAULT_HEIGHT:C(),EXPORT_DEFAULT_WIDTH:C(),EXPORT_DEFAULT_SCALE:C(),EXPORT_RASTERIZATION_TIMEOUT:N(),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:O(),CUSTOM_LOGIC_ALLOW_FILE_RESOURCES:O(),SERVER_ENABLE:O(),SERVER_HOST:I(),SERVER_PORT:C(),SERVER_BENCHMARKING:O(),SERVER_PROXY_HOST:I(),SERVER_PROXY_PORT:C(),SERVER_PROXY_TIMEOUT:N(),SERVER_RATE_LIMITING_ENABLE:O(),SERVER_RATE_LIMITING_MAX_REQUESTS:N(),SERVER_RATE_LIMITING_WINDOW:N(),SERVER_RATE_LIMITING_DELAY:N(),SERVER_RATE_LIMITING_TRUST_PROXY:O(),SERVER_RATE_LIMITING_SKIP_KEY:I(),SERVER_RATE_LIMITING_SKIP_TOKEN:I(),SERVER_SSL_ENABLE:O(),SERVER_SSL_FORCE:O(),SERVER_SSL_PORT:C(),SERVER_SSL_CERT_PATH:I(),POOL_MIN_WORKERS:N(),POOL_MAX_WORKERS:N(),POOL_WORK_LIMIT:C(),POOL_ACQUIRE_TIMEOUT:N(),POOL_CREATE_TIMEOUT:N(),POOL_DESTROY_TIMEOUT:N(),POOL_IDLE_TIMEOUT:N(),POOL_CREATE_RETRY_INTERVAL:N(),POOL_REAPER_INTERVAL:N(),POOL_BENCHMARKING:O(),LOGGING_LEVEL:n.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>=0&&parseFloat(e)<=5),(e=>({message:`Invalid value for LOGGING_LEVEL. We only accept values from 0 to 5 as logging levels, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),LOGGING_FILE:I(),LOGGING_DEST:I(),UI_ENABLE:O(),UI_ROUTE:I(),OTHER_NODE_ENV:L(["development","production","test"]),OTHER_LISTEN_TO_PROCESS_EXITS:O(),OTHER_NO_LOGO:O(),OTHER_HARD_RESET_PAGE:O(),OTHER_BROWSER_SHELL_MODE:O(),DEBUG_ENABLE:O(),DEBUG_HEADLESS:O(),DEBUG_DEVTOOLS:O(),DEBUG_LISTEN_TO_CONSOLE:O(),DEBUG_DUMPIO:O(),DEBUG_SLOW_MO:N(),DEBUG_DEBUGGING_PORT:C(),WEB_SOCKET_ENABLE:O(),WEB_SOCKET_RECONNECT:O(),WEB_SOCKET_REJECT_UNAUTHORIZED:O(),WEB_SOCKET_PING_TIMEOUT:N(),WEB_SOCKET_RECONNECT_INTERVAL:N(),WEB_SOCKET_RECONNECT_ATTEMPTS:N(),WEB_SOCKET_MESSAGE_INTERVAL:N(),WEB_SOCKET_URL:I(),WEB_SOCKET_SECRET:I()}).partial().parse(process.env),P=["red","yellow","blue","gray","green"];let $={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:P[0]},{title:"warning",color:P[1]},{title:"notice",color:P[2]},{title:"verbose",color:P[3]},{title:"benchmark",color:P[4]}],listeners:[]};for(const[e,t]of Object.entries(T.logging))$[e]=t.value;const H=(t,r)=>{$.toFile&&($.pathCreated||(!e.existsSync($.dest)&&e.mkdirSync($.dest),$.pathCreated=!0),e.appendFile(`${$.dest}${$.file}`,[r].concat(t).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),$.toFile=!1)})))},U=(...e)=>{const[t,...r]=e,{level:o,levelsDesc:i}=$;if(5!==t&&(0===t||t>o||o>i.length))return;const n=`${(new Date).toString().split("(")[0].trim()} [${i[t-1].title}] -`;$.listeners.forEach((e=>{e(n,r.join(" "))})),$.toConsole&&console.log.apply(void 0,[n.toString()[$.levelsDesc[t-1].color]].concat(r)),H(r,n)},j=(e,t,r)=>{const o=r||t.message,{level:i,levelsDesc:n}=$;if(0===e||e>i||i>n.length)return;const s=`${(new Date).toString().split("(")[0].trim()} [${n[e-1].title}] -`,a=t.message!==t.stackMessage||void 0===t.stackMessage?t.stack:t.stack.split("\n").slice(1).join("\n"),c=[o,"\n",a];$.toConsole&&console.log.apply(void 0,[s.toString()[$.levelsDesc[e-1].color]].concat([o[P[e-1]],"\n",a])),$.listeners.forEach((e=>{e(s,c.join(" "))})),H(c,s)},D=e=>{e>=0&&e<=$.levelsDesc.length&&($.level=e)},W=(e,t)=>{if($={...$,dest:e||$.dest,file:t||$.file,toFile:!0},0===$.dest.length)return U(1,"[logger] File logging initialization: no path supplied.");$.dest.endsWith("/")||($.dest+="/")},G=s.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:w&&w.src||new URL("index.cjs",document.baseURI).href)),F=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const o=t.split(".").pop();"jpg"===o?e="jpeg":r.includes(o)&&e!==o&&(e=o)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},M=(t=!1,r)=>{const o=["js","css","files"];let i=t,n=!1;if(r&&t.endsWith(".json"))try{i=q(e.readFileSync(t,"utf8"))}catch(e){return j(2,e,"[cli] No resources found.")}else i=q(t),i&&!r&&delete i.files;for(const e in i)o.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):U(3,"[cli] No resources found.")};function q(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch{return!1}}const V=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=V(e[r]));return t},B=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function K(){console.log("\nUsage of CLI arguments:".bold,"\n------",`\nFor more detailed information, visit the readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,o]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(o,"value")){let e=`  --${o.cliName||r} ${("<"+o.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,o.description,`[Default: ${o.value.toString().bold}]`.blue)}else e(o)};Object.keys(T).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(T[t]))})),console.log("\n")}const z=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,X=(t,r)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!r&&X(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")},J=()=>{const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6};let Y={};const Z=()=>Y,Q=(e,t,r=[])=>{const o=V(e);for(const[e,n]of Object.entries(t))o[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||r.includes(e)||void 0===o[e]?void 0!==n?n:o[e]:Q(o[e],n,r);var i;return o};function ee(e,t={},r=""){Object.keys(e).forEach((o=>{const i=e[o],n=t&&t[o];void 0===i.value?ee(i,n,`${r}.${o}`):(void 0!==n&&(i.value=n),i.envLink in A&&void 0!==A[i.envLink]&&(i.value=A[i.envLink]))}))}function te(e){let t={};for(const[r,o]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(o,"value")?o.value:te(o);return t}function re(e,t,r){for(;t.length>1;){const o=t.shift();return Object.prototype.hasOwnProperty.call(e,o)||(e[o]={}),e[o]=re(Object.assign({},e[o]),t,r),e}return e[t[0]]=r,e}async function oe(e,t={}){return new Promise(((r,o)=>{const i=(e=>e.startsWith("https")?c:a)(e);i.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||o("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{o(e)}))}))}class ie extends Error{constructor(e){super(),this.message=e,this.stackMessage=e}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const ne={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""},se=e=>e.sources.substring(0,e.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),ae=async(e,t,r,o=!1)=>{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),U(4,`[cache] Fetching script - ${e}.js`);const i=await oe(`${e}.js`,t);if(200===i.statusCode&&"string"==typeof i.text){if(r){r[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1}return i.text}if(o)throw new ie(`Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${i.statusCode}).`).setError(i);return U(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`),""},ce=async(t,o,i)=>{const n=t.version,s="latest"!==n&&n?`${n}/`:"",a=t.cdnURL||ne.cdnURL;U(3,`[cache] Updating cache version to Highcharts: ${s||"latest"}.`);const c={};try{return ne.sources=await(async(e,t,o,i,n)=>{let s;const a=i.host,c=i.port;if(a&&c)try{s=new r.HttpsProxyAgent({host:a,port:c})}catch(e){throw new ie("[cache] Could not create a Proxy Agent.").setError(e)}const l=s?{agent:s,timeout:A.SERVER_PROXY_TIMEOUT}:{},p=[...e.map((e=>ae(`${e}`,l,n,!0))),...t.map((e=>ae(`${e}`,l,n))),...o.map((e=>ae(`${e}`,l)))];return(await Promise.all(p)).join(";\n")})([...t.coreScripts.map((e=>`${a}${s}${e}`))],[...t.moduleScripts.map((e=>"map"===e?`${a}maps/${s}modules/${e}`:`${a}${s}modules/${e}`)),...t.indicatorScripts.map((e=>`${a}stock/${s}indicators/${e}`))],t.customScripts,o,c),ne.hcVersion=se(ne),e.writeFileSync(i,ne.sources),c}catch(e){throw new ie("[cache] Unable to update the local Highcharts cache.").setError(e)}},le=async r=>{const{highcharts:o,server:i}=r,n=t.join(G,o.cachePath);let s;const a=t.join(n,"manifest.json"),c=t.join(n,"sources.js");if(!e.existsSync(n)&&e.mkdirSync(n),!e.existsSync(a)||o.forceFetch)U(3,"[cache] Fetching and caching Highcharts dependencies."),s=await ce(o,i.proxy,c);else{let t=!1;const r=JSON.parse(e.readFileSync(a));if(r.modules&&Array.isArray(r.modules)){const e={};r.modules.forEach((t=>e[t]=1)),r.modules=e}const{coreScripts:n,moduleScripts:l,indicatorScripts:p}=o,u=n.length+l.length+p.length;r.version!==o.version?(U(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),t=!0):Object.keys(r.modules||{}).length!==u?(U(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),t=!0):t=(l||[]).some((e=>{if(!r.modules[e])return U(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),t?s=await ce(o,i.proxy,c):(U(3,"[cache] Dependency cache is up to date, proceeding."),ne.sources=e.readFileSync(c,"utf8"),s=r.modules,ne.hcVersion=se(ne))}await(async(r,o)=>{const i={version:r.version,modules:o||{}};ne.activeManifest=i,U(3,"[cache] Writing a new manifest.");try{e.writeFileSync(t.join(G,r.cachePath,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){throw new ie("[cache] Error writing the cache manifest.").setError(e)}})(o,s)},pe=()=>t.join(G,Z().highcharts.cachePath),ue=()=>ne.hcVersion;function he(){Highcharts.animObject=function(){return{duration:0}}}async function de(e,t,r){window._displayErrors=r;const{getOptions:o,merge:i,setOptions:n,wrap:s}=Highcharts;Highcharts.setOptionsObj=i(!1,{},o()),t.customLogic.customCode&&new Function(t.customLogic.customCode)();const a={animation:!1};t.export.strInj&&(a.height=e.chart.height,a.width=e.chart.width),window.isRenderComplete=!1,s(Highcharts.Chart.prototype,"init",(function(e,t,r){((t=i(t,{exporting:{enabled:!1},plotOptions:{series:{label:{enabled:!1}}},tooltip:{}})).series||[]).forEach((function(e){e.animation=!1})),window.onHighchartsRender||(window.onHighchartsRender=Highcharts.addEvent(this,"render",(()=>{window.isRenderComplete=!0}))),e.apply(this,[t,r])})),s(Highcharts.Series.prototype,"init",(function(e,t,r){e.apply(this,[t,r])}));const c=t.export.strInj?new Function(`return ${t.export.strInj}`)():e,l=i(!1,JSON.parse(t.export.themeOptions),c,{chart:a}),p=t.customLogic.callback?new Function(`return ${t.customLogic.callback}`)():void 0,u=JSON.parse(t.export.globalOptions);u&&n(u),Highcharts[t.export.constr||"chart"]("container",l,p);const h=o();for(const e in h)"function"!=typeof h[e]&&delete h[e];n(Highcharts.setOptionsObj),Highcharts.setOptionsObj={}}const me=e.readFileSync(G+"/templates/template.html","utf8");let ge;async function fe(){if(!ge)return!1;const e=await ge.newPage();return await e.setCacheEnabled(!1),await ye(e),function(e){const{debug:t}=Z();t.enable&&t.listenToConsole&&e.on("console",(e=>{console.log(`[debug] ${e.text()}`)}));e.on("pageerror",(async t=>{await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error: </h1>${t.toString()}`)}))}(e),e}async function ve(e,t){for(const e of t)await e.dispose();await e.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}const[...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const o of[...e,...t,...r])o.remove()}))}async function ye(e){await e.setContent(me,{waitUntil:"domcontentloaded"}),await e.addScriptTag({path:`${pe()}/sources.js`}),await e.evaluate(he)}const be=async(e,t,r,o)=>e.evaluate(de,t,r,o);var we=async(r,o,i)=>{let n=[];try{U(4,"[export] Determining export path.");const s=i.export,a=s?.options?.chart?.displayErrors&&ne.activeManifest.modules.debugger;let c;if(o.indexOf&&(o.indexOf("<svg")>=0||o.indexOf("<?xml")>=0)){if(U(4,"[export] Treating as SVG."),"svg"===s.type)return o;c=!0,await r.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcharts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(o),{waitUntil:"domcontentloaded"})}else U(4,"[export] Treating as config."),s.strInj?await be(r,{chart:{height:s.height,width:s.width}},i,a):(o.chart.height=s.height,o.chart.width=s.width,await be(r,o,i,a));n=await async function(r,o){const i=[],n=o.customLogic.resources;if(n){const s=[];if(n.js&&s.push({content:n.js}),n.files)for(const t of n.files){const r=!t.startsWith("http");s.push(r?{content:e.readFileSync(t,"utf8")}:{url:t})}for(const e of s)try{i.push(await r.addScriptTag(e))}catch(e){j(2,e,"[export] The JS resource cannot be loaded.")}s.length=0;const a=[];if(n.css){let e=n.css.match(/@import\s*([^;]*);/g);if(e)for(let r of e)r&&(r=r.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),r.startsWith("http")?a.push({url:r}):o.customLogic.allowFileResources&&a.push({path:t.join(G,r)}));a.push({content:n.css.replace(/@import\s*([^;]*);/g,"")||" "});for(const e of a)try{i.push(await r.addStyleTag(e))}catch(e){j(2,e,"[export] The CSS resource cannot be loaded.")}a.length=0}}return i}(r,i);const l=c?await r.evaluate((e=>{const t=document.querySelector("#chart-container svg:first-of-type"),r=t.height.baseVal.value*e,o=t.width.baseVal.value*e;return document.body.style.zoom=e,document.body.style.margin="0px",{chartHeight:r,chartWidth:o}}),parseFloat(s.scale)):await r.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return document.body.style.zoom=1,{chartHeight:e,chartWidth:t}})),p=Math.ceil(l.chartHeight||s.height),u=Math.ceil(l.chartWidth||s.width),{x:h,y:d}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:o,height:i}=e.getBoundingClientRect();return{x:t,y:r,width:o,height:Math.trunc(i>1?i:500)}})))(r);let m;if(await r.setViewport({height:p,width:u,deviceScaleFactor:c?1:parseFloat(s.scale)}),"svg"===s.type)m=await(e=>e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(r);else if(["png","jpeg"].includes(s.type))m=await((e,t,r,o,i)=>Promise.race([e.screenshot({type:t,encoding:r,clip:o,captureBeyondViewport:!0,fullPage:!1,optimizeForSpeed:!0,..."png"!==t?{quality:80}:{},omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new ie("Rasterization timeout"))),i||1500)))]))(r,s.type,"base64",{width:u,height:p,x:h,y:d},s.rasterizationTimeout);else{if("pdf"!==s.type)throw new ie(`[export] Unsupported output format ${s.type}.`);m=await(async(e,t,r,o,i)=>(await e.emulateMediaType("screen"),Promise.race([e.pdf({height:t+1,width:r,encoding:o}),new Promise(((e,t)=>setTimeout((()=>t(new ie("Rasterization timeout"))),i||1500)))])))(r,p,u,"base64",s.rasterizationTimeout)}return await ve(r,n),m}catch(e){return await ve(r,n),e}};let Ee=!1;const Te={performedExports:0,exportAttempts:0,exportFromSvgAttempts:0,timeSpent:0,droppedExports:0,spentAverage:0};let Se={};const _e={create:async()=>{let e=!1;const t=p.v4(),r=(new Date).getTime();try{if(e=await fe(),!e||e.isClosed())throw new ie("The page is invalid or closed.");U(3,`[pool] Successfully created a worker ${t} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw new ie("Error encountered when creating a new page.").setError(e)}return{id:t,page:e,workCount:Math.round(Math.random()*(Se.workLimit/2))}},validate:async e=>!(Se.workLimit&&++e.workCount>Se.workLimit)||(U(3,`[pool] Worker failed validation: exceeded work limit (limit is ${Se.workLimit}).`),!1),destroy:async e=>{U(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&await e.page.close()}},Re=async e=>{if(Se=e&&e.pool?{...e.pool}:{},await async function(e){const{debug:t,other:r}=Z(),{enable:o,...i}=t,n={headless:!r.browserShellMode||"shell",userDataDir:"./tmp/",args:e,handleSIGINT:!1,handleSIGTERM:!1,handleSIGHUP:!1,waitForInitialPage:!1,defaultViewport:null,...o&&i};if(!ge){let e=0;const t=async()=>{try{U(3,`[browser] Attempting to get a browser instance (try ${++e}).`),ge=await u.launch(n)}catch(r){if(j(1,r,"[browser] Failed to launch a browser instance."),!(e<25))throw r;U(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await t()}};try{await t(),"shell"===n.headless&&U(3,"[browser] Launched browser in shell mode."),o&&U(3,"[browser] Launched browser in debug mode.")}catch(e){throw new ie("[browser] Maximum retries to open a browser instance reached.").setError(e)}if(!ge)throw new ie("[browser] Cannot find a browser to open.")}return ge}(e.puppeteerArgs),U(3,`[pool] Initializing pool with workers: min ${Se.minWorkers}, max ${Se.maxWorkers}.`),Ee)return U(4,"[pool] Already initialized, please kill it before creating a new one.");parseInt(Se.minWorkers)>parseInt(Se.maxWorkers)&&(Se.minWorkers=Se.maxWorkers);try{Ee=new l.Pool({..._e,min:parseInt(Se.minWorkers),max:parseInt(Se.maxWorkers),acquireTimeoutMillis:Se.acquireTimeout,createTimeoutMillis:Se.createTimeout,destroyTimeoutMillis:Se.destroyTimeout,idleTimeoutMillis:Se.idleTimeout,createRetryIntervalMillis:Se.createRetryInterval,reapIntervalMillis:Se.reaperInterval,propagateCreateError:!1}),Ee.on("release",(async e=>{await async function(e,t=!1){try{e.isClosed()||(t?(await e.goto("about:blank",{waitUntil:"domcontentloaded"}),await ye(e)):await e.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'})))}catch(e){j(2,e,"[browser] Could not clear the content of the page.")}}(e.page,!1),U(4,`[pool] Releasing a worker with ID ${e.id}.`)})),Ee.on("destroySuccess",((e,t)=>{U(4,`[pool] Destroyed a worker with ID ${t.id}.`)}));const e=[];for(let t=0;t<Se.minWorkers;t++)try{const t=await Ee.acquire().promise;e.push(t)}catch(e){j(2,e,"[pool] Could not create an initial resource.")}e.forEach((e=>{Ee.release(e)})),U(3,"[pool] The pool is ready"+(e.length?` with ${e.length} initial resources waiting.`:"."))}catch(e){throw new ie("[pool] Could not create the pool of workers.").setError(e)}};async function ke(){if(U(3,"[pool] Killing pool with all workers and closing browser."),Ee){for(const e of Ee.used)Ee.release(e.resource);Ee.destroyed||(await Ee.destroy(),U(4,"[browser] Destroyed the pool of resources."))}await async function(){ge?.connected&&await ge.close(),U(4,"[browser] Closed the browser.")}()}const xe=async(e,t)=>{let r;try{if(U(4,"[pool] Work received, starting to process."),++Te.exportAttempts,Se.benchmarking&&function(){const{min:e,max:t,all:r,available:o,used:i,pending:n}=Oe();U(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),U(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),U(5,`[pool] The number of all created resources: ${r}.`),U(5,`[pool] The number of available resources: ${o}.`),U(5,`[pool] The number of acquired resources: ${i}.`),U(5,`[pool] The number of resources waiting to be acquired: ${n}.`)}(),!Ee)throw new ie("Work received, but pool has not been started.");const o=J();try{U(4,"[pool] Acquiring a worker handle."),r=await Ee.acquire().promise,t.server.benchmarking&&U(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Acquired a worker handle: ${o()}ms.`)}catch(e){throw new ie((t.payload?.requestId?`For request with ID ${t.payload?.requestId} - `:"")+`Error encountered when acquiring an available entry: ${o()}ms.`).setError(e)}if(U(4,"[pool] Acquired a worker handle."),!r.page)throw new ie("Resolved worker page is invalid: the pool setup is wonky.");let i=(new Date).getTime();U(4,`[pool] Starting work on pool entry with ID ${r.id}.`);const n=J(),s=await we(r.page,e,t);if(s instanceof Error)throw"Rasterization timeout"===s.message&&(r.page.close(),r.page=await fe()),new ie((t.payload?.requestId?`For request with ID ${t.payload?.requestId} - `:"")+`Error encountered during export: ${n()}ms.`).setError(s);t.server.benchmarking&&U(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Exported a chart sucessfully: ${n()}ms.`),Ee.release(r);const a=(new Date).getTime()-i;return Te.timeSpent+=a,Te.spentAverage=Te.timeSpent/++Te.performedExports,U(4,`[pool] Work completed in ${a} ms.`),{result:s,options:t}}catch(e){throw++Te.droppedExports,r&&Ee.release(r),new ie(`[pool] In pool.postWork: ${e.message}`).setError(e)}},Oe=()=>({min:Ee.min,max:Ee.max,all:Ee.numFree()+Ee.numUsed(),available:Ee.numFree(),used:Ee.numUsed(),pending:Ee.numPendingAcquires()});function Le(){return Te}let Ie=!1;const Ce=async(t,r)=>{U(4,"[chart] Starting the exporting process.");const o=((e,t={})=>{let r={};return e.svg?(r=V(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=Q(t,e,_),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(t,Z()),i=o.export;if(o.payload?.svg&&""!==o.payload.svg)try{U(4,"[chart] Attempting to export from a SVG input.");const e=$e(function(e){const t=new h.JSDOM("").window;return d(t).sanitize(e,{ADD_TAGS:["foreignObject"]})}(o.payload.svg),o,r);return++Te.exportFromSvgAttempts,e}catch(e){return r(new ie("[chart] Error loading SVG input.").setError(e))}if(i.infile&&i.infile.length)try{return U(4,"[chart] Attempting to export from an input file."),o.export.instr=e.readFileSync(i.infile,"utf8"),$e(o.export.instr.trim(),o,r)}catch(e){return r(new ie("[chart] Error loading input file.").setError(e))}if(i.instr&&""!==i.instr||i.options&&""!==i.options)try{return U(4,"[chart] Attempting to export from a raw input."),z(o.customLogic?.allowCodeExecution)?Pe(o,r):"string"==typeof i.instr?$e(i.instr.trim(),o,r):Ae(o,i.instr||i.options,r)}catch(e){return r(new ie("[chart] Error loading raw input.").setError(e))}return r(new ie("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'."))},Ne=e=>{const{chart:t,exporting:r}=e.export?.options||q(e.export?.instr),o=q(e.export?.globalOptions);let i=e.export?.scale||r?.scale||o?.exporting?.scale||e.export?.defaultScale||1;i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(i,2);const n={height:e.export?.height||r?.sourceHeight||t?.height||o?.exporting?.sourceHeight||o?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||o?.exporting?.sourceWidth||o?.chart?.width||e.export?.defaultWidth||600,scale:i};for(let[e,t]of Object.entries(n))n[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return n},Ae=async(t,r,o,i)=>{let{export:n,customLogic:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Ie;if(s){if(a)if("string"==typeof t.customLogic.resources)t.customLogic.resources=M(t.customLogic.resources,z(t.customLogic.allowFileResources));else if(!t.customLogic.resources)try{const r=e.readFileSync("resources.json","utf8");t.customLogic.resources=M(r,z(t.customLogic.allowFileResources))}catch(e){j(2,e,"[chart] Unable to load the default resources.json file.")}}else s=t.customLogic={};if(!a&&s){if(s.callback||s.resources||s.customCode)return o(new ie("[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server."));s.callback=!1,s.resources=!1,s.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=F(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=q(e.readFileSync(n[t],"utf8"),!0):n[t]=q(n[t],!0))}catch(e){n[t]={},j(2,e,`[chart] The '${t}' cannot be loaded.`)}})),s.allowCodeExecution)try{s.customCode=X(s.customCode,s.allowFileResources)}catch(e){j(2,e,"[chart] The 'customCode' cannot be loaded.")}if(s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){s.callback=!1,j(2,e,"[chart] The 'callback' cannot be loaded.")}else s.callback=!1;t.export={...t.export,...Ne(t)};try{return o(!1,await xe(n.strInj||r||i,t))}catch(e){return o(e)}},Pe=(e,t)=>{try{let r,o=e.export.instr||e.export.options;return"string"!=typeof o&&(r=o=B(o,e.customLogic?.allowCodeExecution)),r=o.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,Ae(e,!1,t)}catch(r){return t(new ie(`[chart] Malformed input detected for ${e.export?.requestId||"?"}. Please make sure that your JSON/JavaScript options are sent using the "options" attribute, and that if you're using SVG, it is unescaped.`).setError(r))}},$e=(e,t,r)=>{const{allowCodeExecution:o}=t.customLogic;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return U(4,"[chart] Parsing input as SVG."),Ae(t,!1,r,e);try{const o=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return Ae(t,o,r)}catch(e){return z(o)?Pe(t,r):r(new ie("[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.").setError(e))}},He=[],Ue=e=>{He.push(e)},je=()=>{U(4,"[server] Clearing all registered intervals and timeouts.");for(const e of He)clearInterval(e),clearTimeout(e)},De=(e,t,r,o)=>{j(1,e),"development"!==A.OTHER_NODE_ENV&&delete e.stack,o(e)},We=(e,t,r,o)=>{const{statusCode:i,status:n,message:s,stack:a}=e,c=i||n||500;r.status(c).json({statusCode:c,message:s,stack:a})};var Ge=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",o={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};o.trustProxy&&e.enable("trust proxy");const i=v({windowMs:60*o.window*1e3,max:o.max,delayMs:o.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==o.skipKey&&!1!==o.skipToken&&e.query.key===o.skipKey&&e.query.access_token===o.skipToken&&(U(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(i),U(3,`[rate limiting] Enabled rate limiting with ${o.max} requests per ${o.window} minute for each IP, trusting proxy: ${o.trustProxy}.`)};const Fe=JSON.parse(e.readFileSync(t.join(G,"lib","schemas","telemetry.json"))),Me={numberOfRequests:0},qe=["series","xAxis","yAxis","zAxis"];function Ve(e,t){const r={};for(const[o,i]of Object.entries(e))if(void 0!==t[o])if(null!==i)if(Array.isArray(t[o]))if(qe.includes(o)){r[o]=[];for(const[e,n]of t[o].entries())r[o][e]=Ve(i,n)}else r[o]=Ve(i,t[o][0]);else r[o]=Ve(i,t[o]);else r[o]=t[o];return r}function Be(e,t){Me[t]=Ve(Fe,e),Me.numberOfRequests++}const Ke=new Map;let ze,Xe=null;function Je(e){if(ze=Z().webSocket,!0===ze.enable){const t={rejectUnauthorized:ze.rejectUnauthorized,headers:{auth:y.sign({success:"success"},ze.secret,{algorithm:"HS256",expiresIn:"5m"}),"X-Server-Address":`${e.protocol}://${["::","0.0.0.0"].includes(e.address)?"localhost":e.address}:${e.port}`}},r={id:p.v4(),reconnect:ze.reconnect,reconnectTry:0,reconnectInterval:null,pingTimeout:null};Ye(ze.url,t,r),function(e){Xe=setInterval((()=>{try{const t=(e?Ke.get(e):Ke.values()).next().value;t&&t.readyState===b.OPEN&&Object.keys(Me).length>1&&Me.numberOfRequests>0&&t.send(JSON.stringify(Me))}catch(e){j(1,"[websocket] Could not send data through WebSocket.")}var e}),e.messageInterval),Ue(Xe)}(ze)}}function Ye(e,t,r){let o=new b(e,t);o.on("open",(()=>{clearInterval(r.reconnectInterval),Ke.set(r.id,o),U(3,`[websocket] WebSocket: ${r.id} - Connected to server: ${e}.`)})),o.on("close",(i=>{U(3,"[websocket]",`WebSocket: ${r.id} - Disconnected from server: ${e} with code: ${i}.`),clearTimeout(r.pingTimeout),Ke.delete(r.id),o=null,r.reconnect&&!r.reconnectInterval&&Ze(e,t,r)})),o.on("error",(e=>{j(1,e,`[websocket] WebSocket: ${r.id} - Error occured.`),e.message.includes("403")?(r.reconnect=!1,r.reconnectTry=ze.reconnectAttempts):r.reconnect=ze.reconnect})),o.on("message",(e=>{U(3,`[websocket] WebSocket: ${r.id} - Data received: ${e}`)})),o.on("ping",(()=>{U(3,`[websocket] WebSocket: ${r.id} - Received PING from server: ${e}.`),clearTimeout(r.pingTimeout),r.pingTimeout=setTimeout((()=>{o.terminate(),r.reconnect&&Ze(e,t,r)}),ze.pingTimeout)}))}function Ze(e,t,r){r.reconnectInterval=setInterval((()=>{r.reconnectTry<ze.reconnectAttempts?(U(3,`[websocket] WebSocket: ${r.id} - Attempt ${++r.reconnectTry} of ${ze.reconnectAttempts} to reconnect to server: ${e}.`),Ye(e,t,r)):(r.reconnect=!1,clearInterval(r.reconnectInterval),U(2,`[websocket] WebSocket: ${r.id} - Could not reconnect to server: ${e}.`))}),ze.reconnectInterval),Ue(r.reconnectInterval)}function Qe(){for(const e of Ke.values())e.terminate();Ke.clear()}class et extends ie{constructor(e,t){super(e),this.status=this.statusCode=t}setStatus(e){return this.status=e,this}}var tt=e=>!!e&&e.post("/version/change/:newVersion",(async(e,t,r)=>{try{const r=A.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)throw new et("The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.",401);const o=e.get("hc-auth");if(!o||o!==r)throw new et("Invalid or missing token: Set the token in the hc-auth header.",401);const i=e.params.newVersion;if(!i)throw new et("No new version supplied.",400);try{await(async e=>{const t=Z();t?.highcharts&&(t.highcharts.version=e),await le(t)})(i)}catch(e){throw new et(`Version change: ${e.message}`,e.statusCode).setError(e)}t.status(200).send({statusCode:200,version:ue(),message:`Successfully updated Highcharts to version: ${i}.`})}catch(e){r(e)}}));const rt={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let ot=0;const it=[],nt=[],st=(e,t,r,o)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:c}=o;return e.some((e=>{if(e){let o=e(t,r,n,s,a,c);return void 0!==o&&!0!==o&&(i=o),!0}})),i},at=async(e,t,r)=>{try{const r=J(),i=p.v4().replace(/-/g,""),n=Z(),s=e.body,a=++ot;let c=F(s.type);if(!s||"object"==typeof(o=s)&&!Array.isArray(o)&&null!==o&&0===Object.keys(o).length)throw new et("The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).",400);let l=q(s.infile||s.options||s.data);if(!l&&!s.svg)throw U(2,`The request with ID ${i} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Payload received: ${JSON.stringify(s)}.`),new et("No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.",400);let u=!1;if(u=st(it,e,t,{id:a,uniqueId:i,type:c,body:s}),!0!==u)return t.send(u);let h=!1;e.socket.on("close",(()=>{h=!0})),U(4,`[export] Got an incoming HTTP request with ID ${i}.`),s.constr="string"==typeof s.constr&&s.constr||"chart";const d={export:{instr:l,type:c,constr:s.constr[0].toLowerCase()+s.constr.substr(1),height:s.height,width:s.width,scale:s.scale||n.export.scale,globalOptions:q(s.globalOptions,!0),themeOptions:q(s.themeOptions,!0)},customLogic:{allowCodeExecution:Ie,allowFileResources:!1,resources:q(s.resources,!0),callback:s.callback,customCode:s.customCode}};l&&(d.export.instr=B(l,d.customLogic.allowCodeExecution));const m=Q(n,d);if(m.export.options=l,m.payload={svg:s.svg||!1,b64:s.b64||!1,noDownload:s.noDownload||!1,requestId:i},s.svg&&(e=>[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e))))(m.payload.svg))throw new et("SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.",400);await Ce(m,((o,l)=>{if(e.socket.removeAllListeners("close"),n.server.benchmarking&&U(5,`[benchmark] Request with ID ${i} - After the whole exporting process: ${r()}ms.`),h)return U(3,"[export] The client closed the connection before the chart finished processing.");if(o)throw o;if(!l||!l.result)throw new et(`Unexpected return from chart generation. Please check your request data. For the request with ID ${i}, the result is ${l.result}.`,400);return c=l.options.export.type,st(nt,e,t,{id:a,body:l.result}),Be(m.export.options,m.payload.requestId),l.result?s.b64?"pdf"===c||"svg"==c?t.send(Buffer.from(l.result,"utf8").toString("base64")):t.send(l.result):(t.header("Content-Type",rt[c]||"image/png"),s.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${c||"png"}`),"svg"===c?t.send(l.result):t.send(Buffer.from(l.result,"base64"))):void 0}))}catch(e){r(e)}var o};const ct=JSON.parse(e.readFileSync(t.join(G,"package.json"))),lt=new Date,pt=[];function ut(e){if(!e)return!1;Ue(setInterval((()=>{const e=Le(),t=0===e.exportAttempts?1:e.performedExports/e.exportAttempts*100;pt.push(t),pt.length>30&&pt.shift()}),6e4)),e.get("/health",((e,t)=>{const r=Le(),o=pt.length,i=pt.reduce(((e,t)=>e+t),0)/pt.length;U(4,"[health.js] GET /health [200] - returning server health."),t.send({status:"OK",bootTime:lt,uptime:Math.floor(((new Date).getTime()-lt.getTime())/1e3/60)+" minutes",version:ct.version,highchartsVersion:ue(),averageProcessingTime:r.spentAverage,performedExports:r.performedExports,failedExports:r.droppedExports,exportAttempts:r.exportAttempts,sucessRatio:r.performedExports/r.exportAttempts*100,pool:Oe(),period:o,movingAverage:i,message:`Last ${o} minutes had a success rate of ${i.toFixed(2)}%.`,svgExportAttempts:r.exportFromSvgAttempts,jsonExportAttempts:r.performedExports-r.exportFromSvgAttempts})}))}const ht=new Map,dt=g();dt.disable("x-powered-by"),dt.use(m());const mt=f.memoryStorage(),gt=f({storage:mt,limits:{fieldSize:52428800}});dt.use(g.json({limit:52428800})),dt.use(g.urlencoded({extended:!0,limit:52428800})),dt.use(gt.none());const ft=e=>{e.on("clientError",(e=>{j(1,e,`[server] Client error: ${e.message}`)})),e.on("error",(e=>{j(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{j(1,e,`[server] Socket error: ${e.message}`)}))}))},vt=async r=>{try{if(!r.enable)return!1;if(!r.ssl.force){const e=a.createServer(dt);ft(e),e.listen(r.port,r.host,(()=>{ht.set(r.port,e),U(3,`[server] Started HTTP server on ${r.host}:${r.port}.`),1===ht.size&&Je({...e.address(),protocol:"http"})}))}if(r.ssl.enable){let o,i;try{o=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.crt"),"utf8")}catch(e){U(2,`[server] Unable to load key/certificate from the '${r.ssl.certPath}' path. Could not run secured layer server.`)}if(o&&i){const e=c.createServer({key:o,cert:i},dt);ft(e),e.listen(r.ssl.port,r.host,(()=>{ht.set(r.ssl.port,e),U(3,`[server] Started HTTPS server on ${r.host}:${r.ssl.port}.`),1===ht.size&&Je({...e.address(),protocol:"https"})}))}}r.rateLimiting&&r.rateLimiting.enable&&![0,NaN].includes(r.rateLimiting.maxRequests)&&Ge(dt,r.rateLimiting),dt.use(g.static(t.posix.join(G,"public"))),ut(dt),(e=>{e.post("/",at),e.post("/:filename",at)})(dt),(e=>{!!e&&e.get("/",((e,r)=>{r.sendFile(t.join(G,"public","index.html"))}))})(dt),tt(dt),(e=>{e.use(De),e.use(We)})(dt)}catch(e){throw new ie("[server] Could not configure and start the server.").setError(e)}},yt=()=>{U(4,"[server] Closing all servers.");for(const[e,t]of ht)t.close((()=>{ht.delete(e),U(4,`[server] Closed server on port: ${e}.`)}))};var bt={startServer:vt,closeServers:yt,getServers:()=>ht,enableRateLimiting:e=>Ge(dt,e),getExpress:()=>g,getApp:()=>dt,use:(e,...t)=>{dt.use(e,...t)},get:(e,...t)=>{dt.get(e,...t)},post:(e,...t)=>{dt.post(e,...t)}};const wt=async e=>{await Promise.allSettled([je(),Qe(),yt(),ke()]),process.exit(e)};var Et={server:bt,startServer:vt,initExport:async e=>{var t;return t=e.customLogic&&e.customLogic.allowCodeExecution,Ie=z(t),(e=>{D(e&&parseInt(e.level)),e&&e.dest&&W(e.dest,e.file||"highcharts-export-server.log")})(e.logging),e.other.listenToProcessExits&&(U(3,"[process] Attaching exit listeners to the process."),process.on("exit",(e=>{U(4,`Process exited with code ${e}.`)})),process.on("SIGINT",(async(e,t)=>{U(4,`The ${e} event with code: ${t}.`),await wt(0)})),process.on("SIGTERM",(async(e,t)=>{U(4,`The ${e} event with code: ${t}.`),await wt(0)})),process.on("SIGHUP",(async(e,t)=>{U(4,`The ${e} event with code: ${t}.`),await wt(0)})),process.on("uncaughtException",(async(e,t)=>{j(1,e,`The ${t} error.`),await wt(1)}))),await le(e),await Re({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer.args||[]}),e},singleExport:async t=>{t.export.instr=t.export.instr||t.export.options,await Ce(t,(async(t,r)=>{if(t)throw t;const{outfile:o,type:i}=r.options.export;e.writeFileSync(o||`chart.${i}`,"svg"!==i?Buffer.from(r.result,"base64"):r.result),await ke()}))},batchExport:async t=>{const r=[];for(let o of t.export.batch.split(";"))o=o.split("="),2===o.length&&r.push(Ce({...t,export:{...t.export,infile:o[0],outfile:o[1]}},((t,r)=>{if(t)throw t;e.writeFileSync(r.options.export.outfile,"svg"!==r.options.export.type?Buffer.from(r.result,"base64"):r.result)})));try{await Promise.all(r),await ke()}catch(e){throw new ie("[chart] Error encountered during batch export.").setError(e)}},startExport:Ce,initPool:Re,killPool:ke,setOptions:(t,r)=>(r?.length&&(Y=function(t){const r=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&t[r+1]){const o=t[r+1];try{if(o&&o.endsWith(".json"))return JSON.parse(e.readFileSync(o))}catch(e){j(2,e,`[config] Unable to load the configuration from the ${o} file.`)}}return{}}(r)),ee(T,Y),Y=te(T),t&&(Y=Q(Y,t,_)),r?.length&&(Y=function(e,t,r){let o=!1;for(let i=0;i<t.length;i++){const n=t[i].replace(/-/g,""),s=R[n]?R[n].split("."):[];let a;s.reduce(((e,t,r)=>(s.length-1===r&&(a=e[t].type),e[t])),r),s.reduce(((e,r,c)=>(s.length-1===c&&void 0!==e[r]&&(t[++i]?"boolean"===a?e[r]=z(t[i]):"number"===a?e[r]=+t[i]:a.indexOf("]")>=0?e[r]=t[i].split(","):e[r]=t[i]:(U(2,`[config] Missing value for the '${n}' argument. Using the default value.`),o=!0)),e[r])),e)}o&&K();return e}(Y,r,T)),Y),shutdownCleanUp:wt,log:U,logWithStack:j,setLogLevel:D,enableFileLogging:W,mapToNewConfig:e=>{const t={};for(const[r,o]of Object.entries(e)){const e=R[r]?R[r].split("."):[];e.reduce(((t,r,i)=>t[r]=e.length-1===i?o:t[r]||{}),t)}return t},manualConfig:async t=>{let r={};e.existsSync(t)&&(r=JSON.parse(e.readFileSync(t,"utf8")));const i=Object.keys(S).map((e=>({title:`${e} options`,value:e})));return o({type:"multiselect",name:"category",message:"Which category do you want to configure?",hint:"Space: Select specific, A: Select all, Enter: Confirm.",instructions:"",choices:i},{onSubmit:async(i,n)=>{let s=0,a=[];for(const e of n)S[e]=S[e].map((t=>({...t,section:e}))),a=[...a,...S[e]];return await o(a,{onSubmit:async(o,i)=>{if("moduleScripts"===o.name?(i=i.length?i.map((e=>o.choices[e])):o.choices,r[o.section][o.name]=i):r[o.section]=re(Object.assign({},r[o.section]||{}),o.name.split("."),o.choices?o.choices[i]:i),++s===a.length){try{await e.promises.writeFile(t,JSON.stringify(r,null,2),"utf8")}catch(e){j(1,e,`[config] An error occurred while creating the ${t} file.`)}return!0}}}),!0}})},printLogo:r=>{const o=JSON.parse(e.readFileSync(t.join(G,"package.json"))).version;r?console.log(`Starting Highcharts Export Server v${o}...`):console.log(e.readFileSync(G+"/msg/startup.msg").toString().bold.yellow,`v${o}\n`.bold)},printUsage:K};module.exports=Et;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
