"use strict";require("colors");var e=require("fs"),t=require("path"),o=require("body-parser"),r=require("cors"),i=require("express"),n=require("http"),s=require("https"),a=require("jsonwebtoken"),l=require("multer"),c=require("express-rate-limit"),p=require("url"),u=require("dotenv"),d=require("ws"),h=require("zod"),g=require("https-proxy-agent"),m=require("uuid"),f=require("tarn"),v=require("puppeteer"),y=require("node:path"),b=require("node:crypto");require("prompts");var w="undefined"!=typeof document?document.currentScript:null;function T(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var r=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,r.get?r:{enumerable:!0,get:function(){return e[o]}})}})),t.default=e,Object.freeze(t)}var S=T(p);u.config();const x={puppeteer:{args:{value:[],type:"string[]",description:"Array of arguments to send to puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"Highcharts version to use."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN",type:"string",description:"The CDN URL of Highcharts scripts to use."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"Highcharts core scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","draggable-points","static-scale","broken-axis","heatmap","tilemap","timeline","treemap","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","pyramid3d","networkgraph","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi"],type:"string[]",description:"Highcharts modules to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"Highcharts indicators to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional direct scripts/optional dependencies (e.g. moment.js)."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"Should all the scripts be refetched after rerunning the server."}},export:{infile:{value:!1,type:"string",description:"The input file name along with a type (json or svg). It can be a correct JSON or SVG file."},instr:{value:!1,type:"string",description:"An input in a form of a stringified JSON or SVG file. Overrides the --infile."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag."},type:{envLink:"EXPORT_DEFAULT_TYPE",value:"png",type:"string",description:"The format of the file to export to. Can be jpeg, png, pdf or svg."},constr:{envLink:"EXPORT_DEFAULT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"The default height of the exported chart. Used when not found any value set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when not found any value set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Ranges between 1 and 5."},height:{type:"number",value:!1,description:"The default height of the exported chart. Overrides the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart. Overrides the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart. Ranges between 1 and 5."},globalOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Starts a batch job. A string that contains input/output pairs: "in=out;in=out;..".'}},customCode:{allowCodeExecution:{envLink:"HIGHCHARTS_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"If set to true, allow for the execution of arbitrary code when exporting."},allowFileResources:{envLink:"HIGHCHARTS_ALLOW_FILE_RESOURCES",value:!0,type:"boolean",description:"Allow injecting resources from the filesystem. Has no effect when running as a server."},customCode:{value:!1,type:"string",description:"A function to be called before chart initialization. Can be a filename with the js extension."},callback:{value:!1,type:"string",description:"A JavaScript file with a function to run on construction."},resources:{value:!1,type:"string",description:"An additional resource in a form of stringified JSON. It can contain files, js and css sections."},loadConfig:{value:!1,type:"string",description:"A file that contains a pre-defined config to use."},createConfig:{value:!1,type:"string",description:"Allows to set options through a prompt and save in a provided config file."}},server:{enable:{envLink:"HIGHCHARTS_SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"If set to true, starts a server on 0.0.0.0."},host:{envLink:"HIGHCHARTS_SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Also starts a server listening on the supplied hostname."},port:{envLink:"HIGHCHARTS_SERVER_PORT",value:7801,type:"number",description:"The port to use for the server. Defaults to 7801."},ssl:{enable:{envLink:"HIGHCHARTS_SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables the SSL protocol."},force:{envLink:"HIGHCHARTS_SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",description:"If set to true, forces the server to only serve over HTTPS."},port:{envLink:"HIGHCHARTS_SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"HIGHCHARTS_SERVER_SSL_CERT_PATH",value:"",type:"string",description:"The path to the SSL certificate/key."}},rateLimiting:{enable:{envLink:"HIGHCHARTS_RATE_LIMIT_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting."},maxRequests:{envLink:"HIGHCHARTS_RATE_LIMIT_MAX",value:10,type:"number",description:"Max requests allowed in a one minute."},window:{envLink:"HIGHCHARTS_RATE_LIMIT_WINDOW",value:1,type:"number",description:"The time window in minutes for rate limiting."},delay:{envLink:"HIGHCHARTS_RATE_LIMIT_DELAY",value:0,type:"number",description:"The amount to delay each successive request before hitting the max."},trustProxy:{envLink:"HIGHCHARTS_RATE_LIMIT_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if behind a load balancer."},skipKey:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_KEY",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipToken argument."},skipToken:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipKey argument."}}},pool:{initialWorkers:{envLink:"HIGHCHARTS_POOL_MIN_WORKERS",value:4,type:"number",description:"The number of initial workers to spawn."},maxWorkers:{envLink:"HIGHCHARTS_POOL_MAX_WORKERS",value:8,type:"number",description:"The number of max workers to spawn."},workLimit:{envLink:"HIGHCHARTS_POOL_WORK_LIMIT",value:40,type:"number",description:"The pieces of work that can be performed before restarting process."},queueSize:{envLink:"HIGHCHARTS_POOL_QUEUE_SIZE",value:5,type:"number",description:"The size of the request overflow queue."},timeoutThreshold:{envLink:"HIGHCHARTS_POOL_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds before timing out."},acquireTimeout:{envLink:"HIGHCHARTS_POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for acquiring a resource."},reaper:{envLink:"HIGHCHARTS_POOL_REAPER_ENABLE",value:!0,type:"boolean",description:"Whether or not to evict workers after a certain time period."},benchmarking:{envLink:"HIGHCHARTS_POOL_BENCHMARKING",value:!1,type:"boolean",description:"Enable benchmarking."},listenToProcessExits:{envLink:"HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Set to false in order to skip attaching process.exit handlers."}},logging:{level:{envLink:"HIGHCHARTS_LOG_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)."},file:{envLink:"HIGHCHARTS_LOG_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"A name of a log file. The --logDest also needs to be set to enable file logging."},dest:{envLink:"HIGHCHARTS_LOG_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. Also enables file logging."}},ui:{enable:{envLink:"HIGHCHARTS_UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables the UI for the export server."},route:{envLink:"HIGHCHARTS_UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The route to attach the UI to."}},other:{noLogo:{envLink:"HIGHCHARTS_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}},payload:{}};x.puppeteer.args.value.join(","),x.highcharts.version.value,x.highcharts.cdnURL.value,x.highcharts.modules.value,x.highcharts.scripts.value.join(","),x.highcharts.forceFetch.value,x.export.type.value,x.export.constr.value,x.export.defaultHeight.value,x.export.defaultWidth.value,x.export.defaultScale.value,x.customCode.allowCodeExecution.value,x.customCode.allowFileResources.value,x.server.enable.value,x.server.host.value,x.server.port.value,x.server.ssl.enable.value,x.server.ssl.force.value,x.server.ssl.port.value,x.server.ssl.certPath.value,x.server.rateLimiting.enable.value,x.server.rateLimiting.maxRequests.value,x.server.rateLimiting.window.value,x.server.rateLimiting.delay.value,x.server.rateLimiting.trustProxy.value,x.server.rateLimiting.skipKey.value,x.server.rateLimiting.skipToken.value,x.pool.initialWorkers.value,x.pool.maxWorkers.value,x.pool.workLimit.value,x.pool.queueSize.value,x.pool.timeoutThreshold.value,x.pool.acquireTimeout.value,x.pool.reaper.value,x.pool.benchmarking.value,x.pool.listenToProcessExits.value,x.logging.level.value,x.logging.file.value,x.logging.dest.value,x.ui.enable.value,x.ui.route.value,x.other.noLogo.value;const k=["options","globalOptions","themeOptions","resources","payload"],E={},R=(e,t="")=>{Object.keys(e).forEach((o=>{if(!["puppeteer","highcharts"].includes(o)){const r=e[o];void 0===r.value?R(r,`${t}.${o}`):E[r.cliName||o]=`${t}.${o}`.substring(1)}}))};R(x);let H={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:"red"},{title:"warning",color:"yellow"},{title:"notice",color:"blue"},{title:"verbose",color:"gray"}],listeners:[]};for(const[e,t]of Object.entries(x.logging))H[e]=t.value;const _=(...t)=>{const[o,...r]=t,{level:i,levelsDesc:n}=H;if(0===o||o>i||i>n.length)return;const s=`${(new Date).toString().split("(")[0].trim()} [${n[o-1].title}] -`;H.listeners.forEach((e=>{e(s,r.join(" "))})),H.toFile&&(H.pathCreated||(!e.existsSync(H.dest)&&e.mkdirSync(H.dest),H.pathCreated=!0),e.appendFile(`${H.dest}${H.file}`,[s].concat(r).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),H.toFile=!1)}))),H.toConsole&&console.log.apply(void 0,[s.toString()[H.levelsDesc[o-1].color]].concat(r))},L=p.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:w&&w.src||new URL("index.cjs",document.baseURI).href)),C=(e,t=/\s\s+/g,o=" ")=>e.replaceAll(t,o).trim(),O=(e,t)=>{const o=["png","jpeg","pdf","svg"];if(t){const r=t.split(".").pop();o.includes(r)&&e!==r&&(e=r)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||o.find((t=>t===e))||"png"},I=(t=!1,o)=>{const r=["js","css","files"];let i=t,n=!1;if(o&&t.endsWith(".json"))try{t?t&&t.endsWith(".json")?i=A(e.readFileSync(t,"utf8")):(i=A(t),!0===i&&(i=A(e.readFileSync("resources.json","utf8")))):i=A(e.readFileSync("resources.json","utf8"))}catch(e){return _(3,"[cli] No resources found.")}else i=A(t),o||delete i.files;for(const e in i)r.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):_(3,"[cli] No resources found.")};function A(e,t){try{const o=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof o&&t?JSON.stringify(o):o}catch(e){return!1}}const $=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=$(e[o]));return t},N=(e,t)=>JSON.stringify(e,((e,o)=>("string"==typeof o&&((o=o.trim()).startsWith("function(")||o.startsWith("function ("))&&o.endsWith("}")&&(o=t?`EXP_FUN${(o+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof o?`EXP_FUN${(o+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:o))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function j(){console.log("Usage of CLI arguments:".bold,"\n------",`\nFor more detailed information visit readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[o,r]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(r,"value")){let e=`  --${r.cliName||o} ${("<"+r.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,r.description,`[Default: ${r.value.toString().bold}]`.blue)}else e(r)};Object.keys(x).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(x[t]))})),console.log("\n")}const P=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,U=(t,o)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!o&&U(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")};var W=(e,t)=>{const o="Too many requests, you have been rate limited. Please try again later.",r={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};r.trustProxy&&e.enable("trust proxy");const i=c({windowMs:60*r.window*1e3,max:r.max,delayMs:r.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:o})},default:()=>{t.status(429).send(o)}})},skip:e=>!1!==r.skipKey&&!1!==r.skipToken&&e.query.key===r.skipKey&&e.query.access_token===r.skipToken&&(_(4,"[rate-limiting] Skipping rate limiter."),!0)});e.use(i),_(3,C(`[rate-limiting] Enabled rate limiting: ${r.max} requests\n      per ${r.window} minute per IP, trusting proxy:\n      ${r.trustProxy}.`))};const F=()=>h.z.enum(["true","false"]).transform((e=>"true"===e)),q=h.z.object({WS_ENABLE:F(),WS_RECONNECT:F(),WS_REJECT_UNAUTHORIZED:F(),WS_PING_TIMEOUT:h.z.coerce.number(),WS_RECONNECT_INTERVAL:h.z.coerce.number(),WS_URL:h.z.string(),WS_SECRET:h.z.string()}).parse(process.env);let G,M;function D(e,t){G=new d(e,t),G.on("open",(()=>{_(3,`[websocket] Connected to WebSocket server: ${e}`),clearInterval(M)})),G.on("close",(t=>{_(3,"[websocket]",`Disconnected from WebSocket server: ${e} with code: ${t}`),clearTimeout(G._pingTimeout),G=null})),G.on("error",(e=>{_(1,`[websocket] WebSocket error occured: ${e.message}`)})),G.on("message",(e=>{_(3,`[websocket] Data received: ${e}`)})),G.on("ping",(()=>{_(3,"[websocket] PING"),clearTimeout(G._pingTimeout),G._pingTimeout=setTimeout((()=>{G.terminate(),!0===q.WS_RECONNECT&&function(e,t){M=setInterval((()=>{null===G&&D(e,t)}),q.WS_RECONNECT_INTERVAL)}(e,t)}),q.WS_PING_TIMEOUT)}))}var V={connect:D,getClient:function(){return G}};async function z(e,t={}){return new Promise(((o,r)=>{const i=(e=>e.startsWith("https")?s:n)(e);i.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||r("Nothing was fetched from the URL."),e.text=t,o(e)}))})).on("error",(e=>{r(e)}))}))}u.config();const J=t.join(L,".cache"),B={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let K=!1;const X=()=>B.hcVersion=B.sources.substr(0,B.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),Y=async(e,t)=>{try{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),_(4,`[cache] Fetching script - ${e}.js`);const o=t?{agent:t,timeout:+process.env.PROXY_SERVER_TIMEOUT||5e3}:{},r=await z(`${e}.js`,o);if(200===r.statusCode)return r.text;throw`${r.statusCode}`}catch(t){throw _(1,`[cache] Error fetching script ${e}.js: ${t}.`),t}},Z=async(t,o)=>{const{coreScripts:r,modules:i,indicators:n,scripts:s}=t,a="latest"!==t.version&&t.version?`${t.version}/`:"";_(3,"[cache] Updating cache to Highcharts ",a);const l=[...r.map((e=>`${a}${e}`)),...i.map((e=>"map"===e?`maps/${a}modules/${e}`:`${a}modules/${e}`)),...n.map((e=>`stock/${a}indicators/${e}`))];let c;const p=process.env.PROXY_SERVER_HOST,u=process.env.PROXY_SERVER_PORT;p&&u&&(c=new g({host:p,port:+u}));const d={};try{return B.sources=(await Promise.all([...l.map((async e=>{const o=await Y(`${t.cdnURL||B.cdnURL}${e}`,c);return"string"==typeof o&&(d[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1),o})),...s.map((e=>Y(e,c)))])).join(";\n"),X(),e.writeFileSync(o,B.sources),d}catch(e){_(1,"[cache] Unable to update local Highcharts cache.")}},Q=async o=>{let r;const i=t.join(J,"manifest.json"),n=t.join(J,"sources.js");if(K=o,!e.existsSync(J)&&e.mkdirSync(J),!e.existsSync(i)||o.forceFetch)_(3,"[cache] Fetching and caching Highcharts dependencies."),r=await Z(o,n);else{let t=!1;const s=JSON.parse(e.readFileSync(i));if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{modules:a,coreScripts:l,indicators:c}=o,p=a.length+l.length+c.length;s.version!==o.version?(_(3,"[cache] Highcharts version mismatch in cache, need to re-fetch."),t=!0):Object.keys(s.modules||{}).length!==p?(_(3,"[cache] Cache and requested modules does not match, need to re-fetch."),t=!0):t=(o.modules||[]).some((e=>{if(!s.modules[e])return _(3,`[cache] The ${e} missing in cache, need to re-fetch.`),!0})),t?r=await Z(o,n):(_(3,"[cache] Dependency cache is up to date, proceeding."),B.sources=e.readFileSync(n,"utf8"),r=s.modules,X())}await(async(o,r)=>{const i={version:o.version,modules:r||{}};B.activeManifest=i,_(4,"[cache] writing new manifest");try{e.writeFileSync(t.join(J,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){_(1,`[cache] Error writing cache manifest: ${e}.`)}})(o,r)};var ee=async e=>!!K&&await Q(Object.assign(K,{version:e})),te=()=>B,oe=()=>B.hcVersion;const re=b.randomBytes(64).toString("base64url"),ie=y.join("tmp",`puppeteer-${re}`),ne=[`--user-data-dir=${y.join(ie,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],se=S.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:w&&w.src||new URL("index.cjs",document.baseURI).href)),ae=e.readFileSync(se+"/../templates/template.html","utf8");let le;const ce=async()=>{if(!le)return!1;const e=await le.newPage();return await e.setContent(ae),await e.addScriptTag({path:se+"/../.cache/sources.js"}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{_(1,"[page error]",t),await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)})),e},pe=async()=>{le.connected&&await le.close()};const ue=S.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:w&&w.src||new URL("index.cjs",document.baseURI).href)),de=async(e,t,o)=>await e.evaluate(((e,t)=>window.triggerExport(e,t)),t,o);var he=async(o,r,i)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...o]=document.getElementsByTagName("link");for(const r of[...e,...t,...o])r.remove()}))};try{const a=()=>{};_(4,"[export] Determining export path.");const l=i.export;await o.evaluate((()=>requestAnimationFrame((()=>{}))));const c=l?.options?.chart?.displayErrors&&te().activeManifest.modules.debugger;await o.evaluate((e=>window._displayErrors=e),c);const p=()=>{};let u;if(r.indexOf&&(r.indexOf("<svg")>=0||r.indexOf("<?xml")>=0)){if(_(4,"[export] Treating as SVG."),"svg"===l.type)return r;u=!0;const e=()=>{};await o.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(r)),e()}else if(_(4,"[export] Treating as config."),l.strInj){const e=()=>{};await de(o,{chart:{height:l.height,width:l.width}},i),e()}else{r.chart.height=l.height,r.chart.width=l.width;const e=()=>{};await de(o,r,i),e()}p();const d=()=>{},h=i.customCode.resources;if(h){if(h.js&&n.push(await o.addScriptTag({content:h.js})),h.files)for(const t of h.files)try{const r=!t.startsWith("http");n.push(await o.addScriptTag(r?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){_(4,"[export] JS file not found.")}const r=()=>{};if(h.css){let e=h.css.match(/@import\s*([^;]*);/g);if(e)for(let r of e)r&&(r=r.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),r.startsWith("http")?n.push(await o.addStyleTag({url:r})):i.customCode.allowFileResources&&n.push(await o.addStyleTag({path:t.join(ue,r)})));n.push(await o.addStyleTag({content:h.css.replace(/@import\s*([^;]*);/g,"")||" "}))}r()}d();const g=u?await o.$eval("#chart-container svg:first-of-type",(async(e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(l.scale)):await o.evaluate((async()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),m=()=>{},f=Math.ceil(g?.chartHeight||l.height),v=Math.ceil(g?.chartWidth||l.width);await o.setViewport({height:f,width:v,deviceScaleFactor:u?1:parseFloat(l.scale)});const y=u?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await o.evaluate(y,parseFloat(l.scale));const{height:b,width:w,x:T,y:S}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:o,width:r,height:i}=e.getBoundingClientRect();return{x:t,y:o,width:r,height:Math.trunc(i>1?i:500)}})))(o);let x;u||await o.setViewport({width:Math.round(w),height:Math.round(b),deviceScaleFactor:parseFloat(l.scale)}),m();const k=()=>{};if("svg"===l.type)x=await(async e=>await e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(o);else if("png"===l.type||"jpeg"===l.type)x=await(async(e,t,o,r)=>await Promise.race([e.screenshot({type:t,encoding:o,clip:r,omitBackground:!0}),new Promise(((e,t)=>setTimeout((()=>t(new Error("Rasterization timeout"))),1500)))]))(o,l.type,"base64",{width:v,height:f,x:T,y:S});else{if("pdf"!==l.type)throw`Unsupported output format ${l.type}`;x=await(async(e,t,o,r)=>await e.pdf({height:t+1,width:o,encoding:r}))(o,f,v,"base64")}return await o.evaluate((()=>{const e=Highcharts.charts;if(e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()})),k(),a(),await s(o),x}catch(e){return await s(o),_(1,`[export] Error encountered during export: ${e}`),e}};let ge,me=0,fe=0,ve=0,ye=0,be=0,we={},Te=!1;const Se={create:async()=>{const e=m.v4();let t=!1;const o=(new Date).getTime();try{if(t=await ce(),!t||t.isClosed())throw"invalid page";_(3,`[pool] Successfully created a worker ${e} - took ${(new Date).getTime()-o} ms.`)}catch(e){throw _(1,`[pool] Error creating a new page in pool entry creation! ${e}`),"Error creating page"}return{id:e,page:t,workCount:Math.round(Math.random()*(we.workLimit/2))}},validate:e=>!(we.workLimit&&++e.workCount>we.workLimit)||(_(3,"[pool] Worker failed validation:",`exceeded work limit (limit is ${we.workLimit})`),!1),destroy:e=>{_(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()},log:(e,t)=>console.log(`${t}: ${e}`)},xe=async e=>{ge=e.puppeteerArgs;try{await(async e=>{const t=[...ne,...e||[]];if(!le){let e=0;const o=async()=>{try{_(3,"[browser] attempting to get a browser instance (try",e+")"),le=await v.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){_(0,"[browser]",t),++e<25?(_(3,"[browser] failed:",t),await new Promise((e=>setTimeout(e,4e3))),await o()):_(0,"Max retries reached")}};try{await o()}catch(e){return _(0,"[browser] Unable to open browser"),!1}if(!le)return _(0,"[browser] Unable to open browser"),!1}return le})(ge)}catch(e){_(0,"[pool|browser]",e)}if(we=e&&e.pool?{...e.pool}:{},_(3,"[pool] Initializing pool:",`min ${we.initialWorkers}, max ${we.maxWorkers}.`),Te)return _(4,"[pool] Already initialized, please kill it before creating a new one.");we.listenToProcessExits&&(_(4,"[pool] Attaching exit listeners to the process."),process.on("exit",(async()=>{await ke()})),process.on("SIGINT",((e,t)=>{_(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{_(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",(async(e,t)=>{_(4,`The ${t} error, message: ${e.message}.`)})));try{Te=new f.Pool({...Se,min:we.initialWorkers,max:we.maxWorkers,createRetryIntervalMillis:200,createTimeoutMillis:we.acquireTimeout,acquireTimeoutMillis:we.acquireTimeout,destroyTimeoutMillis:we.acquireTimeout,idleTimeoutMillis:we.timeoutThreshold,reapIntervalMillis:1e3,propagateCreateError:!1}),Te.on("createFail",((e,t)=>{_(1,`[pool] Error when creating worker of an event id ${e}:`,t)})),Te.on("acquireFail",((e,t)=>{_(1,`[pool] Error when acquiring worker of an event id ${e}:`,t)})),Te.on("destroyFail",((e,t,o)=>{_(1,`[pool] Error when destroying worker of an id ${t.id}, event id ${e}:`,o)})),Te.on("release",(e=>{_(4,`[pool] Releasing a worker of an id ${e.id}`)})),Te.on("destroySuccess",((e,t)=>{_(4,`[pool] Destroyed a worker of an id ${t.id}`)}));const e=[];for(let t=0;t<we.initialWorkers;t++)e.push(await Te.acquire().promise);e.forEach((e=>{Te.release(e)})),_(3,`[pool] The pool is ready with ${we.initialWorkers} initial resources waiting.`)}catch(e){throw _(1,`[pool] Couldn't create the worker pool ${e}`),e}};async function ke(){return _(3,"[pool] Killing all workers."),Te.destroyed?(await pe(),!0):(await Te.destroy(),await pe(),!0)}const Ee=async(e,t)=>{let o;const r=e=>{throw++ye,o&&Te.release(o),"In pool.postWork: "+e};if(_(4,"[pool] Work received, starting to process."),we.benchmarking&&Re(),++fe,!Te)return _(1,"[pool] Work received, but pool has not been started."),r("Pool is not inited but work was posted to it!");try{_(4,"[pool] Acquiring worker"),o=await Te.acquire().promise}catch(e){return r(`[pool] Error when acquiring available entry: ${e}`)}if(_(4,"[pool] Acquired worker handle"),!o.page)return r("Resolved worker page is invalid: pool setup is wonky");try{let i=(new Date).getTime();_(4,`[pool] Starting work on pool entry ${o.id}.`);const n=await he(o.page,e,t);if(n instanceof Error)return"Rasterization timeout"===n.message&&(o.page.close(),o.page=await ce()),r(n);Te.release(o);const s=(new Date).getTime()-i;return ve+=s,be=ve/++me,_(4,`[pool] Work completed in ${s} ms.`),{data:n,options:t}}catch(e){r(`Error trying to perform puppeteer export: ${e}.`)}};function Re(){const{min:e,max:t,size:o,available:r,borrowed:i,pending:n,spareResourceCapacity:s}=Te;_(4,`[pool] The minimum number of resources allowed by pool: ${e}.`),_(4,`[pool] The maximum number of resources allowed by pool: ${t}.`),_(4,`[pool] The number of all resources in pool (free or in use): ${o}.`),_(4,`[pool] The number of resources that are currently available: ${r}.`),_(4,`[pool] The number of resources that are currently acquired: ${i}.`),_(4,`[pool] The number of callers waiting to acquire a resource: ${n}.`),_(4,`[pool] The number of how many more resources can the pool manage/create: ${s}.`)}var He=()=>({min:Te.min,max:Te.max,size:Te.size,available:Te.available,borrowed:Te.borrowed,pending:Te.pending,spareResourceCapacity:Te.spareResourceCapacity}),_e=()=>fe,Le=()=>ye,Ce=()=>be,Oe=()=>me;const Ie=process.env.npm_package_version,Ae=new Date;let $e={};const Ne=()=>$e,je=(e,t,o=[])=>{const r=$(e);for(const[e,n]of Object.entries(t))r[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||o.includes(e)||void 0===r[e]?void 0!==n?n:r[e]:je(r[e],n,o);var i;return r};function Pe(e,t={},o=""){Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const i=e[r],n=t&&t[r];let s;void 0===i.value?Pe(i,n,`${o}.${r}`):(void 0!==n&&(i.value=n),i.envLink&&("boolean"===i.type?i.value=P([process.env[i.envLink],i.value].find((e=>e||"false"===e))):"number"===i.type?(s=+process.env[i.envLink],i.value=s>=0?s:i.value):i.type.indexOf("]")>=0&&process.env[i.envLink]?i.value=process.env[i.envLink].split(","):i.value=process.env[i.envLink]||i.value))}}))}function Ue(e){let t={};for(const[o,r]of Object.entries(e))t[o]=Object.prototype.hasOwnProperty.call(r,"value")?r.value:Ue(r);return t}let We=!1;const Fe=async(t,o)=>{_(4,"[chart] Starting exporting process.");const r=((e,t={})=>{let o={};return e.svg?(o=$(t),o.export.type=e.type||e.export.type,o.export.scale=e.scale||e.export.scale,o.export.outfile=e.outfile||e.export.outfile,o.payload={svg:e.svg}):o=je(t,e,k),o.export.outfile=o.export?.outfile||`chart.${o.export?.type||"png"}`,o})(t,Ne()),i=r.export;return r.payload?.svg&&""!==r.payload.svg?De(r.payload.svg.trim(),r,o):i.infile&&i.infile.length?(_(4,"[chart] Attempting to export from an input file."),e.readFile(i.infile,"utf8",((e,t)=>e?_(1,`[chart] Error loading input file: ${e}.`):(r.export.instr=t,De(r.export.instr.trim(),r,o))))):i.instr&&""!==i.instr||i.options&&""!==i.options?(_(4,"[chart] Attempting to export from a raw input."),P(r.customCode?.allowCodeExecution)?Me(r,o):"string"==typeof i.instr?De(i.instr.trim(),r,o):Ge(r,i.instr||i.options,o)):(_(1,C(`[chart] No input specified.\n      ${JSON.stringify(i,void 0,"  ")}.`)),o&&o(!1,{error:!0,message:"No input specified."}))},qe=e=>{const{chart:t,exporting:o}=e.export?.options||A(e.export?.instr),r=A(e.export?.globalOptions);let i=e.export?.scale||o?.scale||r?.exporting?.scale||e.export?.defaultScale||1;return i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const o=Math.pow(10,t||0);return Math.round(+e*o)/o})(i,2),{height:e.export?.height||o?.sourceHeight||t?.height||r?.exporting?.sourceHeight||r?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||o?.sourceWidth||t?.width||r?.exporting?.sourceWidth||r?.chart?.width||e.export?.defaultWidth||600,scale:i}},Ge=(t,o,r,i)=>{let{export:n,customCode:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:We;if(s){if("string"==typeof t.customCode.resources)t.customCode.resources=I(t.customCode.resources,P(t.customCode.allowFileResources));else if(!t.customCode.resources)try{const o=e.readFileSync("resources.json","utf8");t.customCode.resources=I(o,P(t.customCode.allowFileResources))}catch(e){_(3,"[chart] The default resources.json file not found.")}}else s=t.customCode={};if(!a&&s){if(s.callback||s.resources||s.customCode)return r&&r(!1,{error:!0,message:C("The callback, resources and customCode have been disabled for this\n            server.")});s.callback=!1,s.resources=!1,s.customCode=!1}if(o&&(o.chart=o.chart||{},o.exporting=o.exporting||{},o.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=O(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=A(e.readFileSync(n[t],"utf8"),!0):n[t]=A(n[t],!0))}catch(e){n[t]={},_(1,`[chart] The ${t} not found.`)}})),s.allowCodeExecution&&(s.customCode=U(s.customCode,s.allowFileResources)),s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){_(2,`[chart] Error loading callback: ${e}.`),s.callback=!1}else s.callback=!1;t.export={...t.export,...qe(t)},Ee(n.strInj||o||i,t).then((e=>r(e))).catch((e=>(_(0,"[chart] When posting work:",e),r(!1,e))))},Me=(e,t)=>{try{let o,r=e.export.instr||e.export.options;return"string"!=typeof r&&(o=r=N(r,e.customCode?.allowCodeExecution)),o=r.replaceAll(/\t|\n|\r/g,"").trim(),";"===o[o.length-1]&&(o=o.substring(0,o.length-1)),e.export.strInj=o,Ge(e,!1,t)}catch(o){const r=C(`Malformed input detected for ${e.export?.requestId||"?"}:\n      Please make sure that your JSON/JavaScript options\n      are sent using the "options" attribute, and that if you're using\n      SVG, it is unescaped.`);return _(1,r),t&&t(!1,JSON.stringify({error:!0,message:r}))}},De=(e,t,o)=>{const{allowCodeExecution:r}=t.customCode;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return _(4,"[chart] Parsing input as SVG."),Ge(t,!1,o,e);try{const r=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return Ge(t,r,o)}catch(e){return P(r)?Me(t,o):o&&o(!1,{error:!0,message:C("Only JSON configurations and SVG is allowed for this server. If\n            this is your server, JavaScript exporting can be enabled by starting\n            the server with the --allowCodeExecution flag.")})}},Ve={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let ze=0;const Je=[],Be=[],Ke=(e,t,o,r)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:l}=r;return e.some((e=>{if(e){let r=e(t,o,n,s,a,l);return void 0!==r&&!0!==r&&(i=r),!0}})),i},Xe=(e,t)=>{(()=>{const e=process.hrtime.bigint()})();const o=Ne(),r=V.getClient(),i=e.body,n=++ze,s=m.v4().replace(/-/g,"");let a=O(i.type);if(!i)return t.status(400).send(C("Body is required. Sending a body? Make sure your Content-type header\n        is correct. Accepted is application/json and multipart/form-data."));let l=A(i.infile||i.options||i.data);if(!l&&!i.svg)return _(2,C(`Request ${s} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Check your payload.`)),t.status(400).send(C("No correct chart data found. Please make sure you are using\n        application/json or multipart/form-data headers, and that the chart\n        data is in the 'infile', 'options' or 'data' attribute if sending\n        JSON or in the 'svg' if sending SVG."));let c=!1;if(c=Ke(Je,e,t,{id:n,uniqueId:s,type:a,body:i}),!0!==c)return t.send(c);let p=!1;e.socket.on("close",(()=>{p=!0})),_(4,`[export] Got an incoming HTTP request ${s}.`),i.constr="string"==typeof i.constr&&i.constr||"chart";const u={export:{instr:l,type:a,constr:i.constr[0].toLowerCase()+i.constr.substr(1),height:i.height,width:i.width,scale:i.scale||o.export.scale,globalOptions:A(i.globalOptions,!0),themeOptions:A(i.themeOptions,!0)},customCode:{allowCodeExecution:We,allowFileResources:!1,resources:A(i.resources,!0),callback:i.callback,customCode:i.customCode}};l&&(u.export.instr=N(l,u.customCode.allowCodeExecution));const h=je(o,u);if(h.export.options=l,h.payload={svg:i.svg||!1,b64:i.b64||!1,dataOptions:A(i.dataOptions,!0),noDownload:i.noDownload||!1,requestId:s},i.svg&&(g=h.payload.svg,["localhost","(10).(.*).(.*).(.*)","(127).(.*).(.*).(.*)","(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)","(192).(168).(.*).(.*)"].some((e=>g.match(`xlink:href="(?:(http://|https://))?${e}`)))))return t.status(400).send("SVG potentially contain at least one forbidden URL in xlink:href element.");var g;r&&r.readyState===d.WebSocket.OPEN&&r.send(JSON.stringify(h)),Fe(h,((o,r)=>(e.socket.removeAllListeners("close"),p?_(3,C("[export] The client closed the connection before the chart was done\n          processing.")):r?(_(1,C(`[export] Work: ${s} could not be completed, sending:\n          ${r}`)),t.status(400).send(r.message)):o&&o.data?(a=o.options.export.type,Ke(Be,e,t,{id:n,body:o.data}),o.data?i.b64?"pdf"===a?t.send(Buffer.from(o.data,"utf8").toString("base64")):t.send(o.data):(t.header("Content-Type",Ve[a]||"image/png"),i.noDownload||t.attachment(`${e.params.filename||"chart"}.${a||"png"}`),"svg"===a?t.send(o.data):t.send(Buffer.from(o.data,"base64"))):void 0):(_(1,C(`[export] Unexpected return from chart generation, please check your\n          data Request: ${s} is ${o.data}.`)),t.status(400).send("Unexpected return from chart generation, please check your data.")))))};const Ye=i();Ye.disable("x-powered-by"),Ye.use(r());const Ze=l.memoryStorage(),Qe=l({storage:Ze,limits:{fieldsSize:"50MB"}});Ye.use(Qe.any()),Ye.use(o.json({limit:"50mb"})),Ye.use(o.urlencoded({extended:!0,limit:"50mb"})),Ye.use(o.urlencoded({extended:!1,limit:"50mb"}));const et=e=>_(1,`[server] Socket error: ${e}`),tt=e=>{e.on("clientError",et),e.on("error",et),e.on("connection",(e=>e.on("error",(e=>et(e)))))},ot=async o=>{if(!o.enable)return!1;if(!o.ssl.force){const e=n.createServer(Ye);tt(e),e.listen(o.port,o.host),_(3,`[server] Started HTTP server on ${o.host}:${o.port}.`)}if(o.ssl.enable){let r,i;try{r=await e.promises.readFile(t.posix.join(o.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(o.ssl.certPath,"server.crt"),"utf8")}catch(e){_(1,`[server] Unable to load key/certificate from ${o.ssl.certPath}.`)}if(r&&i){const e=s.createServer({key:r,cert:i},Ye);tt(e),e.listen(o.ssl.port,o.host),_(3,`[server] Started HTTPS server on ${o.host}:${o.ssl.port}.`)}}o.rateLimiting&&o.rateLimiting.enable&&![0,NaN].includes(o.rateLimiting.maxRequests)&&W(Ye,o.rateLimiting),Ye.use(i.static(t.posix.join(L,"public"))),(e=>{!!e&&e.get("/health",((e,t)=>{t.send({status:"OK",bootTime:Ae,uptime:Math.floor(((new Date).getTime()-Ae.getTime())/1e3/60)+" minutes",version:Ie,highchartsVersion:oe(),averageProcessingTime:Ce(),performedExports:Oe(),failedExports:Le(),exportAttempts:_e(),sucessRatio:Oe()/_e()*100,pool:He()})}))})(Ye),(e=>{e.post("/",Xe),e.post("/:filename",Xe)})(Ye),(e=>{!!e&&e.get("/",((e,o)=>{o.sendFile(t.join(L,"public","index.html"))}))})(Ye),(e=>{!!e&&e.post("/change_hc_version/:newVersion",(async(e,t)=>{const o=process.env.HIGHCHARTS_ADMIN_TOKEN;if(!o||!o.length)return t.send({error:!0,message:"Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set"});const r=e.get("hc-auth");if(!r||r!==o)return t.send({error:!0,message:"Invalid or missing token: set token in the hc-auth header"});const i=e.params.newVersion;if(i){try{await ee(i)}catch(e){t.send({error:!0,message:e})}t.send({version:oe()})}else t.send({error:!0,message:"No new version supplied"})}))})(Ye),1==q.WS_ENABLE&&V.connect(q.WS_URL,{rejectUnauthorized:q.WS_REJECT_UNAUTHORIZED,headers:{auth:a.sign({success:"success"},q.WS_SECRET,{algorithm:"HS256",expiresIn:"5m"})}})};var rt={startServer:ot,getExpress:()=>i,getApp:()=>Ye,use:(e,...t)=>{Ye.use(e,...t)},get:(e,...t)=>{Ye.get(e,...t)},post:(e,...t)=>{Ye.post(e,...t)},enableRateLimiting:e=>W(Ye,e)},it={log:_,mapToNewConfig:e=>{const t={};for(const[o,r]of Object.entries(e)){const e=E[o]?E[o].split("."):[];e.reduce(((t,o,i)=>t[o]=e.length-1===i?r:t[o]||{}),t)}return t},setOptions:(t,o)=>(o?.length&&($e=function(t){const o=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(o>-1&&t[o+1]){const r=t[o+1];try{if(r&&r.endsWith(".json"))return JSON.parse(e.readFileSync(r))}catch(e){_(1,`[config] Unable to load config from the ${r}: ${e}`)}}return{}}(o)),Pe(x,$e),$e=Ue(x),t&&($e=je($e,t,k)),o?.length&&($e=function(e,t,o){for(let o=0;o<t.length;o++){let r=t[o].replace(/-/g,"");const i=E[r]?E[r].split("."):[];i.reduce(((n,s,a)=>(i.length-1===a&&void 0!==n[s]&&(t[++o]?n[s]=t[o]||n[s]:(console.log(`Missing argument value for ${r}!`.red,"\n"),e=j())),n[s])),e)}return e}($e,o)),$e),singleExport:t=>{t.export.instr=t.export.instr||t.export.options,Fe(t,((t,o)=>{o&&(_(1,`[cli] ${o.message}`),process.exit(1));const{outfile:r,type:i}=t.options.export;e.writeFileSync(r||`chart.${i}`,"svg"!==i?Buffer.from(t.data,"base64"):t.data),ke()}))},startExport:Fe,batchExport:t=>{const o=[];for(let r of t.export.batch.split(";"))r=r.split("="),2===r.length&&o.push(new Promise(((o,i)=>{Fe({...t,export:{...t.export,infile:r[0],outfile:r[1]}},((t,r)=>{if(r)return i(r);e.writeFileSync(t.options.export.outfile,Buffer.from(t.data,"base64")),o()}))})));Promise.all(o).then((()=>{ke()})).catch((e=>{_(1,`[chart] Error encountered during batch export: ${e}`),ke()}))},server:rt,startServer:ot,killPool:ke,initPool:async(e={})=>{var t,o;return t=e.customCode&&e.customCode.allowCodeExecution,We=P(t),(o=e.logging&&parseInt(e.logging.level))>=0&&o<=H.levelsDesc.length&&(H.level=o),e.logging&&e.logging.dest&&((e,t)=>{if(H={...H,dest:e||H.dest,file:t||H.file,toFile:!0},0===H.dest.length)return _(1,"[logger] File logging init: no path supplied.");H.dest.endsWith("/")||(H.dest+="/")})(e.logging.dest,e.logging.file||"highcharts-export-server.log"),await Q(e.highcharts||{version:"latest"}),await xe({pool:e.pool||{initialWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e}};module.exports=it;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi9saWIvc2NoZW1hcy9jb25maWcuanMiLCIuLi9saWIvbG9nZ2VyLmpzIiwiLi4vbGliL3V0aWxzLmpzIiwiLi4vbGliL3NlcnZlci9yYXRlX2xpbWl0LmpzIiwiLi4vbGliL2VudkNvbmZpZy5qcyIsIi4uL2xpYi9zZXJ2ZXIvd2Vic29ja2V0LmpzIiwiLi4vbGliL2ZldGNoLmpzIiwiLi4vbGliL2NhY2hlLmpzIiwiLi4vbGliL2Jyb3dzZXIuanMiLCIuLi9saWIvZXhwb3J0LmpzIiwiLi4vbGliL2JlbmNobWFyay5qcyIsIi4uL3RlbXBsYXRlcy9zdmdfZXhwb3J0L3N2Z19leHBvcnQuanMiLCIuLi9saWIvcG9vbC5qcyIsIi4uL2xpYi9zZXJ2ZXIvcm91dGVzL2hlYWx0aC5qcyIsIi4uL2xpYi9jb25maWcuanMiLCIuLi9saWIvY2hhcnQuanMiLCIuLi9saWIvc2VydmVyL3JvdXRlcy9leHBvcnQuanMiLCIuLi9saWIvc2VydmVyL3NlcnZlci5qcyIsIi4uL2xpYi9zZXJ2ZXIvcm91dGVzL3VpLmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvY2hhbmdlX2hjX3ZlcnNpb24uanMiLCIuLi9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjMsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vLyBMb2FkIC5lbnYgaW50byBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xyXG5cclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuLy8gVGhpcyBpcyB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgb3B0aW9ucyBhbmQgdGhlaXIgZGVmYXVsdCB2YWx1ZXMsXHJcbi8vIGFsc28gZnJvbSB0aGUgLmVudiBmaWxlIGlmIG9uZSBleGlzdHNcclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgcHVwcGV0ZWVyOiB7XHJcbiAgICBhcmdzOiB7XHJcbiAgICAgIHZhbHVlOiBbXSxcclxuICAgICAgdHlwZTogJ3N0cmluZ1tdJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdBcnJheSBvZiBhcmd1bWVudHMgdG8gc2VuZCB0byBwdXBwZXRlZXIuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgaGlnaGNoYXJ0czoge1xyXG4gICAgdmVyc2lvbjoge1xyXG4gICAgICB2YWx1ZTogJ2xhdGVzdCcsXHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1ZFUlNJT04nLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIaWdoY2hhcnRzIHZlcnNpb24gdG8gdXNlLidcclxuICAgIH0sXHJcbiAgICBjZG5VUkw6IHtcclxuICAgICAgdmFsdWU6ICdodHRwczovL2NvZGUuaGlnaGNoYXJ0cy5jb20vJyxcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfQ0ROJyxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIENETiBVUkwgb2YgSGlnaGNoYXJ0cyBzY3JpcHRzIHRvIHVzZS4nXHJcbiAgICB9LFxyXG4gICAgY29yZVNjcmlwdHM6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfQ09SRV9TQ1JJUFRTJyxcclxuICAgICAgdmFsdWU6IFsnaGlnaGNoYXJ0cycsICdoaWdoY2hhcnRzLW1vcmUnLCAnaGlnaGNoYXJ0cy0zZCddLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nW10nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0hpZ2hjaGFydHMgY29yZSBzY3JpcHRzIHRvIGZldGNoLidcclxuICAgIH0sXHJcbiAgICBtb2R1bGVzOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX01PRFVMRVMnLFxyXG4gICAgICB2YWx1ZTogW1xyXG4gICAgICAgICdzdG9jaycsXHJcbiAgICAgICAgJ21hcCcsXHJcbiAgICAgICAgJ2dhbnR0JyxcclxuICAgICAgICAnZXhwb3J0aW5nJyxcclxuICAgICAgICAnZXhwb3J0LWRhdGEnLFxyXG4gICAgICAgICdwYXJhbGxlbC1jb29yZGluYXRlcycsXHJcbiAgICAgICAgJ2FjY2Vzc2liaWxpdHknLFxyXG4gICAgICAgICdhbm5vdGF0aW9ucy1hZHZhbmNlZCcsXHJcbiAgICAgICAgJ2Jvb3N0LWNhbnZhcycsXHJcbiAgICAgICAgJ2Jvb3N0JyxcclxuICAgICAgICAnZGF0YScsXHJcbiAgICAgICAgJ2RyYWdnYWJsZS1wb2ludHMnLFxyXG4gICAgICAgICdzdGF0aWMtc2NhbGUnLFxyXG4gICAgICAgICdicm9rZW4tYXhpcycsXHJcbiAgICAgICAgJ2hlYXRtYXAnLFxyXG4gICAgICAgICd0aWxlbWFwJyxcclxuICAgICAgICAndGltZWxpbmUnLFxyXG4gICAgICAgICd0cmVlbWFwJyxcclxuICAgICAgICAnaXRlbS1zZXJpZXMnLFxyXG4gICAgICAgICdkcmlsbGRvd24nLFxyXG4gICAgICAgICdoaXN0b2dyYW0tYmVsbGN1cnZlJyxcclxuICAgICAgICAnYnVsbGV0JyxcclxuICAgICAgICAnZnVubmVsJyxcclxuICAgICAgICAnZnVubmVsM2QnLFxyXG4gICAgICAgICdweXJhbWlkM2QnLFxyXG4gICAgICAgICduZXR3b3JrZ3JhcGgnLFxyXG4gICAgICAgICdwYXJldG8nLFxyXG4gICAgICAgICdwYXR0ZXJuLWZpbGwnLFxyXG4gICAgICAgICdwaWN0b3JpYWwnLFxyXG4gICAgICAgICdwcmljZS1pbmRpY2F0b3InLFxyXG4gICAgICAgICdzYW5rZXknLFxyXG4gICAgICAgICdhcmMtZGlhZ3JhbScsXHJcbiAgICAgICAgJ2RlcGVuZGVuY3ktd2hlZWwnLFxyXG4gICAgICAgICdzZXJpZXMtbGFiZWwnLFxyXG4gICAgICAgICdzb2xpZC1nYXVnZScsXHJcbiAgICAgICAgJ3NvbmlmaWNhdGlvbicsXHJcbiAgICAgICAgJ3N0b2NrLXRvb2xzJyxcclxuICAgICAgICAnc3RyZWFtZ3JhcGgnLFxyXG4gICAgICAgICdzdW5idXJzdCcsXHJcbiAgICAgICAgJ3ZhcmlhYmxlLXBpZScsXHJcbiAgICAgICAgJ3Zhcml3aWRlJyxcclxuICAgICAgICAndmVjdG9yJyxcclxuICAgICAgICAndmVubicsXHJcbiAgICAgICAgJ3dpbmRiYXJiJyxcclxuICAgICAgICAnd29yZGNsb3VkJyxcclxuICAgICAgICAneHJhbmdlJyxcclxuICAgICAgICAnbm8tZGF0YS10by1kaXNwbGF5JyxcclxuICAgICAgICAnZHJhZy1wYW5lcycsXHJcbiAgICAgICAgJ2RlYnVnZ2VyJyxcclxuICAgICAgICAnZHVtYmJlbGwnLFxyXG4gICAgICAgICdsb2xsaXBvcCcsXHJcbiAgICAgICAgJ2N5bGluZGVyJyxcclxuICAgICAgICAnb3JnYW5pemF0aW9uJyxcclxuICAgICAgICAnZG90cGxvdCcsXHJcbiAgICAgICAgJ21hcmtlci1jbHVzdGVycycsXHJcbiAgICAgICAgJ2hvbGxvd2NhbmRsZXN0aWNrJyxcclxuICAgICAgICAnaGVpa2luYXNoaSdcclxuICAgICAgXSxcclxuICAgICAgdHlwZTogJ3N0cmluZ1tdJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIaWdoY2hhcnRzIG1vZHVsZXMgdG8gZmV0Y2guJ1xyXG4gICAgfSxcclxuICAgIGluZGljYXRvcnM6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfSU5ESUNBVE9SUycsXHJcbiAgICAgIHZhbHVlOiBbJ2luZGljYXRvcnMtYWxsJ10sXHJcbiAgICAgIHR5cGU6ICdzdHJpbmdbXScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaGNoYXJ0cyBpbmRpY2F0b3JzIHRvIGZldGNoLidcclxuICAgIH0sXHJcbiAgICBzY3JpcHRzOiB7XHJcbiAgICAgIHZhbHVlOiBbXHJcbiAgICAgICAgJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21vbWVudC5qcy8yLjI5LjQvbW9tZW50Lm1pbi5qcycsXHJcbiAgICAgICAgJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21vbWVudC10aW1lem9uZS8wLjUuMzQvbW9tZW50LXRpbWV6b25lLXdpdGgtZGF0YS5taW4uanMnXHJcbiAgICAgIF0sXHJcbiAgICAgIHR5cGU6ICdzdHJpbmdbXScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBZGRpdGlvbmFsIGRpcmVjdCBzY3JpcHRzL29wdGlvbmFsIGRlcGVuZGVuY2llcyAoZS5nLiBtb21lbnQuanMpLidcclxuICAgIH0sXHJcbiAgICBmb3JjZUZldGNoOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX0ZPUkNFX0ZFVENIJyxcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdTaG91bGQgYWxsIHRoZSBzY3JpcHRzIGJlIHJlZmV0Y2hlZCBhZnRlciByZXJ1bm5pbmcgdGhlIHNlcnZlci4nXHJcbiAgICB9XHJcbiAgfSxcclxuICBleHBvcnQ6IHtcclxuICAgIGluZmlsZToge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGlucHV0IGZpbGUgbmFtZSBhbG9uZyB3aXRoIGEgdHlwZSAoanNvbiBvciBzdmcpLiBJdCBjYW4gYmUgYSBjb3JyZWN0IEpTT04gb3IgU1ZHIGZpbGUuJ1xyXG4gICAgfSxcclxuICAgIGluc3RyOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBbiBpbnB1dCBpbiBhIGZvcm0gb2YgYSBzdHJpbmdpZmllZCBKU09OIG9yIFNWRyBmaWxlLiBPdmVycmlkZXMgdGhlIC0taW5maWxlLidcclxuICAgIH0sXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnQW4gYWxpYXMgZm9yIHRoZSAtLWluc3RyIG9wdGlvbi4nXHJcbiAgICB9LFxyXG4gICAgb3V0ZmlsZToge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIG91dHB1dCBmaWxlbmFtZSBhbG9uZyB3aXRoIGEgdHlwZSAoanBlZywgcG5nLCBwZGYgb3Igc3ZnKS4gSWdub3JlcyB0aGUgLS10eXBlIGZsYWcuJ1xyXG4gICAgfSxcclxuICAgIHR5cGU6IHtcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9ERUZBVUxUX1RZUEUnLFxyXG4gICAgICB2YWx1ZTogJ3BuZycsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGZvcm1hdCBvZiB0aGUgZmlsZSB0byBleHBvcnQgdG8uIENhbiBiZSBqcGVnLCBwbmcsIHBkZiBvciBzdmcuJ1xyXG4gICAgfSxcclxuICAgIGNvbnN0cjoge1xyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0RFRkFVTFRfQ09OU1RSJyxcclxuICAgICAgdmFsdWU6ICdjaGFydCcsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGNvbnN0cnVjdG9yIHRvIHVzZS4gQ2FuIGJlIGNoYXJ0LCBzdG9ja0NoYXJ0LCBtYXBDaGFydCBvciBnYW50dENoYXJ0LidcclxuICAgIH0sXHJcbiAgICBkZWZhdWx0SGVpZ2h0OiB7XHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9IRUlHSFQnLFxyXG4gICAgICB2YWx1ZTogNDAwLFxyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1RoZSBkZWZhdWx0IGhlaWdodCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQuIFVzZWQgd2hlbiBub3QgZm91bmQgYW55IHZhbHVlIHNldC4nXHJcbiAgICB9LFxyXG4gICAgZGVmYXVsdFdpZHRoOiB7XHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9XSURUSCcsXHJcbiAgICAgIHZhbHVlOiA2MDAsXHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGRlZmF1bHQgd2lkdGggb2YgdGhlIGV4cG9ydGVkIGNoYXJ0LiBVc2VkIHdoZW4gbm90IGZvdW5kIGFueSB2YWx1ZSBzZXQuJ1xyXG4gICAgfSxcclxuICAgIGRlZmF1bHRTY2FsZToge1xyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0RFRkFVTFRfU0NBTEUnLFxyXG4gICAgICB2YWx1ZTogMSxcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdUaGUgZGVmYXVsdCBzY2FsZSBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQuIFJhbmdlcyBiZXR3ZWVuIDEgYW5kIDUuJ1xyXG4gICAgfSxcclxuICAgIGhlaWdodDoge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGRlZmF1bHQgaGVpZ2h0IG9mIHRoZSBleHBvcnRlZCBjaGFydC4gT3ZlcnJpZGVzIHRoZSBvcHRpb24gaW4gdGhlIGNoYXJ0IHNldHRpbmdzLidcclxuICAgIH0sXHJcbiAgICB3aWR0aDoge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIHdpZHRoIG9mIHRoZSBleHBvcnRlZCBjaGFydC4gT3ZlcnJpZGVzIHRoZSBvcHRpb24gaW4gdGhlIGNoYXJ0IHNldHRpbmdzLidcclxuICAgIH0sXHJcbiAgICBzY2FsZToge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBzY2FsZSBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQuIFJhbmdlcyBiZXR3ZWVuIDEgYW5kIDUuJ1xyXG4gICAgfSxcclxuICAgIGdsb2JhbE9wdGlvbnM6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0Egc3RyaW5naWZpZWQgSlNPTiBvciBhIGZpbGVuYW1lIHdpdGggb3B0aW9ucyB0byBiZSBwYXNzZWQgaW50byB0aGUgSGlnaGNoYXJ0cy5zZXRPcHRpb25zLidcclxuICAgIH0sXHJcbiAgICB0aGVtZU9wdGlvbnM6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0Egc3RyaW5naWZpZWQgSlNPTiBvciBhIGZpbGVuYW1lIHdpdGggdGhlbWUgb3B0aW9ucyB0byBiZSBwYXNzZWQgaW50byB0aGUgSGlnaGNoYXJ0cy5zZXRPcHRpb25zLidcclxuICAgIH0sXHJcbiAgICBiYXRjaDoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnU3RhcnRzIGEgYmF0Y2ggam9iLiBBIHN0cmluZyB0aGF0IGNvbnRhaW5zIGlucHV0L291dHB1dCBwYWlyczogXCJpbj1vdXQ7aW49b3V0Oy4uXCIuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgY3VzdG9tQ29kZToge1xyXG4gICAgYWxsb3dDb2RlRXhlY3V0aW9uOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX0FMTE9XX0NPREVfRVhFQ1VUSU9OJyxcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdJZiBzZXQgdG8gdHJ1ZSwgYWxsb3cgZm9yIHRoZSBleGVjdXRpb24gb2YgYXJiaXRyYXJ5IGNvZGUgd2hlbiBleHBvcnRpbmcuJ1xyXG4gICAgfSxcclxuICAgIGFsbG93RmlsZVJlc291cmNlczoge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19BTExPV19GSUxFX1JFU09VUkNFUycsXHJcbiAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBbGxvdyBpbmplY3RpbmcgcmVzb3VyY2VzIGZyb20gdGhlIGZpbGVzeXN0ZW0uIEhhcyBubyBlZmZlY3Qgd2hlbiBydW5uaW5nIGFzIGEgc2VydmVyLidcclxuICAgIH0sXHJcbiAgICBjdXN0b21Db2RlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBiZWZvcmUgY2hhcnQgaW5pdGlhbGl6YXRpb24uIENhbiBiZSBhIGZpbGVuYW1lIHdpdGggdGhlIGpzIGV4dGVuc2lvbi4nXHJcbiAgICB9LFxyXG4gICAgY2FsbGJhY2s6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdBIEphdmFTY3JpcHQgZmlsZSB3aXRoIGEgZnVuY3Rpb24gdG8gcnVuIG9uIGNvbnN0cnVjdGlvbi4nXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBbiBhZGRpdGlvbmFsIHJlc291cmNlIGluIGEgZm9ybSBvZiBzdHJpbmdpZmllZCBKU09OLiBJdCBjYW4gY29udGFpbiBmaWxlcywganMgYW5kIGNzcyBzZWN0aW9ucy4nXHJcbiAgICB9LFxyXG4gICAgbG9hZENvbmZpZzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0EgZmlsZSB0aGF0IGNvbnRhaW5zIGEgcHJlLWRlZmluZWQgY29uZmlnIHRvIHVzZS4nXHJcbiAgICB9LFxyXG4gICAgY3JlYXRlQ29uZmlnOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBbGxvd3MgdG8gc2V0IG9wdGlvbnMgdGhyb3VnaCBhIHByb21wdCBhbmQgc2F2ZSBpbiBhIHByb3ZpZGVkIGNvbmZpZyBmaWxlLidcclxuICAgIH1cclxuICB9LFxyXG4gIHNlcnZlcjoge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1NFUlZFUl9FTkFCTEUnLFxyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZVNlcnZlcicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSWYgc2V0IHRvIHRydWUsIHN0YXJ0cyBhIHNlcnZlciBvbiAwLjAuMC4wLidcclxuICAgIH0sXHJcbiAgICBob3N0OiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1NFUlZFUl9IT1NUJyxcclxuICAgICAgdmFsdWU6ICcwLjAuMC4wJyxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdUaGUgaG9zdG5hbWUgb2YgdGhlIHNlcnZlci4gQWxzbyBzdGFydHMgYSBzZXJ2ZXIgbGlzdGVuaW5nIG9uIHRoZSBzdXBwbGllZCBob3N0bmFtZS4nXHJcbiAgICB9LFxyXG4gICAgcG9ydDoge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19TRVJWRVJfUE9SVCcsXHJcbiAgICAgIHZhbHVlOiA3ODAxLFxyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaGUgcG9ydCB0byB1c2UgZm9yIHRoZSBzZXJ2ZXIuIERlZmF1bHRzIHRvIDc4MDEuJ1xyXG4gICAgfSxcclxuICAgIHNzbDoge1xyXG4gICAgICBlbmFibGU6IHtcclxuICAgICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19TRVJWRVJfU1NMX0VOQUJMRScsXHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgICBjbGlOYW1lOiAnZW5hYmxlU3NsJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZXMgdGhlIFNTTCBwcm90b2NvbC4nXHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcmNlOiB7XHJcbiAgICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfU0VSVkVSX1NTTF9GT1JDRScsXHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgICBjbGlOYW1lOiAnc3NsRm9yY2VkJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICdJZiBzZXQgdG8gdHJ1ZSwgZm9yY2VzIHRoZSBzZXJ2ZXIgdG8gb25seSBzZXJ2ZSBvdmVyIEhUVFBTLidcclxuICAgICAgfSxcclxuICAgICAgcG9ydDoge1xyXG4gICAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1NFUlZFUl9TU0xfUE9SVCcsXHJcbiAgICAgICAgdmFsdWU6IDQ0MyxcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICBjbGlOYW1lOiAnc3NsUG9ydCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgcG9ydCBvbiB3aGljaCB0byBydW4gdGhlIFNTTCBzZXJ2ZXIuJ1xyXG4gICAgICB9LFxyXG4gICAgICBjZXJ0UGF0aDoge1xyXG4gICAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1NFUlZFUl9TU0xfQ0VSVF9QQVRIJyxcclxuICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgcGF0aCB0byB0aGUgU1NMIGNlcnRpZmljYXRlL2tleS4nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByYXRlTGltaXRpbmc6IHtcclxuICAgICAgZW5hYmxlOiB7XHJcbiAgICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUkFURV9MSU1JVF9FTkFCTEUnLFxyXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgICAgY2xpTmFtZTogJ2VuYWJsZVJhdGVMaW1pdGluZycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIHJhdGUgbGltaXRpbmcuJ1xyXG4gICAgICB9LFxyXG4gICAgICBtYXhSZXF1ZXN0czoge1xyXG4gICAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1JBVEVfTElNSVRfTUFYJyxcclxuICAgICAgICB2YWx1ZTogMTAsXHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdNYXggcmVxdWVzdHMgYWxsb3dlZCBpbiBhIG9uZSBtaW51dGUuJ1xyXG4gICAgICB9LFxyXG4gICAgICB3aW5kb3c6IHtcclxuICAgICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19SQVRFX0xJTUlUX1dJTkRPVycsXHJcbiAgICAgICAgdmFsdWU6IDEsXHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgdGltZSB3aW5kb3cgaW4gbWludXRlcyBmb3IgcmF0ZSBsaW1pdGluZy4nXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlbGF5OiB7XHJcbiAgICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUkFURV9MSU1JVF9ERUxBWScsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAnVGhlIGFtb3VudCB0byBkZWxheSBlYWNoIHN1Y2Nlc3NpdmUgcmVxdWVzdCBiZWZvcmUgaGl0dGluZyB0aGUgbWF4LidcclxuICAgICAgfSxcclxuICAgICAgdHJ1c3RQcm94eToge1xyXG4gICAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1JBVEVfTElNSVRfVFJVU1RfUFJPWFknLFxyXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdTZXQgdGhpcyB0byB0cnVlIGlmIGJlaGluZCBhIGxvYWQgYmFsYW5jZXIuJ1xyXG4gICAgICB9LFxyXG4gICAgICBza2lwS2V5OiB7XHJcbiAgICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUkFURV9MSU1JVF9TS0lQX0tFWScsXHJcbiAgICAgICAgdmFsdWU6ICcnLFxyXG4gICAgICAgIHR5cGU6ICdudW1iZXJ8c3RyaW5nJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICdBbGxvd3MgYnlwYXNzaW5nIHRoZSByYXRlIGxpbWl0ZXIgYW5kIHNob3VsZCBiZSBwcm92aWRlZCB3aXRoIHNraXBUb2tlbiBhcmd1bWVudC4nXHJcbiAgICAgIH0sXHJcbiAgICAgIHNraXBUb2tlbjoge1xyXG4gICAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1JBVEVfTElNSVRfU0tJUF9UT0tFTicsXHJcbiAgICAgICAgdmFsdWU6ICcnLFxyXG4gICAgICAgIHR5cGU6ICdudW1iZXJ8c3RyaW5nJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICdBbGxvd3MgYnlwYXNzaW5nIHRoZSByYXRlIGxpbWl0ZXIgYW5kIHNob3VsZCBiZSBwcm92aWRlZCB3aXRoIHNraXBLZXkgYXJndW1lbnQuJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBwb29sOiB7XHJcbiAgICBpbml0aWFsV29ya2Vyczoge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19QT09MX01JTl9XT1JLRVJTJyxcclxuICAgICAgdmFsdWU6IDQsXHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBudW1iZXIgb2YgaW5pdGlhbCB3b3JrZXJzIHRvIHNwYXduLidcclxuICAgIH0sXHJcbiAgICBtYXhXb3JrZXJzOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1BPT0xfTUFYX1dPUktFUlMnLFxyXG4gICAgICB2YWx1ZTogOCxcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIG51bWJlciBvZiBtYXggd29ya2VycyB0byBzcGF3bi4nXHJcbiAgICB9LFxyXG4gICAgd29ya0xpbWl0OiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1BPT0xfV09SS19MSU1JVCcsXHJcbiAgICAgIHZhbHVlOiA0MCxcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdUaGUgcGllY2VzIG9mIHdvcmsgdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGJlZm9yZSByZXN0YXJ0aW5nIHByb2Nlc3MuJ1xyXG4gICAgfSxcclxuICAgIHF1ZXVlU2l6ZToge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19QT09MX1FVRVVFX1NJWkUnLFxyXG4gICAgICB2YWx1ZTogNSxcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHNpemUgb2YgdGhlIHJlcXVlc3Qgb3ZlcmZsb3cgcXVldWUuJ1xyXG4gICAgfSxcclxuICAgIHRpbWVvdXRUaHJlc2hvbGQ6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUE9PTF9USU1FT1VUJyxcclxuICAgICAgdmFsdWU6IDUwMDAsXHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJlZm9yZSB0aW1pbmcgb3V0LidcclxuICAgIH0sXHJcbiAgICBhY3F1aXJlVGltZW91dDoge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19QT09MX0FDUVVJUkVfVElNRU9VVCcsXHJcbiAgICAgIHZhbHVlOiA1MDAwLFxyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1RoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIGFjcXVpcmluZyBhIHJlc291cmNlLidcclxuICAgIH0sXHJcbiAgICByZWFwZXI6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUE9PTF9SRUFQRVJfRU5BQkxFJyxcclxuICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1doZXRoZXIgb3Igbm90IHRvIGV2aWN0IHdvcmtlcnMgYWZ0ZXIgYSBjZXJ0YWluIHRpbWUgcGVyaW9kLidcclxuICAgIH0sXHJcbiAgICBiZW5jaG1hcmtpbmc6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfUE9PTF9CRU5DSE1BUktJTkcnLFxyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGUgYmVuY2htYXJraW5nLidcclxuICAgIH0sXHJcbiAgICBsaXN0ZW5Ub1Byb2Nlc3NFeGl0czoge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19QT09MX0xJU1RFTl9UT19QUk9DRVNTX0VYSVRTJyxcclxuICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1NldCB0byBmYWxzZSBpbiBvcmRlciB0byBza2lwIGF0dGFjaGluZyBwcm9jZXNzLmV4aXQgaGFuZGxlcnMuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbG9nZ2luZzoge1xyXG4gICAgbGV2ZWw6IHtcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfTE9HX0xFVkVMJyxcclxuICAgICAgdmFsdWU6IDQsXHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBjbGlOYW1lOiAnbG9nTGV2ZWwnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGhlIGxvZyBsZXZlbCAoMDogc2lsZW50LCAxOiBlcnJvciwgMjogd2FybmluZywgMzogbm90aWNlLCA0OiB2ZXJib3NlKS4nXHJcbiAgICB9LFxyXG4gICAgZmlsZToge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19MT0dfRklMRScsXHJcbiAgICAgIHZhbHVlOiAnaGlnaGNoYXJ0cy1leHBvcnQtc2VydmVyLmxvZycsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICBjbGlOYW1lOiAnbG9nRmlsZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdBIG5hbWUgb2YgYSBsb2cgZmlsZS4gVGhlIC0tbG9nRGVzdCBhbHNvIG5lZWRzIHRvIGJlIHNldCB0byBlbmFibGUgZmlsZSBsb2dnaW5nLidcclxuICAgIH0sXHJcbiAgICBkZXN0OiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX0xPR19ERVNUJyxcclxuICAgICAgdmFsdWU6ICdsb2cvJyxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGNsaU5hbWU6ICdsb2dEZXN0JyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaGUgcGF0aCB0byBzdG9yZSBsb2cgZmlsZXMuIEFsc28gZW5hYmxlcyBmaWxlIGxvZ2dpbmcuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgdWk6IHtcclxuICAgIGVuYWJsZToge1xyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19VSV9FTkFCTEUnLFxyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZVVpJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIHRoZSBVSSBmb3IgdGhlIGV4cG9ydCBzZXJ2ZXIuJ1xyXG4gICAgfSxcclxuICAgIHJvdXRlOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1VJX1JPVVRFJyxcclxuICAgICAgdmFsdWU6ICcvJyxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGNsaU5hbWU6ICd1aVJvdXRlJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaGUgcm91dGUgdG8gYXR0YWNoIHRoZSBVSSB0by4nXHJcbiAgICB9XHJcbiAgfSxcclxuICBvdGhlcjoge1xyXG4gICAgbm9Mb2dvOiB7XHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX05PX0xPR08nLFxyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1NraXAgcHJpbnRpbmcgdGhlIGxvZ28gb24gYSBzdGFydHVwLiBXaWxsIGJlIHJlcGxhY2VkIGJ5IGEgc2ltcGxlIHRleHQuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgcGF5bG9hZDoge31cclxufTtcclxuXHJcbi8vIFRoZSBjb25maWcgZGVzY3JpcHRpb25zIG9iamVjdCBmb3IgdGhlIHByb21wdHMgZnVuY3Rpb25hbGl0eS4gSXQgY29udGFpbnNcclxuLy8gaW5mb3JtYXRpb24gbGlrZTpcclxuLy8gKiBUeXBlIG9mIGEgcHJvbXB0XHJcbi8vICogTmFtZSBvZiBhbiBvcHRpb25cclxuLy8gKiBTaG9ydCBkZXNjcmlwdGlvbiBvZiBhIGNob3NlbiBvcHRpb25cclxuLy8gKiBJbml0aWFsIHZhbHVlXHJcbmV4cG9ydCBjb25zdCBwcm9tcHRzQ29uZmlnID0ge1xyXG4gIHB1cHBldGVlcjogW1xyXG4gICAge1xyXG4gICAgICB0eXBlOiAnbGlzdCcsXHJcbiAgICAgIG5hbWU6ICdhcmdzJyxcclxuICAgICAgbWVzc2FnZTogJ1B1cHBldGVlciBhcmd1bWVudHMnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnB1cHBldGVlci5hcmdzLnZhbHVlLmpvaW4oJywnKSxcclxuICAgICAgc2VwYXJhdG9yOiAnLCdcclxuICAgIH1cclxuICBdLFxyXG4gIGhpZ2hjaGFydHM6IFtcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBuYW1lOiAndmVyc2lvbicsXHJcbiAgICAgIG1lc3NhZ2U6ICdIaWdoY2hhcnRzIHZlcnNpb24nLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmhpZ2hjaGFydHMudmVyc2lvbi52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBuYW1lOiAnY2RuVVJMJyxcclxuICAgICAgbWVzc2FnZTogJ1RoZSB1cmwgb2YgQ0ROJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5oaWdoY2hhcnRzLmNkblVSTC52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ211bHRpc2VsZWN0JyxcclxuICAgICAgbmFtZTogJ21vZHVsZXMnLFxyXG4gICAgICBtZXNzYWdlOiAnQXZhaWxhYmxlIG1vZHVsZXMnLFxyXG4gICAgICBpbnN0cnVjdGlvbnM6ICdTcGFjZTogU2VsZWN0IHNwZWNpZmljLCBBOiBTZWxlY3QgYWxsLCBFbnRlcjogQ29uZmlybS4nLFxyXG4gICAgICBjaG9pY2VzOiBkZWZhdWx0Q29uZmlnLmhpZ2hjaGFydHMubW9kdWxlcy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICBuYW1lOiAnc2NyaXB0cycsXHJcbiAgICAgIG1lc3NhZ2U6ICdDdXN0b20gc2NyaXB0cycsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuaGlnaGNoYXJ0cy5zY3JpcHRzLnZhbHVlLmpvaW4oJywnKSxcclxuICAgICAgc2VwYXJhdG9yOiAnLCdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0b2dnbGUnLFxyXG4gICAgICBuYW1lOiAnZm9yY2VGZXRjaCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdTaG91bGQgcmVmZXRjaCBhbGwgdGhlIHNjcmlwdHMgYWZ0ZXIgZWFjaCBzZXJ2ZXIgcmVydW4nLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmhpZ2hjaGFydHMuZm9yY2VGZXRjaC52YWx1ZVxyXG4gICAgfVxyXG4gIF0sXHJcbiAgZXhwb3J0OiBbXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICBuYW1lOiAndHlwZScsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgZGVmYXVsdCB0eXBlIG9mIGEgZmlsZSB0byBleHBvcnQgdG8nLFxyXG4gICAgICBoaW50OiBgRGVmYXVsdDogJHtkZWZhdWx0Q29uZmlnLmV4cG9ydC50eXBlLnZhbHVlfWAsXHJcbiAgICAgIGluaXRpYWw6IDAsXHJcbiAgICAgIGNob2ljZXM6IFsncG5nJywgJ2pwZWcnLCAncGRmJywgJ3N2ZyddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgbmFtZTogJ2NvbnN0cicsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgZGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgSGlnaGNoYXJ0cyB0byB1c2UnLFxyXG4gICAgICBoaW50OiBgRGVmYXVsdDogJHtkZWZhdWx0Q29uZmlnLmV4cG9ydC5jb25zdHIudmFsdWV9YCxcclxuICAgICAgaW5pdGlhbDogMCxcclxuICAgICAgY2hvaWNlczogWydjaGFydCcsICdzdG9ja0NoYXJ0JywgJ21hcENoYXJ0JywgJ2dhbnR0Q2hhcnQnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdkZWZhdWx0SGVpZ2h0JyxcclxuICAgICAgbWVzc2FnZTogJ1RoZSBkZWZhdWx0IGZhbGxiYWNrIGhlaWdodCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmV4cG9ydC5kZWZhdWx0SGVpZ2h0LnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgbmFtZTogJ2RlZmF1bHRXaWR0aCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgZGVmYXVsdCBmYWxsYmFjayB3aWR0aCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmV4cG9ydC5kZWZhdWx0V2lkdGgudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBuYW1lOiAnZGVmYXVsdFNjYWxlJyxcclxuICAgICAgbWVzc2FnZTogJ1RoZSBkZWZhdWx0IGZhbGxiYWNrIHNjYWxlIG9mIHRoZSBleHBvcnRlZCBjaGFydCcsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuZXhwb3J0LmRlZmF1bHRTY2FsZS52YWx1ZSxcclxuICAgICAgbWluOiAwLjEsXHJcbiAgICAgIG1heDogNVxyXG4gICAgfVxyXG4gIF0sXHJcbiAgY3VzdG9tQ29kZTogW1xyXG4gICAge1xyXG4gICAgICB0eXBlOiAndG9nZ2xlJyxcclxuICAgICAgbmFtZTogJ2FsbG93Q29kZUV4ZWN1dGlvbicsXHJcbiAgICAgIG1lc3NhZ2U6ICdBbGxvdyB0byBleGVjdXRlIGN1c3RvbSBjb2RlJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5jdXN0b21Db2RlLmFsbG93Q29kZUV4ZWN1dGlvbi52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RvZ2dsZScsXHJcbiAgICAgIG5hbWU6ICdhbGxvd0ZpbGVSZXNvdXJjZXMnLFxyXG4gICAgICBtZXNzYWdlOiAnQWxsb3cgZmlsZSByZXNvdXJjZXMnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmN1c3RvbUNvZGUuYWxsb3dGaWxlUmVzb3VyY2VzLnZhbHVlXHJcbiAgICB9XHJcbiAgXSxcclxuICBzZXJ2ZXI6IFtcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RvZ2dsZScsXHJcbiAgICAgIG5hbWU6ICdlbmFibGUnLFxyXG4gICAgICBtZXNzYWdlOiAnU3RhcnRzIGEgc2VydmVyIG9uIDAuMC4wLjAnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnNlcnZlci5lbmFibGUudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgbmFtZTogJ2hvc3QnLFxyXG4gICAgICBtZXNzYWdlOiAnQSBob3N0bmFtZSBvZiBhIHNlcnZlcicsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLmhvc3QudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBuYW1lOiAncG9ydCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdBIHBvcnQgb2YgYSBzZXJ2ZXInLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnNlcnZlci5wb3J0LnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAndG9nZ2xlJyxcclxuICAgICAgbmFtZTogJ3NzbC5lbmFibGUnLFxyXG4gICAgICBtZXNzYWdlOiAnRW5hYmxlIFNTTCBwcm90b2NvbCcsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnNzbC5lbmFibGUudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0b2dnbGUnLFxyXG4gICAgICBuYW1lOiAnc3NsLmZvcmNlJyxcclxuICAgICAgbWVzc2FnZTogJ0ZvcmNlIHRvIG9ubHkgc2VydmUgb3ZlciBIVFRQUycsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnNzbC5mb3JjZS52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdzc2wucG9ydCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdQb3J0IG9uIHdoaWNoIHRvIHJ1biB0aGUgU1NMIHNlcnZlcicsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnNzbC5wb3J0LnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgIG5hbWU6ICdzc2wuY2VydFBhdGgnLFxyXG4gICAgICBtZXNzYWdlOiAnQSBwYXRoIHdoZXJlIHRvIGZpbmQgdGhlIFNTTCBjZXJ0aWZpY2F0ZS9rZXknLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnNlcnZlci5zc2wuY2VydFBhdGgudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0b2dnbGUnLFxyXG4gICAgICBuYW1lOiAncmF0ZUxpbWl0aW5nLmVuYWJsZScsXHJcbiAgICAgIG1lc3NhZ2U6ICdFbmFibGUgcmF0ZSBsaW1pdGluZycsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnJhdGVMaW1pdGluZy5lbmFibGUudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBuYW1lOiAncmF0ZUxpbWl0aW5nLm1heFJlcXVlc3RzJyxcclxuICAgICAgbWVzc2FnZTogJ01heCByZXF1ZXN0cyBhbGxvd2VkIGluIGEgb25lIG1pbnV0ZScsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnJhdGVMaW1pdGluZy5tYXhSZXF1ZXN0cy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdyYXRlTGltaXRpbmcud2luZG93JyxcclxuICAgICAgbWVzc2FnZTogJ1RoZSB0aW1lIHdpbmRvdyBpbiBtaW51dGVzIGZvciByYXRlIGxpbWl0aW5nJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5zZXJ2ZXIucmF0ZUxpbWl0aW5nLndpbmRvdy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdyYXRlTGltaXRpbmcuZGVsYXknLFxyXG4gICAgICBtZXNzYWdlOlxyXG4gICAgICAgICdUaGUgYW1vdW50IHRvIGRlbGF5IGVhY2ggc3VjY2Vzc2l2ZSByZXF1ZXN0IGJlZm9yZSBoaXR0aW5nIHRoZSBtYXgnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnNlcnZlci5yYXRlTGltaXRpbmcuZGVsYXkudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0b2dnbGUnLFxyXG4gICAgICBuYW1lOiAncmF0ZUxpbWl0aW5nLnRydXN0UHJveHknLFxyXG4gICAgICBtZXNzYWdlOiAnU2V0IHRoaXMgdG8gdHJ1ZSBpZiBiZWhpbmQgYSBsb2FkIGJhbGFuY2VyJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5zZXJ2ZXIucmF0ZUxpbWl0aW5nLnRydXN0UHJveHkudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgbmFtZTogJ3JhdGVMaW1pdGluZy5za2lwS2V5JyxcclxuICAgICAgbWVzc2FnZTpcclxuICAgICAgICAnQWxsb3dzIGJ5cGFzc2luZyB0aGUgcmF0ZSBsaW1pdGVyIGFuZCBzaG91bGQgYmUgcHJvdmlkZWQgd2l0aCBza2lwVG9rZW4gYXJndW1lbnQnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnNlcnZlci5yYXRlTGltaXRpbmcuc2tpcEtleS52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBuYW1lOiAncmF0ZUxpbWl0aW5nLnNraXBUb2tlbicsXHJcbiAgICAgIG1lc3NhZ2U6XHJcbiAgICAgICAgJ0FsbG93cyBieXBhc3NpbmcgdGhlIHJhdGUgbGltaXRlciBhbmQgc2hvdWxkIGJlIHByb3ZpZGVkIHdpdGggc2tpcEtleSBhcmd1bWVudCcsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcuc2VydmVyLnJhdGVMaW1pdGluZy5za2lwVG9rZW4udmFsdWVcclxuICAgIH1cclxuICBdLFxyXG4gIHBvb2w6IFtcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdpbml0aWFsV29ya2VycycsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgbnVtYmVyIG9mIGluaXRpYWwgd29ya2VycyB0byBzcGF3bicsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcucG9vbC5pbml0aWFsV29ya2Vycy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdtYXhXb3JrZXJzJyxcclxuICAgICAgbWVzc2FnZTogJ1RoZSBudW1iZXIgb2YgbWF4IHdvcmtlcnMgdG8gc3Bhd24nLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnBvb2wubWF4V29ya2Vycy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICd3b3JrTGltaXQnLFxyXG4gICAgICBtZXNzYWdlOlxyXG4gICAgICAgICdUaGUgcGllY2VzIG9mIHdvcmsgdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGJlZm9yZSByZXN0YXJ0aW5nIGEgcHVwcGV0ZWVyIHByb2Nlc3MnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnBvb2wud29ya0xpbWl0LnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgbmFtZTogJ3F1ZXVlU2l6ZScsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgc2l6ZSBvZiB0aGUgcmVxdWVzdCBvdmVyZmxvdyBxdWV1ZScsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcucG9vbC5xdWV1ZVNpemUudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBuYW1lOiAndGltZW91dFRocmVzaG9sZCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIHRpbWluZyBvdXQnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnBvb2wudGltZW91dFRocmVzaG9sZC52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgIG5hbWU6ICdhY3F1aXJlVGltZW91dCcsXHJcbiAgICAgIG1lc3NhZ2U6ICdUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBhY3F1aXJpbmcgYSByZXNvdXJjZScsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcucG9vbC5hY3F1aXJlVGltZW91dC52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RvZ2dsZScsXHJcbiAgICAgIG5hbWU6ICdyZWFwZXInLFxyXG4gICAgICBtZXNzYWdlOiAnVGhlIHJlYXBlciB0byByZW1vdmUgaGFuZ2luZyBwcm9jZXNzZXMnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnBvb2wucmVhcGVyLnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAndG9nZ2xlJyxcclxuICAgICAgbmFtZTogJ2JlbmNobWFya2luZycsXHJcbiAgICAgIG1lc3NhZ2U6ICdTZXQgYmVuY2htYXJraW5nJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5wb29sLmJlbmNobWFya2luZy52YWx1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RvZ2dsZScsXHJcbiAgICAgIG5hbWU6ICdsaXN0ZW5Ub1Byb2Nlc3NFeGl0cycsXHJcbiAgICAgIG1lc3NhZ2U6ICdTZXQgdG8gZmFsc2UgaW4gb3JkZXIgdG8gc2tpcCBhdHRhY2hpbmcgcHJvY2Vzcy5leGl0IGhhbmRsZXJzJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5wb29sLmxpc3RlblRvUHJvY2Vzc0V4aXRzLnZhbHVlXHJcbiAgICB9XHJcbiAgXSxcclxuICBsb2dnaW5nOiBbXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBuYW1lOiAnbGV2ZWwnLFxyXG4gICAgICBtZXNzYWdlOlxyXG4gICAgICAgICdUaGUgbG9nIGxldmVsICgwOiBzaWxlbnQsIDE6IGVycm9yLCAyOiB3YXJuaW5nLCAzOiBub3RpY2UsIDQ6IHZlcmJvc2UpJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5sb2dnaW5nLmxldmVsLnZhbHVlLFxyXG4gICAgICByb3VuZDogMCxcclxuICAgICAgbWluOiAwLFxyXG4gICAgICBtYXg6IDRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgbmFtZTogJ2ZpbGUnLFxyXG4gICAgICBtZXNzYWdlOlxyXG4gICAgICAgICdBIG5hbWUgb2YgYSBsb2cgZmlsZS4gVGhlIC0tbG9nRGVzdCBhbHNvIG5lZWRzIHRvIGJlIHNldCB0byBlbmFibGUgZmlsZSBsb2dnaW5nJyxcclxuICAgICAgaW5pdGlhbDogZGVmYXVsdENvbmZpZy5sb2dnaW5nLmZpbGUudmFsdWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgbmFtZTogJ2Rlc3QnLFxyXG4gICAgICBtZXNzYWdlOiAnQSBwYXRoIHRvIGxvZyBmaWxlcy4gSXQgZW5hYmxlcyBmaWxlIGxvZ2dpbmcnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLmxvZ2dpbmcuZGVzdC52YWx1ZVxyXG4gICAgfVxyXG4gIF0sXHJcbiAgdWk6IFtcclxuICAgIHtcclxuICAgICAgdHlwZTogJ3RvZ2dsZScsXHJcbiAgICAgIG5hbWU6ICdlbmFibGUnLFxyXG4gICAgICBtZXNzYWdlOiAnRW5hYmxlIFVJIGZvciB0aGUgZXhwb3J0IHNlcnZlcicsXHJcbiAgICAgIGluaXRpYWw6IGRlZmF1bHRDb25maWcudWkuZW5hYmxlLnZhbHVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgIG5hbWU6ICdyb3V0ZScsXHJcbiAgICAgIG1lc3NhZ2U6ICdBIHJvdXRlIHRvIGF0dGFjaCB0aGUgVUkgdG8nLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLnVpLnJvdXRlLnZhbHVlXHJcbiAgICB9XHJcbiAgXSxcclxuICBvdGhlcjogW1xyXG4gICAge1xyXG4gICAgICB0eXBlOiAndG9nZ2xlJyxcclxuICAgICAgbmFtZTogJ25vTG9nbycsXHJcbiAgICAgIG1lc3NhZ2U6XHJcbiAgICAgICAgJ1NraXAgcHJpbnRpbmcgdGhlIGxvZ28gb24gYSBzdGFydHVwLiBXaWxsIGJlIHJlcGxhY2VkIGJ5IGEgc2ltcGxlIHRleHQnLFxyXG4gICAgICBpbml0aWFsOiBkZWZhdWx0Q29uZmlnLm90aGVyLm5vTG9nby52YWx1ZVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuXHJcbi8vIEFic29sdXRlIHByb3BzIHRoYXQsIGluIGNhc2Ugb2YgbWVyZ2luZyByZWN1cnNpdmVseSwgbmVlZCB0byBiZSBmb3JjZSBtZXJnZWRcclxuZXhwb3J0IGNvbnN0IGFic29sdXRlUHJvcHMgPSBbXHJcbiAgJ29wdGlvbnMnLFxyXG4gICdnbG9iYWxPcHRpb25zJyxcclxuICAndGhlbWVPcHRpb25zJyxcclxuICAncmVzb3VyY2VzJyxcclxuICAncGF5bG9hZCdcclxuXTtcclxuXHJcbi8vIEFyZ3VtZW50IG5lc3RpbmcgbGV2ZWwgb2YgYWxsIGV4cG9ydCBzZXJ2ZXIgb3B0aW9uc1xyXG5leHBvcnQgY29uc3QgbmVzdGVkQXJncyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbmVzdGVkIGFyZ3VtZW50cyBjaGFpbiBmb3IgYWxsIG9wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIFRoZSBvYmplY3QgYmFzZWQgb24gd2hpY2ggdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbiBiZVxyXG4gKiBtYWRlLlxyXG4gKiBAcGFyYW0ge3N0cmluZyB9IHByb3BDaGFpbiAtIFJlcXVpcmVkIGZvciBjcmVhdGluZyBhIHN0cmluZyBjaGFpbiBvZlxyXG4gKiBwcm9wZXJ0aWVzIGZvciBuZXN0ZWQgYXJndW1lbnRzLlxyXG4gKi9cclxuY29uc3QgY3JlYXRlTmVzdGVkQXJncyA9IChvYmosIHByb3BDaGFpbiA9ICcnKSA9PiB7XHJcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrKSA9PiB7XHJcbiAgICBpZiAoIVsncHVwcGV0ZWVyJywgJ2hpZ2hjaGFydHMnXS5pbmNsdWRlcyhrKSkge1xyXG4gICAgICBjb25zdCBlbnRyeSA9IG9ialtrXTtcclxuICAgICAgaWYgKHR5cGVvZiBlbnRyeS52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBHbyBkZWVwZXIgaW4gdGhlIG5lc3RlZCBhcmd1bWVudHNcclxuICAgICAgICBjcmVhdGVOZXN0ZWRBcmdzKGVudHJ5LCBgJHtwcm9wQ2hhaW59LiR7a31gKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDcmVhdGUgdGhlIGNoYWluIG9mIG5lc3RlZCBhcmd1bWVudHNcclxuICAgICAgICBuZXN0ZWRBcmdzW2VudHJ5LmNsaU5hbWUgfHwga10gPSBgJHtwcm9wQ2hhaW59LiR7a31gLnN1YnN0cmluZygxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuY3JlYXRlTmVzdGVkQXJncyhkZWZhdWx0Q29uZmlnKTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjMsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBhcHBlbmRGaWxlLCBleGlzdHNTeW5jLCBta2RpclN5bmMgfSBmcm9tICdmcyc7XHJcblxyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi9zY2hlbWFzL2NvbmZpZy5qcyc7XHJcblxyXG4vLyBUaGUgZGVmYXVsdCBsb2dnaW5nIGNvbmZpZ1xyXG5sZXQgbG9nZ2luZyA9IHtcclxuICAvLyBGbGFncyBmb3IgbG9nZ2luZyBzdGF0dXNcclxuICB0b0NvbnNvbGU6IHRydWUsXHJcbiAgdG9GaWxlOiBmYWxzZSxcclxuICBwYXRoQ3JlYXRlZDogZmFsc2UsXHJcbiAgLy8gTG9nIGxldmVsc1xyXG4gIGxldmVsc0Rlc2M6IFtcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdlcnJvcicsXHJcbiAgICAgIGNvbG9yOiAncmVkJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICd3YXJuaW5nJyxcclxuICAgICAgY29sb3I6ICd5ZWxsb3cnXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ25vdGljZScsXHJcbiAgICAgIGNvbG9yOiAnYmx1ZSdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAndmVyYm9zZScsXHJcbiAgICAgIGNvbG9yOiAnZ3JheSdcclxuICAgIH1cclxuICBdLFxyXG4gIC8vIExvZyBsaXN0ZW5lcnNcclxuICBsaXN0ZW5lcnM6IFtdXHJcbn07XHJcblxyXG4vLyBHYXRoZXIgaW5pdCBsb2dnaW5nIG9wdGlvbnNcclxuZm9yIChjb25zdCBba2V5LCBvcHRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGRlZmF1bHRDb25maWcubG9nZ2luZykpIHtcclxuICBsb2dnaW5nW2tleV0gPSBvcHRpb24udmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2dzIGEgbWVzc2FnZS4gQWNjZXB0cyBhIHZhcmlhYmxlIGFtb3VudCBvZiBhcmd1bWVudHMuIEFyZ3VtZW50cyBhZnRlclxyXG4gKiBgbGV2ZWxgIHdpbGwgYmUgcGFzc2VkIGRpcmVjdGx5IHRvIGNvbnNvbGUubG9nLCBhbmQvb3Igd2lsbCBiZSBqb2luZWRcclxuICogYW5kIGFwcGVuZGVkIHRvIHRoZSBsb2cgZmlsZS5cclxuICpcclxuICogQHBhcmFtIHthbnl9IGFyZ3MgLSBBbiBhcnJheSBvZiBhcmd1bWVudHMgd2hlcmUgdGhlIGZpcnN0IGlzIHRoZSBsb2cgbGV2ZWxcclxuICogYW5kIHRoZSByZXN0IGFyZSBzdHJpbmdzIHRvIGJ1aWxkIGEgbWVzc2FnZSB3aXRoLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxvZyA9ICguLi5hcmdzKSA9PiB7XHJcbiAgY29uc3QgW25ld0xldmVsLCAuLi50ZXh0c10gPSBhcmdzO1xyXG5cclxuICAvLyBDdXJyZW50IGxvZ2dpbmcgb3B0aW9uc1xyXG4gIGNvbnN0IHsgbGV2ZWwsIGxldmVsc0Rlc2MgfSA9IGxvZ2dpbmc7XHJcblxyXG4gIC8vIENoZWNrIGlmIGxvZyBsZXZlbCBpcyB3aXRoaW4gYSBjb3JyZWN0IHJhbmdlXHJcbiAgaWYgKG5ld0xldmVsID09PSAwIHx8IG5ld0xldmVsID4gbGV2ZWwgfHwgbGV2ZWwgPiBsZXZlbHNEZXNjLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHJpZCBvZiB0aGUgR01UIHRleHQgaW5mb3JtYXRpb25cclxuICBjb25zdCBuZXdEYXRlID0gbmV3IERhdGUoKS50b1N0cmluZygpLnNwbGl0KCcoJylbMF0udHJpbSgpO1xyXG5cclxuICAvLyBDcmVhdGUgYSBtZXNzYWdlJ3MgcHJlZml4XHJcbiAgY29uc3QgcHJlZml4ID0gYCR7bmV3RGF0ZX0gWyR7bGV2ZWxzRGVzY1tuZXdMZXZlbCAtIDFdLnRpdGxlfV0gLWA7XHJcblxyXG4gIC8vIENhbGwgYXZhaWxhYmxlIGxvZyBsaXN0ZW5lcnNcclxuICBsb2dnaW5nLmxpc3RlbmVycy5mb3JFYWNoKChmbikgPT4ge1xyXG4gICAgZm4ocHJlZml4LCB0ZXh0cy5qb2luKCcgJykpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBMb2cgdG8gZmlsZVxyXG4gIGlmIChsb2dnaW5nLnRvRmlsZSkge1xyXG4gICAgaWYgKCFsb2dnaW5nLnBhdGhDcmVhdGVkKSB7XHJcbiAgICAgIC8vIENyZWF0ZSBpZiBkb2VzIG5vdCBleGlzdFxyXG4gICAgICAhZXhpc3RzU3luYyhsb2dnaW5nLmRlc3QpICYmIG1rZGlyU3luYyhsb2dnaW5nLmRlc3QpO1xyXG5cclxuICAgICAgLy8gV2Ugbm93IGFzc3VtZSB0aGUgcGF0aCBpcyBhdmFpbGFibGUsIGUuZy4gaXQncyB0aGUgcmVzcG9uc2liaWxpdHlcclxuICAgICAgLy8gb2YgdGhlIHVzZXIgdG8gY3JlYXRlIHRoZSBwYXRoIHdpdGggdGhlIGNvcnJlY3QgYWNjZXNzIHJpZ2h0cy5cclxuICAgICAgbG9nZ2luZy5wYXRoQ3JlYXRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSBjb250ZW50IHRvIGEgZmlsZVxyXG4gICAgYXBwZW5kRmlsZShcclxuICAgICAgYCR7bG9nZ2luZy5kZXN0fSR7bG9nZ2luZy5maWxlfWAsXHJcbiAgICAgIFtwcmVmaXhdLmNvbmNhdCh0ZXh0cykuam9pbignICcpICsgJ1xcbicsXHJcbiAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFtsb2dnZXJdIFVuYWJsZSB0byB3cml0ZSB0byBsb2cgZmlsZTogJHtlcnJvcn1gKTtcclxuICAgICAgICAgIGxvZ2dpbmcudG9GaWxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIHRvIGNvbnNvbGVcclxuICBpZiAobG9nZ2luZy50b0NvbnNvbGUpIHtcclxuICAgIGNvbnNvbGUubG9nLmFwcGx5KFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIFtwcmVmaXgudG9TdHJpbmcoKVtsb2dnaW5nLmxldmVsc0Rlc2NbbmV3TGV2ZWwgLSAxXS5jb2xvcl1dLmNvbmNhdCh0ZXh0cylcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgdGhlIGZpbGUgbG9nZ2luZyBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9nRGVzdCAtIEEgcGF0aCB0byBsb2cgdG8uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2dGaWxlIC0gVGhlIG5hbWUgb2YgdGhlIGxvZyBmaWxlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVuYWJsZUZpbGVMb2dnaW5nID0gKGxvZ0Rlc3QsIGxvZ0ZpbGUpID0+IHtcclxuICAvLyBVcGRhdGUgbG9nZ2luZyBvcHRpb25zXHJcbiAgbG9nZ2luZyA9IHtcclxuICAgIC4uLmxvZ2dpbmcsXHJcbiAgICBkZXN0OiBsb2dEZXN0IHx8IGxvZ2dpbmcuZGVzdCxcclxuICAgIGZpbGU6IGxvZ0ZpbGUgfHwgbG9nZ2luZy5maWxlLFxyXG4gICAgdG9GaWxlOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgaWYgKGxvZ2dpbmcuZGVzdC5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiBsb2coMSwgJ1tsb2dnZXJdIEZpbGUgbG9nZ2luZyBpbml0OiBubyBwYXRoIHN1cHBsaWVkLicpO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFsb2dnaW5nLmRlc3QuZW5kc1dpdGgoJy8nKSkge1xyXG4gICAgbG9nZ2luZy5kZXN0ICs9ICcvJztcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhIGxvZyBsaXN0ZW5lci5cclxuICpcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGdldHRpbmcgYSBsb2cgZXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbGlzdGVuID0gKGZuKSA9PiB7XHJcbiAgbG9nZ2luZy5saXN0ZW5lcnMucHVzaChmbik7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgY3VycmVudCBsb2cgbGV2ZWwuIExvZyBsZXZlbHMgYXJlOlxyXG4gKiAtIDAgPSBubyBsb2dnaW5nXHJcbiAqIC0gMSA9IGVycm9yXHJcbiAqIC0gMiA9IHdhcm5pbmdcclxuICogLSAzID0gbm90aWNlXHJcbiAqIC0gNCA9IHZlcmJvc2VcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0xldmVsIC0gVGhlIG5ldyBsb2cgbGV2ZWwgKDAgLSA0KS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzZXRMb2dMZXZlbCA9IChuZXdMZXZlbCkgPT4ge1xyXG4gIGlmIChuZXdMZXZlbCA+PSAwICYmIG5ld0xldmVsIDw9IGxvZ2dpbmcubGV2ZWxzRGVzYy5sZW5ndGgpIHtcclxuICAgIGxvZ2dpbmcubGV2ZWwgPSBuZXdMZXZlbDtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogRW5hYmxlcyBvciBkaXNhYmxlcyBsb2dnaW5nIHRvIHRoZSBzdGRvdXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCAtIFdoZXRoZXIgbG9nIHRvIGNvbnNvbGUgb3Igbm90LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZVNURE91dCA9IChlbmFibGVkKSA9PiB7XHJcbiAgbG9nZ2luZy50b0NvbnNvbGUgPSBlbmFibGVkO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxvZyxcclxuICBlbmFibGVGaWxlTG9nZ2luZyxcclxuICBsaXN0ZW4sXHJcbiAgc2V0TG9nTGV2ZWwsXHJcbiAgdG9nZ2xlU1RET3V0XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcclxuXHJcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tICcuLi9saWIvc2NoZW1hcy9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcblxyXG5jb25zdCBNQVhfQkFDS09GRl9BVFRFTVBUUyA9IDY7XHJcblxyXG5leHBvcnQgY29uc3QgX19kaXJuYW1lID0gZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi8uJywgaW1wb3J0Lm1ldGEudXJsKSk7XHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRleHQgZnJvbSB3aGl0ZXNwYWNlcyB3aXRoIGEgcmVnZXggcnVsZS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJ1bGUgLSBUaGUgcnVsZSBmb3IgY2xlYXJpbmcgYSBzdHJpbmcsIGRlZmF1bHQgdG8gL1xcc1xccysvZy5cclxuICogQHJldHVybiB7c3RyaW5nfSAtIENsZWFyZWQgdGV4dC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBjbGVhclRleHQgPSAodGV4dCwgcnVsZSA9IC9cXHNcXHMrL2csIHJlcGxhY2VyID0gJyAnKSA9PlxyXG4gIHRleHQucmVwbGFjZUFsbChydWxlLCByZXBsYWNlcikudHJpbSgpO1xyXG5cclxuLyoqXHJcbiAqIERlbGF5cyBjYWxsaW5nIHRoZSBmdW5jdGlvbiBieSB0aW1lIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGJhY2tvZmZcclxuICogYWxnb3JpdGhtLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIEEgZnVuY3Rpb24gdG8gdHJ5IHRvIGNhbGwgd2l0aCB0aGUgYmFja29mZiBhbGdvcml0aG1cclxuICogb24uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhdHRlbXB0IC0gVGhlIG51bWJlciBvZiBhbiBhdHRlbXB0LCB3aGVyZSB0aGUgZmlyc3Qgb25lIGlzIDAuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZXhwQmFja29mZiA9IGFzeW5jIChmbiwgYXR0ZW1wdCA9IDAsIC4uLmFyZ3MpID0+IHtcclxuICB0cnkge1xyXG4gICAgLy8gVHJ5IHRvIGNhbGwgdGhlIGZ1bmN0aW9uXHJcbiAgICByZXR1cm4gYXdhaXQgZm4oLi4uYXJncyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vIENhbGN1bGF0ZSBkZWxheSBpbiBtc1xyXG4gICAgY29uc3QgZGVsYXlJbk1zID0gMiAqKiBhdHRlbXB0ICogMTAwMDtcclxuXHJcbiAgICAvLyBJZiB0aGUgYXR0ZW1wdCBleGNlZWRzIHRoZSBtYXhpbXVtIGF0dGVtcHRzIG9mIHJlYXBlYXQsIHRocm93IGFuIGVycm9yXHJcbiAgICBpZiAoKythdHRlbXB0ID49IE1BWF9CQUNLT0ZGX0FUVEVNUFRTKSB7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdhaXQgZ2l2ZW4gYW1vdW50IG9mIHRpbWVcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNwb25zZSkgPT4gc2V0VGltZW91dChyZXNwb25zZSwgZGVsYXlJbk1zKSk7XHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbcG9vbF0gV2FpdGVkICR7ZGVsYXlJbk1zfW1zIHVudGlsIG5leHQgY2FsbCBmb3IgdGhlIHJlc291cmNlIGlkOiAke2FyZ3NbMF19LmBcclxuICAgICk7XHJcblxyXG4gICAgLy8gVHJ5IGFnYWluXHJcbiAgICByZXR1cm4gZXhwQmFja29mZihmbiwgYXR0ZW1wdCwgLi4uYXJncyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZpeGVzIHRvIHN1cHBvcnRlZCB0eXBlIGZvcm1hdCBpZiBNSU1FLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFR5cGUgdG8gYmUgY29ycmVjdGVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0ZmlsZSAtIE5hbWUgb2YgdGhlIG91dGZpbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZml4VHlwZSA9ICh0eXBlLCBvdXRmaWxlKSA9PiB7XHJcbiAgLy8gTUlNRSB0eXBlc1xyXG4gIGNvbnN0IG1pbWVUeXBlcyA9IHtcclxuICAgICdpbWFnZS9wbmcnOiAncG5nJyxcclxuICAgICdpbWFnZS9qcGVnJzogJ2pwZWcnLFxyXG4gICAgJ2FwcGxpY2F0aW9uL3BkZic6ICdwZGYnLFxyXG4gICAgJ2ltYWdlL3N2Zyt4bWwnOiAnc3ZnJ1xyXG4gIH07XHJcblxyXG4gIC8vIEZvcm1hdHNcclxuICBjb25zdCBmb3JtYXRzID0gWydwbmcnLCAnanBlZycsICdwZGYnLCAnc3ZnJ107XHJcblxyXG4gIC8vIENoZWNrIGlmIHR5cGUgYW5kIG91dGZpbGUncyBleHRlbnNpb25zIGFyZSB0aGUgc2FtZVxyXG4gIGlmIChvdXRmaWxlKSB7XHJcbiAgICBjb25zdCBvdXRUeXBlID0gb3V0ZmlsZS5zcGxpdCgnLicpLnBvcCgpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGV4dGVuc2lvbiBoYXMgYSBjb3JyZWN0IHR5cGVcclxuICAgIGlmIChmb3JtYXRzLmluY2x1ZGVzKG91dFR5cGUpICYmIHR5cGUgIT09IG91dFR5cGUpIHtcclxuICAgICAgdHlwZSA9IG91dFR5cGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gYSBjb3JyZWN0IHR5cGVcclxuICByZXR1cm4gbWltZVR5cGVzW3R5cGVdIHx8IGZvcm1hdHMuZmluZCgodCkgPT4gdCA9PT0gdHlwZSkgfHwgJ3BuZyc7XHJcbn07XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgcHJvdmlkZWQgcmVzb3VyY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VzIC0gVGhlIHN0cmluZ2lmaWVkIHJlc291cmNlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IGFsbG93RmlsZVJlc291cmNlcyAtIERlY2lkZSBpZiByZXNvdXJjZXMgZnJvbSBmaWxlIGFyZVxyXG4gKiBhbGxvd2VkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGhhbmRsZVJlc291cmNlcyA9IChyZXNvdXJjZXMgPSBmYWxzZSwgYWxsb3dGaWxlUmVzb3VyY2VzKSA9PiB7XHJcbiAgY29uc3QgYWxsb3dlZFByb3BzID0gWydqcycsICdjc3MnLCAnZmlsZXMnXTtcclxuXHJcbiAgbGV0IGhhbmRsZWRSZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgbGV0IGNvcnJlY3RSZXNvdXJjZXMgPSBmYWxzZTtcclxuXHJcbiAgLy8gVHJ5IHRvIGxvYWQgcmVzb3VyY2VzIGZyb20gYSBmaWxlXHJcbiAgaWYgKGFsbG93RmlsZVJlc291cmNlcyAmJiByZXNvdXJjZXMuZW5kc1dpdGgoJy5qc29uJykpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaGFuZGxlZFJlc291cmNlcyA9IGlzQ29ycmVjdEpTT04oXHJcbiAgICAgICAgICByZWFkRmlsZVN5bmMoJ3Jlc291cmNlcy5qc29uJywgJ3V0ZjgnKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2VzICYmIHJlc291cmNlcy5lbmRzV2l0aCgnLmpzb24nKSkge1xyXG4gICAgICAgIGhhbmRsZWRSZXNvdXJjZXMgPSBpc0NvcnJlY3RKU09OKHJlYWRGaWxlU3luYyhyZXNvdXJjZXMsICd1dGY4JykpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhhbmRsZWRSZXNvdXJjZXMgPSBpc0NvcnJlY3RKU09OKHJlc291cmNlcyk7XHJcbiAgICAgICAgaWYgKGhhbmRsZWRSZXNvdXJjZXMgPT09IHRydWUpIHtcclxuICAgICAgICAgIGhhbmRsZWRSZXNvdXJjZXMgPSBpc0NvcnJlY3RKU09OKFxyXG4gICAgICAgICAgICByZWFkRmlsZVN5bmMoJ3Jlc291cmNlcy5qc29uJywgJ3V0ZjgnKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKG5vdGljZSkge1xyXG4gICAgICByZXR1cm4gbG9nKDMsIGBbY2xpXSBObyByZXNvdXJjZXMgZm91bmQuYCk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFRyeSB0byBnZXQgSlNPTlxyXG4gICAgaGFuZGxlZFJlc291cmNlcyA9IGlzQ29ycmVjdEpTT04ocmVzb3VyY2VzKTtcclxuXHJcbiAgICAvLyBHZXQgcmlkIG9mIHRoZSBmaWxlcyBzZWN0aW9uXHJcbiAgICBpZiAoIWFsbG93RmlsZVJlc291cmNlcykge1xyXG4gICAgICBkZWxldGUgaGFuZGxlZFJlc291cmNlcy5maWxlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEZpbHRlciBmcm9tIHVubmVjZXNzYXJ5IHByb3BlcnRpZXNcclxuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIGhhbmRsZWRSZXNvdXJjZXMpIHtcclxuICAgIGlmICghYWxsb3dlZFByb3BzLmluY2x1ZGVzKHByb3BOYW1lKSkge1xyXG4gICAgICBkZWxldGUgaGFuZGxlZFJlc291cmNlc1twcm9wTmFtZV07XHJcbiAgICB9IGVsc2UgaWYgKCFjb3JyZWN0UmVzb3VyY2VzKSB7XHJcbiAgICAgIGNvcnJlY3RSZXNvdXJjZXMgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgYXQgbGVhc3Qgb25lIG9mIGFsbG93ZWQgcHJvcGVydGllcyBpcyBwcmVzZW50XHJcbiAgaWYgKCFjb3JyZWN0UmVzb3VyY2VzKSB7XHJcbiAgICByZXR1cm4gbG9nKDMsIGBbY2xpXSBObyByZXNvdXJjZXMgZm91bmQuYCk7XHJcbiAgfVxyXG5cclxuICAvLyBIYW5kbGUgZmlsZXMgc2VjdGlvblxyXG4gIGlmIChoYW5kbGVkUmVzb3VyY2VzLmZpbGVzKSB7XHJcbiAgICBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzID0gaGFuZGxlZFJlc291cmNlcy5maWxlcy5tYXAoKGl0ZW0pID0+IGl0ZW0udHJpbSgpKTtcclxuICAgIGlmICghaGFuZGxlZFJlc291cmNlcy5maWxlcyB8fCBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgIGRlbGV0ZSBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHJlc291cmNlc1xyXG4gIHJldHVybiBoYW5kbGVkUmVzb3VyY2VzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBwcm92aWRlZCBkYXRhIGlzIG9yIGNhbiBiZSBhIGNvcnJlY3QgSlNPTi5cclxuICpcclxuICogQHBhcmFtIHthbnl9IGRhdGEgLSBEYXRhIHRvIGJlIGNoZWNrZWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdG9TdHJpbmcgLSBJZiB0cnVlLCByZXR1cm4gc3RyaW5naWZpZWQgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNDb3JyZWN0SlNPTihkYXRhLCB0b1N0cmluZykge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBpZiBub3QgYWxyZWFkeSBiZWZvcmUgcGFyc2luZ1xyXG4gICAgY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoXHJcbiAgICAgIHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogZGF0YVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gYSBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbiBvZiBhIEpTT04gaWYgcmVxdWlyZWRcclxuICAgIGlmICh0eXBlb2YgcGFyc2VkRGF0YSAhPT0gJ3N0cmluZycgJiYgdG9TdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcnNlZERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiBhIEpTT05cclxuICAgIHJldHVybiBwYXJzZWREYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIGl0ZW0gaXMgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gaXRlbSAtIEl0ZW0gdG8gYmUgY2hlY2tlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBpc09iamVjdCA9IChpdGVtKSA9PlxyXG4gIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiBpdGVtICE9PSBudWxsO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBzdHJpbmcgY29udGFpbnMgcHJpdmF0ZSByYW5nZSB1cmxzLlxyXG4gKlxyXG4gKiBAZXhwb3J0IHV0aWxzXHJcbiAqIEBwYXJhbSBpdGVtIHtzdHJpbmd9IGl0ZW0gdG8gYmUgY2hlY2tlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzUHJpdmF0ZVJhbmdlVXJsRm91bmQgPSAoaXRlbSkgPT4ge1xyXG4gIHJldHVybiBbXHJcbiAgICAnbG9jYWxob3N0JyxcclxuICAgICcoMTApLiguKikuKC4qKS4oLiopJyxcclxuICAgICcoMTI3KS4oLiopLiguKikuKC4qKScsXHJcbiAgICAnKDE3MikuKDFbNi05XXwyWzAtOV18M1swLTFdKS4oLiopLiguKiknLFxyXG4gICAgJygxOTIpLigxNjgpLiguKikuKC4qKSdcclxuICBdLnNvbWUoKGlwUmVnRXgpID0+XHJcbiAgICBpdGVtLm1hdGNoKGB4bGluazpocmVmPVwiKD86KGh0dHA6Ly98aHR0cHM6Ly8pKT8ke2lwUmVnRXh9YClcclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNvcHkgb2YgdGhlIGdpdmVuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCAtIE9iamVjdCB0byBjb3B5LlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gRGVlcCBjb3B5IG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZGVlcENvcHkgPSAob2JqKSA9PiB7XHJcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xyXG5cclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBjb3B5O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIG9iamVjdCB3aXRoIG9wdGlvbnMuIFBvc3NpYmxlIHRvIHByZXNlcnZlIGZ1bmN0aW9ucyB3aXRoXHJcbiAqIGFsbG93RnVuY3Rpb25zIGZsYWcuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byBzdHJpbmdpZnkuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGdW5jdGlvbnMgLSBGbGFnIGZvciBrZWVwaW5nIGZ1bmN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBvcHRpb25zU3RyaW5naWZ5ID0gKG9wdGlvbnMsIGFsbG93RnVuY3Rpb25zKSA9PiB7XHJcbiAgY29uc3QgcmVwbGFjZXJDYWxsYmFjayA9IChuYW1lLCB2YWx1ZSkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcblxyXG4gICAgICAvLyBJZiBhbGxvd0Z1bmN0aW9ucyBpcyBzZXQgdG8gdHJ1ZSwgcHJlc2VydmUgZnVuY3Rpb25zXHJcbiAgICAgIGlmIChcclxuICAgICAgICAodmFsdWUuc3RhcnRzV2l0aCgnZnVuY3Rpb24oJykgfHwgdmFsdWUuc3RhcnRzV2l0aCgnZnVuY3Rpb24gKCcpKSAmJlxyXG4gICAgICAgIHZhbHVlLmVuZHNXaXRoKCd9JylcclxuICAgICAgKSB7XHJcbiAgICAgICAgdmFsdWUgPSBhbGxvd0Z1bmN0aW9uc1xyXG4gICAgICAgICAgPyBgRVhQX0ZVTiR7KHZhbHVlICsgJycpLnJlcGxhY2VBbGwoL1xcbnxcXHR8XFxyL2csICcgJyl9RVhQX0ZVTmBcclxuICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICA/IGBFWFBfRlVOJHsodmFsdWUgKyAnJykucmVwbGFjZUFsbCgvXFxufFxcdHxcXHIvZywgJyAnKX1FWFBfRlVOYFxyXG4gICAgICA6IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIFN0cmluZ2lmeSBvcHRpb25zIGFuZCBpZiByZXF1aXJlZCwgcmVwbGFjZSBzcGVjaWFsIGZ1bmN0aW9ucyBtYXJrc1xyXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvcHRpb25zLCByZXBsYWNlckNhbGxiYWNrKS5yZXBsYWNlQWxsKFxyXG4gICAgL1wiRVhQX0ZVTnxFWFBfRlVOXCIvZyxcclxuICAgICcnXHJcbiAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQcmludHMgdGhlIGV4cG9ydCBzZXJ2ZXIgbG9nby5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBub0xvZ28gLSBXaGV0aGVyIHRvIGRpc3BsYXkgbG9nbyBvciB0ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHByaW50TG9nbyA9IChub0xvZ28pID0+IHtcclxuICAvLyBHZXQgcGFja2FnZSB2ZXJzaW9uIGVpdGhlciBmcm9tIGVudiBvciBmcm9tIHBhY2thZ2UuanNvblxyXG4gIGNvbnN0IHBhY2thZ2VWZXJzaW9uID1cclxuICAgIHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX3ZlcnNpb24gfHxcclxuICAgIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKG5ldyBVUkwoJy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpKVxyXG4gICAgICAudmVyc2lvbjtcclxuXHJcbiAgLy8gUHJpbnQgdGV4dCBvbmx5XHJcbiAgaWYgKG5vTG9nbykge1xyXG4gICAgY29uc29sZS5sb2coYFN0YXJ0aW5nIGhpZ2hjaGFydHMgZXhwb3J0IHNlcnZlciB2JHtwYWNrYWdlVmVyc2lvbn0uLi5gKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIFByaW50IHRoZSBsb2dvXHJcbiAgY29uc29sZS5sb2coXHJcbiAgICByZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy9tc2cvc3RhcnR1cC5tc2cnKS50b1N0cmluZygpLmJvbGQueWVsbG93LFxyXG4gICAgYHYke3BhY2thZ2VWZXJzaW9ufWBcclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFByaW50cyB0aGUgQ0xJIHVzYWdlLiBJZiByZXF1aXJlZCwgaXQgY2FuIGxpc3QgcHJvcGVydGllcyByZWN1cnNpdmVseVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByaW50VXNhZ2UoKSB7XHJcbiAgY29uc3QgcGFkID0gNDg7XHJcbiAgY29uc3QgcmVhZG1lID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9oaWdoY2hhcnRzL25vZGUtZXhwb3J0LXNlcnZlciNyZWFkbWUnO1xyXG5cclxuICAvLyBEaXNwbGF5IHJlYWRtZSBpbmZvcm1hdGlvblxyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgJ1VzYWdlIG9mIENMSSBhcmd1bWVudHM6Jy5ib2xkLFxyXG4gICAgJ1xcbi0tLS0tLScsXHJcbiAgICBgXFxuRm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gdmlzaXQgcmVhZG1lIGF0OiAke3JlYWRtZS5ib2xkLnllbGxvd30uYFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGN5Y2xlQ2F0ZWdvcmllcyA9IChjYXRlZ29yaWVzKSA9PiB7XHJcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBvcHRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGNhdGVnb3JpZXMpKSB7XHJcbiAgICAgIC8vIElmIGNhdGVnb3J5IGhhcyBtb3JlIGxldmVscywgZ28gZnVydGhlclxyXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb24sICd2YWx1ZScpKSB7XHJcbiAgICAgICAgY3ljbGVDYXRlZ29yaWVzKG9wdGlvbik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGRlc2NOYW1lID0gYCAgLS0ke29wdGlvbi5jbGlOYW1lIHx8IG5hbWV9ICR7XHJcbiAgICAgICAgICAoJzwnICsgb3B0aW9uLnR5cGUgKyAnPicpLmdyZWVuXHJcbiAgICAgICAgfSBgO1xyXG4gICAgICAgIGlmIChkZXNjTmFtZS5sZW5ndGggPCBwYWQpIHtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSBkZXNjTmFtZS5sZW5ndGg7IGkgPCBwYWQ7IGkrKykge1xyXG4gICAgICAgICAgICBkZXNjTmFtZSArPSAnLic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IGNvcnJlY3RseSBhbGlnbmVkIG1lc3NhZ2VzXHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBkZXNjTmFtZSxcclxuICAgICAgICAgIG9wdGlvbi5kZXNjcmlwdGlvbixcclxuICAgICAgICAgIGBbRGVmYXVsdDogJHtvcHRpb24udmFsdWUudG9TdHJpbmcoKS5ib2xkfV1gLmJsdWVcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gQ3ljbGUgdGhyb3VnaCBvcHRpb25zIG9mIGVhY2ggY2F0ZWdvcmllcyBhbmQgZGlzcGxheSB0aGUgdXNhZ2UgaW5mb1xyXG4gIE9iamVjdC5rZXlzKGRlZmF1bHRDb25maWcpLmZvckVhY2goKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAvLyBPbmx5IHB1cHBldGVlciBhbmQgaGlnaGNoYXJ0cyBjYXRlZ29yaWVzIGNhbm5vdCBiZSBjb25maWd1cmVkIHRocm91Z2ggQ0xJXHJcbiAgICBpZiAoIVsncHVwcGV0ZWVyJywgJ2hpZ2hjaGFydHMnXS5pbmNsdWRlcyhjYXRlZ29yeSkpIHtcclxuICAgICAgY29uc29sZS5sb2coYFxcbiR7Y2F0ZWdvcnkudG9VcHBlckNhc2UoKX1gLnJlZCk7XHJcbiAgICAgIGN5Y2xlQ2F0ZWdvcmllcyhkZWZhdWx0Q29uZmlnW2NhdGVnb3J5XSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY29uc29sZS5sb2coJ1xcbicpO1xyXG59XHJcblxyXG4vKipcclxuICogUm91bmRzIG51bWJlciB0byBwYXNzZWQgcHJlY2lzaW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBOdW1iZXIgdG8gcm91bmQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBBIHByZWNpc2lvbiBvZiByb3VuZGluZy5cclxuICovXHJcbmV4cG9ydCBjb25zdCByb3VuZE51bWJlciA9ICh2YWx1ZSwgcHJlY2lzaW9uID0gMSkgPT4ge1xyXG4gIGNvbnN0IG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uIHx8IDApO1xyXG4gIHJldHVybiBNYXRoLnJvdW5kKCt2YWx1ZSAqIG11bHRpcGxpZXIpIC8gbXVsdGlwbGllcjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDYXN0cyB0aGUgaXRlbSB0byBib29sZWFuLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gaXRlbSAtIEl0ZW0gdG8gYmUgY2FzdC5cclxuICovXHJcbmV4cG9ydCBjb25zdCB0b0Jvb2xlYW4gPSAoaXRlbSkgPT5cclxuICBbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJ05hTicsICcwJywgJyddLmluY2x1ZGVzKGl0ZW0pXHJcbiAgICA/IGZhbHNlXHJcbiAgICA6ICEhaXRlbTtcclxuXHJcbi8qKlxyXG4gKiBJZiBuZWNlc3NhcnksIHBsYWNlcyBhIGN1c3RvbSBjb2RlIGluc2lkZSBhIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gY3VzdG9tQ29kZSAtIFRoZSBjdXN0b21Db2RlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHdyYXBBcm91bmQgPSAoY3VzdG9tQ29kZSwgYWxsb3dGaWxlUmVzb3VyY2VzKSA9PiB7XHJcbiAgaWYgKGN1c3RvbUNvZGUgJiYgdHlwZW9mIGN1c3RvbUNvZGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjdXN0b21Db2RlID0gY3VzdG9tQ29kZS50cmltKCk7XHJcblxyXG4gICAgaWYgKGN1c3RvbUNvZGUuZW5kc1dpdGgoJy5qcycpKSB7XHJcbiAgICAgIHJldHVybiBhbGxvd0ZpbGVSZXNvdXJjZXNcclxuICAgICAgICA/IHdyYXBBcm91bmQocmVhZEZpbGVTeW5jKGN1c3RvbUNvZGUsICd1dGY4JykpXHJcbiAgICAgICAgOiBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgIGN1c3RvbUNvZGUuc3RhcnRzV2l0aCgnZnVuY3Rpb24oKScpIHx8XHJcbiAgICAgIGN1c3RvbUNvZGUuc3RhcnRzV2l0aCgnZnVuY3Rpb24gKCknKSB8fFxyXG4gICAgICBjdXN0b21Db2RlLnN0YXJ0c1dpdGgoJygpPT4nKSB8fFxyXG4gICAgICBjdXN0b21Db2RlLnN0YXJ0c1dpdGgoJygpID0+JylcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gYCgke2N1c3RvbUNvZGV9KSgpYDtcclxuICAgIH1cclxuICAgIHJldHVybiBjdXN0b21Db2RlLnJlcGxhY2UoLzskLywgJycpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IHRvIG1lYXN1cmUgdGltZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBtZWFzdXJlVGltZSA9ICgpID0+IHtcclxuICBjb25zdCBzdGFydCA9IHByb2Nlc3MuaHJ0aW1lLmJpZ2ludCgpO1xyXG4gIHJldHVybiAoKSA9PiBOdW1iZXIocHJvY2Vzcy5ocnRpbWUuYmlnaW50KCkgLSBzdGFydCkgLyAxMDAwMDAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIF9fZGlybmFtZSxcclxuICBjbGVhclRleHQsXHJcbiAgZXhwQmFja29mZixcclxuICBmaXhUeXBlLFxyXG4gIGhhbmRsZVJlc291cmNlcyxcclxuICBpc0NvcnJlY3RKU09OLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGlzUHJpdmF0ZVJhbmdlVXJsRm91bmQsXHJcbiAgb3B0aW9uc1N0cmluZ2lmeSxcclxuICBwcmludExvZ28sXHJcbiAgcHJpbnRVc2FnZSxcclxuICByb3VuZE51bWJlcixcclxuICB0b0Jvb2xlYW4sXHJcbiAgd3JhcEFyb3VuZCxcclxuICBtZWFzdXJlVGltZVxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCByYXRlTGltaXQgZnJvbSAnZXhwcmVzcy1yYXRlLWxpbWl0JztcclxuXHJcbmltcG9ydCB7IGNsZWFyVGV4dCB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFbmFibGVzIHJhdGUgbGltaXRpbmcgZm9yIGEgZ2l2ZW4gYXBwLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gYXBwIC0gVGhlIGV4cHJlc3MgYXBwLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gbGltaXRDb25maWcgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIHJhdGUgbGltaXRpbmcuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYXBwLCBsaW1pdENvbmZpZykgPT4ge1xyXG4gIGNvbnN0IG1zZyA9XHJcbiAgICAnVG9vIG1hbnkgcmVxdWVzdHMsIHlvdSBoYXZlIGJlZW4gcmF0ZSBsaW1pdGVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLic7XHJcblxyXG4gIC8vIE9wdGlvbnMgZm9yIHRoZSByYXRlIGxpbWl0ZXJcclxuICBjb25zdCByYXRlT3B0aW9ucyA9IHtcclxuICAgIG1heDogbGltaXRDb25maWcubWF4UmVxdWVzdHMgfHwgMzAsXHJcbiAgICB3aW5kb3c6IGxpbWl0Q29uZmlnLndpbmRvdyB8fCAxLFxyXG4gICAgZGVsYXk6IGxpbWl0Q29uZmlnLmRlbGF5IHx8IDAsXHJcbiAgICB0cnVzdFByb3h5OiBsaW1pdENvbmZpZy50cnVzdFByb3h5IHx8IGZhbHNlLFxyXG4gICAgc2tpcEtleTogbGltaXRDb25maWcuc2tpcEtleSB8fCBmYWxzZSxcclxuICAgIHNraXBUb2tlbjogbGltaXRDb25maWcuc2tpcFRva2VuIHx8IGZhbHNlXHJcbiAgfTtcclxuXHJcbiAgLy8gU2V0IGlmIGJlaGluZCBhIHByb3h5XHJcbiAgaWYgKHJhdGVPcHRpb25zLnRydXN0UHJveHkpIHtcclxuICAgIGFwcC5lbmFibGUoJ3RydXN0IHByb3h5Jyk7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSBsaW1pdGVyXHJcbiAgY29uc3QgbGltaXRlciA9IHJhdGVMaW1pdCh7XHJcbiAgICB3aW5kb3dNczogcmF0ZU9wdGlvbnMud2luZG93ICogNjAgKiAxMDAwLFxyXG4gICAgLy8gTGltaXQgZWFjaCBJUCB0byAxMDAgcmVxdWVzdHMgcGVyIHdpbmRvd01zXHJcbiAgICBtYXg6IHJhdGVPcHRpb25zLm1heCxcclxuICAgIC8vIERpc2FibGUgZGVsYXlpbmcsIGZ1bGwgc3BlZWQgdW50aWwgdGhlIG1heCBsaW1pdCBpcyByZWFjaGVkXHJcbiAgICBkZWxheU1zOiByYXRlT3B0aW9ucy5kZWxheSxcclxuICAgIGhhbmRsZXI6IChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICByZXNwb25zZS5mb3JtYXQoe1xyXG4gICAgICAgIGpzb246ICgpID0+IHtcclxuICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MjkpLnNlbmQoeyBtZXNzYWdlOiBtc2cgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XHJcbiAgICAgICAgICByZXNwb25zZS5zdGF0dXMoNDI5KS5zZW5kKG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBza2lwOiAocmVxdWVzdCkgPT4ge1xyXG4gICAgICAvLyBBbGxvdyBieXBhc3NpbmcgdGhlIGxpbWl0ZXIgaWYgYSB2YWxpZCBrZXkvdG9rZW4gaGFzIGJlZW4gc2VudFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgcmF0ZU9wdGlvbnMuc2tpcEtleSAhPT0gZmFsc2UgJiZcclxuICAgICAgICByYXRlT3B0aW9ucy5za2lwVG9rZW4gIT09IGZhbHNlICYmXHJcbiAgICAgICAgcmVxdWVzdC5xdWVyeS5rZXkgPT09IHJhdGVPcHRpb25zLnNraXBLZXkgJiZcclxuICAgICAgICByZXF1ZXN0LnF1ZXJ5LmFjY2Vzc190b2tlbiA9PT0gcmF0ZU9wdGlvbnMuc2tpcFRva2VuXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxvZyg0LCAnW3JhdGUtbGltaXRpbmddIFNraXBwaW5nIHJhdGUgbGltaXRlci4nKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIFVzZSBhIGxpbWl0ZXIgYXMgYSBtaWRkbGV3YXJlXHJcbiAgYXBwLnVzZShsaW1pdGVyKTtcclxuXHJcbiAgbG9nKFxyXG4gICAgMyxcclxuICAgIGNsZWFyVGV4dChcclxuICAgICAgYFtyYXRlLWxpbWl0aW5nXSBFbmFibGVkIHJhdGUgbGltaXRpbmc6ICR7cmF0ZU9wdGlvbnMubWF4fSByZXF1ZXN0c1xyXG4gICAgICBwZXIgJHtyYXRlT3B0aW9ucy53aW5kb3d9IG1pbnV0ZSBwZXIgSVAsIHRydXN0aW5nIHByb3h5OlxyXG4gICAgICAke3JhdGVPcHRpb25zLnRydXN0UHJveHl9LmBcclxuICAgIClcclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcclxuXHJcbmNvbnN0IGVudlRvQm9vbGVhbiA9ICgpID0+XHJcbiAgei5lbnVtKFsndHJ1ZScsICdmYWxzZSddKS50cmFuc2Zvcm0oKHYpID0+IHYgPT09ICd0cnVlJyk7XHJcblxyXG5jb25zdCBFbnZDb25maWcgPSB6Lm9iamVjdCh7XHJcbiAgV1NfRU5BQkxFOiBlbnZUb0Jvb2xlYW4oKSxcclxuICBXU19SRUNPTk5FQ1Q6IGVudlRvQm9vbGVhbigpLFxyXG4gIFdTX1JFSkVDVF9VTkFVVEhPUklaRUQ6IGVudlRvQm9vbGVhbigpLFxyXG4gIFdTX1BJTkdfVElNRU9VVDogei5jb2VyY2UubnVtYmVyKCksXHJcbiAgV1NfUkVDT05ORUNUX0lOVEVSVkFMOiB6LmNvZXJjZS5udW1iZXIoKSxcclxuICBXU19VUkw6IHouc3RyaW5nKCksXHJcbiAgV1NfU0VDUkVUOiB6LnN0cmluZygpXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVudkNvbmZpZyA9IEVudkNvbmZpZy5wYXJzZShwcm9jZXNzLmVudik7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJ3dzJztcclxuXHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGVudkNvbmZpZyB9IGZyb20gJy4uL2VudkNvbmZpZy5qcyc7XHJcblxyXG4vLyBXZWJTb2NrZXQgY2xpZW50XHJcbmxldCB3ZWJTb2NrZXQ7XHJcblxyXG4vLyBJbiBjYXNlIG9mIGNsb3Npbmcgb3IgdGVybWluYXRpb24gb2YgYSBjbGllbnQgY29ubmVjdGlvblxyXG5sZXQgcmVjb25uZWN0SW50ZXJ2YWw7XHJcblxyXG4vKipcclxuICogQ29ubmVjdHMgdG8gV2ViU29ja2V0IG9uIGEgcHJvdmlkZWQgdXJsLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gd2ViU29ja2V0VXJsIC0gVGhlIFdlYlNvY2tldCBzZXJ2ZXIncyBVUkwuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgV2ViU29ja2V0IGNvbm5lY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBjb25uZWN0KHdlYlNvY2tldFVybCwgb3B0aW9ucykge1xyXG4gIC8vIFRyeSB0byBjb25uZWN0IHRvIGluZGljYXRlZCBXZWJTb2NrZXQgc2VydmVyXHJcbiAgd2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh3ZWJTb2NrZXRVcmwsIG9wdGlvbnMpO1xyXG5cclxuICAvLyBPcGVuIGV2ZW50XHJcbiAgd2ViU29ja2V0Lm9uKCdvcGVuJywgKCkgPT4ge1xyXG4gICAgbG9nKDMsIGBbd2Vic29ja2V0XSBDb25uZWN0ZWQgdG8gV2ViU29ja2V0IHNlcnZlcjogJHt3ZWJTb2NrZXRVcmx9YCk7XHJcbiAgICBjbGVhckludGVydmFsKHJlY29ubmVjdEludGVydmFsKTtcclxuICB9KTtcclxuXHJcbiAgLy8gQ2xvc2UgZXZlbnQgd2hlcmUgcGluZyB0aW1lb3V0IGlzIGNsZWFyZWRcclxuICB3ZWJTb2NrZXQub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgJ1t3ZWJzb2NrZXRdJyxcclxuICAgICAgYERpc2Nvbm5lY3RlZCBmcm9tIFdlYlNvY2tldCBzZXJ2ZXI6ICR7d2ViU29ja2V0VXJsfSB3aXRoIGNvZGU6ICR7Y29kZX1gXHJcbiAgICApO1xyXG4gICAgY2xlYXJUaW1lb3V0KHdlYlNvY2tldC5fcGluZ1RpbWVvdXQpO1xyXG4gICAgd2ViU29ja2V0ID0gbnVsbDtcclxuICB9KTtcclxuXHJcbiAgLy8gRXJyb3IgZXZlbnRcclxuICB3ZWJTb2NrZXQub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICBsb2coMSwgYFt3ZWJzb2NrZXRdIFdlYlNvY2tldCBlcnJvciBvY2N1cmVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIE1lc3NhZ2UgZXZlbnRcclxuICB3ZWJTb2NrZXQub24oJ21lc3NhZ2UnLCAobWVzc2FnZSkgPT4ge1xyXG4gICAgbG9nKDMsIGBbd2Vic29ja2V0XSBEYXRhIHJlY2VpdmVkOiAke21lc3NhZ2V9YCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFBpbmcgZXZlbnQgd2l0aCB0aGUgY29ubmVjdGlvbiBoZWFsdGggY2hlY2sgYW5kIHRlcm1pbmF0aW9uIGxvZ2ljXHJcbiAgd2ViU29ja2V0Lm9uKCdwaW5nJywgKCkgPT4ge1xyXG4gICAgbG9nKDMsICdbd2Vic29ja2V0XSBQSU5HJyk7XHJcbiAgICBjbGVhclRpbWVvdXQod2ViU29ja2V0Ll9waW5nVGltZW91dCk7XHJcbiAgICB3ZWJTb2NrZXQuX3BpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIC8vIFRlcm1pbmF0ZSB0aGUgY2xpZW50IGNvbm5lY3Rpb25cclxuICAgICAgd2ViU29ja2V0LnRlcm1pbmF0ZSgpO1xyXG5cclxuICAgICAgLy8gVHJ5IHRvIHJlY29ubmVjdCBpZiByZXF1aXJlZFxyXG4gICAgICBpZiAoZW52Q29uZmlnLldTX1JFQ09OTkVDVCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJlY29ubmVjdCh3ZWJTb2NrZXRVcmwsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9LCBlbnZDb25maWcuV1NfUElOR19USU1FT1VUKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlLWNvbm5lY3RzIHRvIFdlYlNvY2tldCBvbiBhIHByb3ZpZGVkIHVybC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHdlYlNvY2tldFVybCAtIFRoZSBXZWJTb2NrZXQgc2VydmVyJ3MgVVJMLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIFdlYlNvY2tldCBjb25uZWN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVjb25uZWN0KHdlYlNvY2tldFVybCwgb3B0aW9ucykge1xyXG4gIHJlY29ubmVjdEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgaWYgKHdlYlNvY2tldCA9PT0gbnVsbCkge1xyXG4gICAgICBjb25uZWN0KHdlYlNvY2tldFVybCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfSwgZW52Q29uZmlnLldTX1JFQ09OTkVDVF9JTlRFUlZBTCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBpbnN0YW5jZSBvZiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDbGllbnQoKSB7XHJcbiAgcmV0dXJuIHdlYlNvY2tldDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGNvbm5lY3QsXHJcbiAgZ2V0Q2xpZW50XHJcbn07XHJcbiIsIi8qKlxyXG4gKiBUaGlzIG1vZHVsZSBleHBvcnRzIHR3byBmdW5jdGlvbnM6IGZldGNoIChmb3IgR0VUIHJlcXVlc3RzKSBhbmQgcG9zdCAoZm9yIFBPU1QgcmVxdWVzdHMpLlxyXG4gKi9cclxuXHJcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xyXG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgdGhlIHByb3RvY29sIG9mIHRoZSBnaXZlbiBVUkwgKGVpdGhlciBgaHR0cGAgb3IgYGh0dHBzYCkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB3aG9zZSBwcm90b2NvbCBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBgaHR0cHNgIG1vZHVsZSBpZiB0aGUgVVJMIHN0YXJ0cyB3aXRoICdodHRwcycsXHJcbiAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBgaHR0cGAgbW9kdWxlLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBjb25zdCBwcm90b2NvbCA9IGdldFByb3RvY29sKCdodHRwczovL2V4YW1wbGUuY29tJyk7XHJcbiAqIGNvbnNvbGUubG9nKHByb3RvY29sKTsgLy8gT3V0cHV0cyB0aGUgJ2h0dHBzJyBtb2R1bGVcclxuICovXHJcbmNvbnN0IGdldFByb3RvY29sID0gKHVybCkgPT4ge1xyXG4gIHJldHVybiB1cmwuc3RhcnRzV2l0aCgnaHR0cHMnKSA/IGh0dHBzIDogaHR0cDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZW5kcyBhIEdFVCByZXF1ZXN0IHRvIHRoZSBzcGVjaWZpZWQgVVJMIHdpdGggb3B0aW9uYWwgcmVxdWVzdCBvcHRpb25zLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQGFzeW5jXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGZldGNoLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RPcHRpb25zPXt9XSAtIE9wdGlvbmFsIHJlcXVlc3Qgb3B0aW9ucyBhbmQgaGVhZGVycy5cclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXNwb25zZSBvYmplY3QuXHJcbiAqIFRoZSByZXNwb25zZSBvYmplY3QgY29udGFpbnMgYSBgLnRleHRgIHByb3BlcnR5IHdpdGggdGhlIHJhdyByZXNwb25zZSBkYXRhLlxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSByZXF1ZXN0IGZhaWxzIG9yIGlmIG5vIGRhdGEgaXMgZmV0Y2hlZCBmcm9tIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGFzeW5jIGZ1bmN0aW9uIGdldERhdGEoKSB7XHJcbiAqICAgdHJ5IHtcclxuICogICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmV4YW1wbGUuY29tL2RhdGEnKTtcclxuICogICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLnRleHQpO1xyXG4gKiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAqICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXRhOicsIGVycm9yKTtcclxuICogICB9XHJcbiAqIH1cclxuICpcclxuICogZ2V0RGF0YSgpO1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2godXJsLCByZXF1ZXN0T3B0aW9ucyA9IHt9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHByb3RvY29sID0gZ2V0UHJvdG9jb2wodXJsKTtcclxuXHJcbiAgICBwcm90b2NvbFxyXG4gICAgICAuZ2V0KHVybCwgcmVxdWVzdE9wdGlvbnMsIChyZXMpID0+IHtcclxuICAgICAgICBsZXQgZGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBIGNodW5rIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQuXHJcbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XHJcbiAgICAgICAgICBkYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQuXHJcbiAgICAgICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdOb3RoaW5nIHdhcyBmZXRjaGVkIGZyb20gdGhlIFVSTC4nKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXMudGV4dCA9IGRhdGE7XHJcbiAgICAgICAgICByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgUE9TVCByZXF1ZXN0IHRvIHRoZSBzcGVjaWZpZWQgVVJMIHdpdGggdGhlIGdpdmVuIGJvZHkgYW5kIHJlcXVlc3Qgb3B0aW9ucy5cclxuICpcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBhc3luY1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBzaG91bGQgYmUgc2VudC5cclxuICogQHBhcmFtIHtPYmplY3R9IFtib2R5PXt9XSAtIFRoZSBkYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgYm9keSwgaW4gSlNPTiBmb3JtYXQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdE9wdGlvbnM9e31dIC0gT3B0aW9uYWwgcmVxdWVzdCBvcHRpb25zIGFuZCBoZWFkZXJzLlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSAtIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcGFyc2VkIEpTT04gcmVzcG9uc2UuXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHJlcXVlc3QgZmFpbHMgb3IgaWYgdGhlIHJlc3BvbnNlIGNhbm5vdCBiZSBwYXJzZWQuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGFzeW5jIGZ1bmN0aW9uIHNlbmREYXRhKCkge1xyXG4gKiAgIGNvbnN0IGRhdGFUb1NlbmQgPSB7XHJcbiAqICAgICBrZXkxOiAndmFsdWUxJyxcclxuICogICAgIGtleTI6ICd2YWx1ZTInLFxyXG4gKiAgIH07XHJcbiAqICAgdHJ5IHtcclxuICogICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcG9zdCgnaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20vZGF0YScsIGRhdGFUb1NlbmQpO1xyXG4gKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gKiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAqICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZW5kaW5nIGRhdGE6JywgZXJyb3IpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBzZW5kRGF0YSgpO1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcG9zdCh1cmwsIGJvZHkgPSB7fSwgcmVxdWVzdE9wdGlvbnMgPSB7fSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBwcm90b2NvbCA9IGdldFByb3RvY29sKHVybCk7XHJcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XHJcblxyXG4gICAgLy8gU2V0IGRlZmF1bHQgaGVhZGVycyBhbmQgbWVyZ2Ugd2l0aCByZXF1ZXN0T3B0aW9uc1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogZGF0YS5sZW5ndGhcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlcXVlc3RPcHRpb25zXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHJlcSA9IHByb3RvY29sXHJcbiAgICAgIC5yZXF1ZXN0KHVybCwgb3B0aW9ucywgKHJlcykgPT4ge1xyXG4gICAgICAgIGxldCByZXNwb25zZURhdGEgPSAnJztcclxuXHJcbiAgICAgICAgLy8gQSBjaHVuayBvZiBkYXRhIGhhcyBiZWVuIHJlY2VpdmVkLlxyXG4gICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2VEYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQuXHJcbiAgICAgICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXMudGV4dCA9IHJlc3BvbnNlRGF0YTtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIFdyaXRlIHRoZSByZXF1ZXN0IGJvZHkgYW5kIGVuZCB0aGUgcmVxdWVzdC5cclxuICAgIHJlcS53cml0ZShkYXRhKTtcclxuICAgIHJlcS5lbmQoKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZmV0Y2g7XHJcbmV4cG9ydCB7IGZldGNoLCBwb3N0IH07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLy8gVGhlIGNhY2hlIG1hbmFnZXIgbWFuYWdlcyB0aGUgSGlnaGNoYXJ0cyBsaWJyYXJ5IGFuZCBpdHMgZGVwZW5kZW5jaWVzLlxyXG4vLyBUaGUgY2FjaGUgaXRzZWxmIGlzIHN0b3JlZCBpbiAuY2FjaGUsIGFuZCBpcyBjaGVja2VkIGJ5IHRoZSBjb25maWcgc3lzdGVtXHJcbi8vIGJlZm9yZSBzdGFydGluZyB0aGUgc2VydmljZVxyXG5cclxuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcclxuaW1wb3J0IEh0dHBzUHJveHlBZ2VudCBmcm9tICdodHRwcy1wcm94eS1hZ2VudCc7XHJcbmltcG9ydCB7IGZldGNoIH0gZnJvbSAnLi9mZXRjaC5qcyc7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IF9fZGlybmFtZSB9IGZyb20gJy4uL2xpYi91dGlscy5qcyc7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG5jb25zdCBjYWNoZVBhdGggPSBqb2luKF9fZGlybmFtZSwgJy5jYWNoZScpO1xyXG5cclxuY29uc3QgY2FjaGUgPSB7XHJcbiAgY2RuVVJMOiAnaHR0cHM6Ly9jb2RlLmhpZ2hjaGFydHMuY29tLycsXHJcbiAgYWN0aXZlTWFuaWZlc3Q6IHt9LFxyXG4gIHNvdXJjZXM6ICcnLFxyXG4gIGhjVmVyc2lvbjogJydcclxufTtcclxuXHJcbi8vIFRPRE86IFRoZSBjb25maWcgc2hvdWxkIGJlIGFjY2Vzc3NpYmxlIGdsb2JhbGx5IHNvIHdlIGRvbid0IGhhdmUgdG8gZG8gdGhpcyBzb3J0IG9mIHRoaW5nLi5cclxubGV0IGFwcGxpZWRDb25maWcgPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0cyB0aGUgSGlnaGNoYXJ0cyB2ZXJzaW9uIGZyb20gdGhlIGNhY2hlXHJcbiAqL1xyXG5jb25zdCBleHRyYWN0VmVyc2lvbiA9ICgpID0+XHJcbiAgKGNhY2hlLmhjVmVyc2lvbiA9IGNhY2hlLnNvdXJjZXNcclxuICAgIC5zdWJzdHIoMCwgY2FjaGUuc291cmNlcy5pbmRleE9mKCcqLycpKVxyXG4gICAgLnJlcGxhY2UoJy8qJywgJycpXHJcbiAgICAucmVwbGFjZSgnKi8nLCAnJylcclxuICAgIC5yZXBsYWNlKC9cXG4vZywgJycpXHJcbiAgICAudHJpbSgpKTtcclxuXHJcbi8qKlxyXG4gKiBTYXZlcyB0aGUgSGlnaGNoYXJ0cyBwYXJ0IG9mIGEgY29uZmlnIHRvIGEgbWFuaWZlc3QgZmlsZSBpbiB0aGUgY2FjaGVcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAtIEhpZ2hjaGFydHMgcmVsYXRlZCBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICogQHBhcmFtIHtvYmplY3R9IGZldGNoZWRNb2R1bGVzIC0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgbWFwcGVkIG5hbWVzIG9mXHJcbiAqIGZldGNoZWQgSGlnaGNoYXJ0cyBtb2R1bGVzIHRvIHVzZS5cclxuICovXHJcbmNvbnN0IHNhdmVDb25maWdUb01hbmlmZXN0ID0gYXN5bmMgKGNvbmZpZywgZmV0Y2hlZE1vZHVsZXMpID0+IHtcclxuICBjb25zdCBuZXdNYW5pZmVzdCA9IHtcclxuICAgIHZlcnNpb246IGNvbmZpZy52ZXJzaW9uLFxyXG4gICAgbW9kdWxlczogZmV0Y2hlZE1vZHVsZXMgfHwge31cclxuICB9O1xyXG5cclxuICAvLyBVcGRhdGUgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgbW9kdWxlc1xyXG4gIGNhY2hlLmFjdGl2ZU1hbmlmZXN0ID0gbmV3TWFuaWZlc3Q7XHJcblxyXG4gIGxvZyg0LCAnW2NhY2hlXSB3cml0aW5nIG5ldyBtYW5pZmVzdCcpO1xyXG5cclxuICB0cnkge1xyXG4gICAgd3JpdGVGaWxlU3luYyhcclxuICAgICAgam9pbihjYWNoZVBhdGgsICdtYW5pZmVzdC5qc29uJyksXHJcbiAgICAgIEpTT04uc3RyaW5naWZ5KG5ld01hbmlmZXN0KSxcclxuICAgICAgJ3V0ZjgnXHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2coMSwgYFtjYWNoZV0gRXJyb3Igd3JpdGluZyBjYWNoZSBtYW5pZmVzdDogJHtlcnJvcn0uYCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgYSBzaW5nbGUgc2NyaXB0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0IC0gQSBwYXRoIHRvIHNjcmlwdCB0byBnZXQuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm94eUFnZW50IC0gVGhlIHByb3h5IGFnZW50IHRvIHVzZSBmb3IgYSByZXF1ZXN0LlxyXG4gKi9cclxuY29uc3QgZmV0Y2hTY3JpcHQgPSBhc3luYyAoc2NyaXB0LCBwcm94eUFnZW50KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdldCByaWQgb2YgdGhlIC5qcyBmcm9tIHRoZSBjdXN0b20gc3RyaW5nc1xyXG4gICAgaWYgKHNjcmlwdC5lbmRzV2l0aCgnLmpzJykpIHtcclxuICAgICAgc2NyaXB0ID0gc2NyaXB0LnN1YnN0cmluZygwLCBzY3JpcHQubGVuZ3RoIC0gMyk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKDQsIGBbY2FjaGVdIEZldGNoaW5nIHNjcmlwdCAtICR7c2NyaXB0fS5qc2ApO1xyXG5cclxuICAgIC8vIElmIGV4aXN0cywgYWRkIHByb3h5IGFnZW50IHRvIHJlcXVlc3Qgb3B0aW9uc1xyXG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSBwcm94eUFnZW50XHJcbiAgICAgID8ge1xyXG4gICAgICAgICAgYWdlbnQ6IHByb3h5QWdlbnQsXHJcbiAgICAgICAgICB0aW1lb3V0OiArcHJvY2Vzcy5lbnZbJ1BST1hZX1NFUlZFUl9USU1FT1VUJ10gfHwgNTAwMFxyXG4gICAgICAgIH1cclxuICAgICAgOiB7fTtcclxuXHJcbiAgICAvLyBGZXRjaCB0aGUgc2NyaXB0XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3NjcmlwdH0uanNgLCByZXF1ZXN0T3B0aW9ucyk7XHJcblxyXG4gICAgLy8gSWYgT0ssIHJldHVybiBpdHMgdGV4dCByZXByZXNlbnRhdGlvblxyXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UudGV4dDtcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBgJHtyZXNwb25zZS5zdGF0dXNDb2RlfWA7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGxvZygxLCBgW2NhY2hlXSBFcnJvciBmZXRjaGluZyBzY3JpcHQgJHtzY3JpcHR9LmpzOiAke2Vycm9yfS5gKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBIaWdoY2hhcnRzIGNhY2hlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gSGlnaGNoYXJ0cyByZWxhdGVkIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlUGF0aCAtIEEgcGF0aCB0byB0aGUgZmlsZSB3aGVyZSBzYXZlIHVwZGF0ZWQgc291cmNlcy5cclxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgdGhhdCBjb250YWlucyBtYXBwZWQgbmFtZXMgb2YgZmV0Y2hlZCBIaWdoY2hhcnRzXHJcbiAqIG1vZHVsZXMgdG8gdXNlLlxyXG4gKi9cclxuY29uc3QgdXBkYXRlQ2FjaGUgPSBhc3luYyAoY29uZmlnLCBzb3VyY2VQYXRoKSA9PiB7XHJcbiAgY29uc3QgeyBjb3JlU2NyaXB0cywgbW9kdWxlcywgaW5kaWNhdG9ycywgc2NyaXB0czogY3VzdG9tU2NyaXB0cyB9ID0gY29uZmlnO1xyXG4gIGNvbnN0IGhjVmVyc2lvbiA9XHJcbiAgICBjb25maWcudmVyc2lvbiA9PT0gJ2xhdGVzdCcgfHwgIWNvbmZpZy52ZXJzaW9uID8gJycgOiBgJHtjb25maWcudmVyc2lvbn0vYDtcclxuXHJcbiAgbG9nKDMsICdbY2FjaGVdIFVwZGF0aW5nIGNhY2hlIHRvIEhpZ2hjaGFydHMgJywgaGNWZXJzaW9uKTtcclxuXHJcbiAgLy8gR2F0aGVyIGFsbCBzY3JpcHRzIHRvIGZldGNoXHJcbiAgY29uc3QgYWxsU2NyaXB0cyA9IFtcclxuICAgIC4uLmNvcmVTY3JpcHRzLm1hcCgoYykgPT4gYCR7aGNWZXJzaW9ufSR7Y31gKSxcclxuICAgIC4uLm1vZHVsZXMubWFwKChtKSA9PlxyXG4gICAgICBtID09PSAnbWFwJyA/IGBtYXBzLyR7aGNWZXJzaW9ufW1vZHVsZXMvJHttfWAgOiBgJHtoY1ZlcnNpb259bW9kdWxlcy8ke219YFxyXG4gICAgKSxcclxuICAgIC4uLmluZGljYXRvcnMubWFwKChpKSA9PiBgc3RvY2svJHtoY1ZlcnNpb259aW5kaWNhdG9ycy8ke2l9YClcclxuICBdO1xyXG5cclxuICAvLyBDb25maWd1cmUgcHJveHkgaWYgZXhpc3RzXHJcbiAgbGV0IHByb3h5QWdlbnQ7XHJcbiAgY29uc3QgcHJveHlIb3N0ID0gcHJvY2Vzcy5lbnZbJ1BST1hZX1NFUlZFUl9IT1NUJ107XHJcbiAgY29uc3QgcHJveHlQb3J0ID0gcHJvY2Vzcy5lbnZbJ1BST1hZX1NFUlZFUl9QT1JUJ107XHJcblxyXG4gIGlmIChwcm94eUhvc3QgJiYgcHJveHlQb3J0KSB7XHJcbiAgICBwcm94eUFnZW50ID0gbmV3IEh0dHBzUHJveHlBZ2VudCh7XHJcbiAgICAgIGhvc3Q6IHByb3h5SG9zdCxcclxuICAgICAgcG9ydDogK3Byb3h5UG9ydFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmZXRjaGVkTW9kdWxlcyA9IHt9O1xyXG4gIHRyeSB7XHJcbiAgICBjYWNoZS5zb3VyY2VzID0gLy8gVE9ETzogY29udmVydCB0byBmb3IgbG9vcFxyXG4gICAgICAoXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgLi4uYWxsU2NyaXB0cy5tYXAoYXN5bmMgKHNjcmlwdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgZmV0Y2hTY3JpcHQoXHJcbiAgICAgICAgICAgICAgYCR7Y29uZmlnLmNkblVSTCB8fCBjYWNoZS5jZG5VUkx9JHtzY3JpcHR9YCxcclxuICAgICAgICAgICAgICBwcm94eUFnZW50XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBmZXRjaGVkIGNvcnJlY3RseSwgc2V0IGl0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBmZXRjaGVkTW9kdWxlc1tcclxuICAgICAgICAgICAgICAgIHNjcmlwdC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAvKC4qKVxcL3woLiopbW9kdWxlc1xcL3xzdG9ja1xcLyguKilpbmRpY2F0b3JzXFwvfG1hcHNcXC8oLiopbW9kdWxlc1xcLy9naSxcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICBdID0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIC4uLmN1c3RvbVNjcmlwdHMubWFwKChzY3JpcHQpID0+IGZldGNoU2NyaXB0KHNjcmlwdCwgcHJveHlBZ2VudCkpXHJcbiAgICAgICAgXSlcclxuICAgICAgKS5qb2luKCc7XFxuJyk7XHJcbiAgICBleHRyYWN0VmVyc2lvbigpO1xyXG5cclxuICAgIC8vIFNhdmUgdGhlIGZldGNoZWQgbW9kdWxlcyBpbnRvIGNhY2hlcycgc291cmNlIEpTT05cclxuICAgIHdyaXRlRmlsZVN5bmMoc291cmNlUGF0aCwgY2FjaGUuc291cmNlcyk7XHJcbiAgICByZXR1cm4gZmV0Y2hlZE1vZHVsZXM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGxvZygxLCAnW2NhY2hlXSBVbmFibGUgdG8gdXBkYXRlIGxvY2FsIEhpZ2hjaGFydHMgY2FjaGUuJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZVZlcnNpb24gPSBhc3luYyAobmV3VmVyc2lvbikgPT5cclxuICBhcHBsaWVkQ29uZmlnXHJcbiAgICA/IGF3YWl0IGNoZWNrQ2FjaGUoXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhcHBsaWVkQ29uZmlnLCB7XHJcbiAgICAgICAgICB2ZXJzaW9uOiBuZXdWZXJzaW9uXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgOiBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIGFueSBtaXNzaW5nIEhpZ2hjaGFydHMgYW5kIGRlcGVuZGVuY2llc1xyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gSGlnaGNoYXJ0cyByZWxhdGVkIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNoZWNrQ2FjaGUgPSBhc3luYyAoY29uZmlnKSA9PiB7XHJcbiAgbGV0IGZldGNoZWRNb2R1bGVzO1xyXG4gIC8vIFByZXBhcmUgcGF0aHMgdG8gbWFuaWZlc3QgYW5kIHNvdXJjZXMgZnJvbSB0aGUgLmNhY2hlIGZvbGRlclxyXG4gIGNvbnN0IG1hbmlmZXN0UGF0aCA9IGpvaW4oY2FjaGVQYXRoLCAnbWFuaWZlc3QuanNvbicpO1xyXG4gIGNvbnN0IHNvdXJjZVBhdGggPSBqb2luKGNhY2hlUGF0aCwgJ3NvdXJjZXMuanMnKTtcclxuXHJcbiAgLy8gVE9ETzogZGVhbCB3aXRoIHRyeWluZyB0byBzd2l0Y2ggdG8gdGhlIHJ1bm5pbmcgdmVyc2lvblxyXG4gIC8vIGNvbnN0IGFjdGl2ZVZlcnNpb24gPSBhcHBsaWVkQ29uZmlnID8gYXBwbGllZENvbmZpZy52ZXJzaW9uIDogZmFsc2U7XHJcblxyXG4gIGFwcGxpZWRDb25maWcgPSBjb25maWc7XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgLmNhY2hlIGRlc3RpbmF0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QgYWxyZWFkeVxyXG4gICFleGlzdHNTeW5jKGNhY2hlUGF0aCkgJiYgbWtkaXJTeW5jKGNhY2hlUGF0aCk7XHJcblxyXG4gIC8vIEZldGNoIGFsbCB0aGUgc2NyaXB0cyBlaXRoZXIgaWYgbWFuaWZlc3QuanNvbiBkb2VzIG5vdCBleGlzdFxyXG4gIC8vIG9yIGlmIHRoZSBmb3JjZUZldGNoIG9wdGlvbiBpcyBlbmFibGVkXHJcbiAgaWYgKCFleGlzdHNTeW5jKG1hbmlmZXN0UGF0aCkgfHwgY29uZmlnLmZvcmNlRmV0Y2gpIHtcclxuICAgIGxvZygzLCAnW2NhY2hlXSBGZXRjaGluZyBhbmQgY2FjaGluZyBIaWdoY2hhcnRzIGRlcGVuZGVuY2llcy4nKTtcclxuICAgIGZldGNoZWRNb2R1bGVzID0gYXdhaXQgdXBkYXRlQ2FjaGUoY29uZmlnLCBzb3VyY2VQYXRoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IHJlcXVlc3RVcGRhdGUgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBSZWFkIHRoZSBtYW5pZmVzdCBKU09OXHJcbiAgICBjb25zdCBtYW5pZmVzdCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKG1hbmlmZXN0UGF0aCkpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSBtb2R1bGVzIGlzIGFuIGFycmF5LCBpZiBzbywgd2UgcmV3cml0ZSBpdCB0byBhIG1hcCB0byBtYWtlXHJcbiAgICAvLyBpdCBlYXNpZXIgdG8gcmVzb2x2ZSBtb2R1bGVzLlxyXG4gICAgaWYgKG1hbmlmZXN0Lm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShtYW5pZmVzdC5tb2R1bGVzKSkge1xyXG4gICAgICBjb25zdCBtb2R1bGVNYXAgPSB7fTtcclxuICAgICAgbWFuaWZlc3QubW9kdWxlcy5mb3JFYWNoKChtKSA9PiAobW9kdWxlTWFwW21dID0gMSkpO1xyXG4gICAgICBtYW5pZmVzdC5tb2R1bGVzID0gbW9kdWxlTWFwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgbW9kdWxlcywgY29yZVNjcmlwdHMsIGluZGljYXRvcnMgfSA9IGNvbmZpZztcclxuICAgIGNvbnN0IG51bWJlck9mTW9kdWxlcyA9XHJcbiAgICAgIG1vZHVsZXMubGVuZ3RoICsgY29yZVNjcmlwdHMubGVuZ3RoICsgaW5kaWNhdG9ycy5sZW5ndGg7XHJcblxyXG4gICAgLy8gQ29tcGFyZSB0aGUgbG9hZGVkIGNvbmZpZyB3aXRoIHRoZSBjb250ZW50cyBpbiAuY2FjaGUuXHJcbiAgICAvLyBJZiB0aGVyZSBhcmUgY2hhbmdlcywgZmV0Y2ggcmVxdWVzdGVkIG1vZHVsZXMgYW5kIHByb2R1Y3RzLFxyXG4gICAgLy8gYW5kIGJha2UgdGhlbSBpbnRvIGEgZ2lhbnQgYmxvYi4gU2F2ZSB0aGUgYmxvYi5cclxuICAgIGlmIChtYW5pZmVzdC52ZXJzaW9uICE9PSBjb25maWcudmVyc2lvbikge1xyXG4gICAgICBsb2coMywgJ1tjYWNoZV0gSGlnaGNoYXJ0cyB2ZXJzaW9uIG1pc21hdGNoIGluIGNhY2hlLCBuZWVkIHRvIHJlLWZldGNoLicpO1xyXG4gICAgICByZXF1ZXN0VXBkYXRlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmtleXMobWFuaWZlc3QubW9kdWxlcyB8fCB7fSkubGVuZ3RoICE9PSBudW1iZXJPZk1vZHVsZXMpIHtcclxuICAgICAgbG9nKFxyXG4gICAgICAgIDMsXHJcbiAgICAgICAgJ1tjYWNoZV0gQ2FjaGUgYW5kIHJlcXVlc3RlZCBtb2R1bGVzIGRvZXMgbm90IG1hdGNoLCBuZWVkIHRvIHJlLWZldGNoLidcclxuICAgICAgKTtcclxuICAgICAgcmVxdWVzdFVwZGF0ZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDaGVjayBlYWNoIG1vZHVsZSwgaWYgYW55dGhpbmcgaXMgbWlzc2luZyByZWZldGNoIGV2ZXJ5dGhpbmdcclxuICAgICAgcmVxdWVzdFVwZGF0ZSA9IChjb25maWcubW9kdWxlcyB8fCBbXSkuc29tZSgobW9kdWxlTmFtZSkgPT4ge1xyXG4gICAgICAgIGlmICghbWFuaWZlc3QubW9kdWxlc1ttb2R1bGVOYW1lXSkge1xyXG4gICAgICAgICAgbG9nKFxyXG4gICAgICAgICAgICAzLFxyXG4gICAgICAgICAgICBgW2NhY2hlXSBUaGUgJHttb2R1bGVOYW1lfSBtaXNzaW5nIGluIGNhY2hlLCBuZWVkIHRvIHJlLWZldGNoLmBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXF1ZXN0VXBkYXRlKSB7XHJcbiAgICAgIGZldGNoZWRNb2R1bGVzID0gYXdhaXQgdXBkYXRlQ2FjaGUoY29uZmlnLCBzb3VyY2VQYXRoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZygzLCAnW2NhY2hlXSBEZXBlbmRlbmN5IGNhY2hlIGlzIHVwIHRvIGRhdGUsIHByb2NlZWRpbmcuJyk7XHJcblxyXG4gICAgICAvLyBMb2FkIHRoZSBzb3VyY2VzXHJcbiAgICAgIGNhY2hlLnNvdXJjZXMgPSByZWFkRmlsZVN5bmMoc291cmNlUGF0aCwgJ3V0ZjgnKTtcclxuXHJcbiAgICAgIC8vIEdldCBjdXJyZW50IG1vZHVsZXMgbWFwXHJcbiAgICAgIGZldGNoZWRNb2R1bGVzID0gbWFuaWZlc3QubW9kdWxlcztcclxuICAgICAgZXh0cmFjdFZlcnNpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEZpbmFsbHksIHNhdmUgdGhlIG5ldyBtYW5pZmVzdCwgd2hpY2ggaXMgYmFzaWNhbGx5IG91ciBjdXJyZW50IGNvbmZpZ1xyXG4gIC8vIGluIGEgc2xpZ2h0bHkgZGlmZmVyZW50IGZvcm1hdFxyXG4gIGF3YWl0IHNhdmVDb25maWdUb01hbmlmZXN0KGNvbmZpZywgZmV0Y2hlZE1vZHVsZXMpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGNoZWNrQ2FjaGUsXHJcbiAgdXBkYXRlVmVyc2lvbixcclxuICBnZXRDYWNoZTogKCkgPT4gY2FjaGUsXHJcbiAgaGlnaGNoYXJ0czogKCkgPT4gY2FjaGUuc291cmNlcyxcclxuICB2ZXJzaW9uOiAoKSA9PiBjYWNoZS5oY1ZlcnNpb25cclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjMsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgcHVwcGV0ZWVyIGZyb20gJ3B1cHBldGVlcic7XHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIHVybCBmcm9tICd1cmwnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ25vZGU6cGF0aCc7XHJcblxyXG4vLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xNDYzMzI4XHJcbi8vIE5vdCBpZGVhbCAtIGxlYXZlcyB0cmFzaCBpbiB0aGUgRlNcclxuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdub2RlOmNyeXB0byc7XHJcbmNvbnN0IFJBTkRPTV9QSUQgPSByYW5kb21CeXRlcyg2NCkudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xyXG5jb25zdCBQVVBQRVRFRVJfRElSID0gcGF0aC5qb2luKCd0bXAnLCBgcHVwcGV0ZWVyLSR7UkFORE9NX1BJRH1gKTtcclxuY29uc3QgREFUQV9ESVIgPSBwYXRoLmpvaW4oUFVQUEVURUVSX0RJUiwgJ3Byb2ZpbGUnKTtcclxuXHJcbi8vIFRoZSBtaW5pbWFsIGFyZ3MgdG8gc3BlZWQgdXAgdGhlIGJyb3dzZXJcclxuY29uc3QgbWluaW1hbEFyZ3MgPSBbXHJcbiAgYC0tdXNlci1kYXRhLWRpcj0ke0RBVEFfRElSfWAsXHJcbiAgJy0tYXV0b3BsYXktcG9saWN5PXVzZXItZ2VzdHVyZS1yZXF1aXJlZCcsXHJcbiAgJy0tZGlzYWJsZS1iYWNrZ3JvdW5kLW5ldHdvcmtpbmcnLFxyXG4gICctLWRpc2FibGUtYmFja2dyb3VuZC10aW1lci10aHJvdHRsaW5nJyxcclxuICAnLS1kaXNhYmxlLWJhY2tncm91bmRpbmctb2NjbHVkZWQtd2luZG93cycsXHJcbiAgJy0tZGlzYWJsZS1icmVha3BhZCcsXHJcbiAgJy0tZGlzYWJsZS1jbGllbnQtc2lkZS1waGlzaGluZy1kZXRlY3Rpb24nLFxyXG4gICctLWRpc2FibGUtY29tcG9uZW50LXVwZGF0ZScsXHJcbiAgJy0tZGlzYWJsZS1kZWZhdWx0LWFwcHMnLFxyXG4gICctLWRpc2FibGUtZGV2LXNobS11c2FnZScsXHJcbiAgJy0tZGlzYWJsZS1kb21haW4tcmVsaWFiaWxpdHknLFxyXG4gICctLWRpc2FibGUtZXh0ZW5zaW9ucycsXHJcbiAgJy0tZGlzYWJsZS1mZWF0dXJlcz1BdWRpb1NlcnZpY2VPdXRPZlByb2Nlc3MnLFxyXG4gICctLWRpc2FibGUtaGFuZy1tb25pdG9yJyxcclxuICAnLS1kaXNhYmxlLWlwYy1mbG9vZGluZy1wcm90ZWN0aW9uJyxcclxuICAnLS1kaXNhYmxlLW5vdGlmaWNhdGlvbnMnLFxyXG4gICctLWRpc2FibGUtb2ZmZXItc3RvcmUtdW5tYXNrZWQtd2FsbGV0LWNhcmRzJyxcclxuICAnLS1kaXNhYmxlLXBvcHVwLWJsb2NraW5nJyxcclxuICAnLS1kaXNhYmxlLXByaW50LXByZXZpZXcnLFxyXG4gICctLWRpc2FibGUtcHJvbXB0LW9uLXJlcG9zdCcsXHJcbiAgJy0tZGlzYWJsZS1yZW5kZXJlci1iYWNrZ3JvdW5kaW5nJyxcclxuICAnLS1kaXNhYmxlLXNlc3Npb24tY3Jhc2hlZC1idWJibGUnLFxyXG4gICctLWRpc2FibGUtc2V0dWlkLXNhbmRib3gnLFxyXG4gICctLWRpc2FibGUtc3BlZWNoLWFwaScsXHJcbiAgJy0tZGlzYWJsZS1zeW5jJyxcclxuICAnLS1oaWRlLWNyYXNoLXJlc3RvcmUtYnViYmxlJyxcclxuICAnLS1oaWRlLXNjcm9sbGJhcnMnLFxyXG4gICctLWlnbm9yZS1ncHUtYmxhY2tsaXN0JyxcclxuICAnLS1tZXRyaWNzLXJlY29yZGluZy1vbmx5JyxcclxuICAnLS1tdXRlLWF1ZGlvJyxcclxuICAnLS1uby1kZWZhdWx0LWJyb3dzZXItY2hlY2snLFxyXG4gICctLW5vLWZpcnN0LXJ1bicsXHJcbiAgJy0tbm8tcGluZ3MnLFxyXG4gICctLW5vLXNhbmRib3gnLFxyXG4gICctLW5vLXp5Z290ZScsXHJcbiAgJy0tcGFzc3dvcmQtc3RvcmU9YmFzaWMnLFxyXG4gICctLXVzZS1tb2NrLWtleWNoYWluJ1xyXG5dO1xyXG5cclxuY29uc3QgX19kaXJuYW1lID0gdXJsLmZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLicsIGltcG9ydC5tZXRhLnVybCkpO1xyXG5cclxuY29uc3QgdGVtcGxhdGUgPSBmcy5yZWFkRmlsZVN5bmMoXHJcbiAgX19kaXJuYW1lICsgJy8uLi90ZW1wbGF0ZXMvdGVtcGxhdGUuaHRtbCcsXHJcbiAgJ3V0ZjgnXHJcbik7XHJcblxyXG5sZXQgYnJvd3NlcjtcclxuXHJcbmV4cG9ydCBjb25zdCBuZXdQYWdlID0gYXN5bmMgKCkgPT4ge1xyXG4gIGlmICghYnJvd3NlcikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBjb25zdCBwID0gYXdhaXQgYnJvd3Nlci5uZXdQYWdlKCk7XHJcblxyXG4gIGF3YWl0IHAuc2V0Q29udGVudCh0ZW1wbGF0ZSk7XHJcbiAgYXdhaXQgcC5hZGRTY3JpcHRUYWcoeyBwYXRoOiBfX2Rpcm5hbWUgKyAnLy4uLy5jYWNoZS9zb3VyY2VzLmpzJyB9KTtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICBhd2FpdCBwLmV2YWx1YXRlKCgpID0+IHdpbmRvdy5zZXR1cEhpZ2hjaGFydHMoKSk7XHJcblxyXG4gIHAub24oJ3BhZ2VlcnJvcicsIGFzeW5jIChlcnIpID0+IHtcclxuICAgIC8vIFRPRE86IENvbnNpZGVyIGFkZGluZyBhIHN3aXRjaCBoZXJlIHRoYXQgdHVybnMgb24gbG9nKDApIGxvZ2dpbmdcclxuICAgIC8vIG9uIHBhZ2UgZXJyb3JzLlxyXG4gICAgbG9nKDEsICdbcGFnZSBlcnJvcl0nLCBlcnIpO1xyXG4gICAgYXdhaXQgcC4kZXZhbChcclxuICAgICAgJyNjb250YWluZXInLFxyXG4gICAgICAoZWxlbWVudCwgZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgaWYgKHdpbmRvdy5fZGlzcGxheUVycm9ycykge1xyXG4gICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBgPGgxPkNoYXJ0IGlucHV0IGRhdGEgZXJyb3I8L2gxPiR7ZXJyLnRvU3RyaW5nKCl9YFxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlID0gYXN5bmMgKHB1cHBldGVlckFyZ3MpID0+IHtcclxuICBjb25zdCBhbGxBcmdzID0gWy4uLm1pbmltYWxBcmdzLCAuLi4ocHVwcGV0ZWVyQXJncyB8fCBbXSldO1xyXG5cclxuICAvLyBDcmVhdGUgYSBicm93c2VyXHJcbiAgaWYgKCFicm93c2VyKSB7XHJcbiAgICBsZXQgdHJ5Q291bnQgPSAwO1xyXG5cclxuICAgIGNvbnN0IG9wZW4gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgICdbYnJvd3Nlcl0gYXR0ZW1wdGluZyB0byBnZXQgYSBicm93c2VyIGluc3RhbmNlICh0cnknLFxyXG4gICAgICAgICAgdHJ5Q291bnQgKyAnKSdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBicm93c2VyID0gYXdhaXQgcHVwcGV0ZWVyLmxhdW5jaCh7XHJcbiAgICAgICAgICBoZWFkbGVzczogJ25ldycsXHJcbiAgICAgICAgICBhcmdzOiBhbGxBcmdzLFxyXG4gICAgICAgICAgdXNlckRhdGFEaXI6ICcuL3RtcC8nXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2coMCwgJ1ticm93c2VyXScsIGUpO1xyXG4gICAgICAgIGlmICgrK3RyeUNvdW50IDwgMjUpIHtcclxuICAgICAgICAgIGxvZygzLCAnW2Jyb3dzZXJdIGZhaWxlZDonLCBlKTtcclxuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNwb25zZSkgPT4gc2V0VGltZW91dChyZXNwb25zZSwgNDAwMCkpO1xyXG4gICAgICAgICAgYXdhaXQgb3BlbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2coMCwgJ01heCByZXRyaWVzIHJlYWNoZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgb3BlbigpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBsb2coMCwgJ1ticm93c2VyXSBVbmFibGUgdG8gb3BlbiBicm93c2VyJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWJyb3dzZXIpIHtcclxuICAgICAgbG9nKDAsICdbYnJvd3Nlcl0gVW5hYmxlIHRvIG9wZW4gYnJvd3NlcicpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gYSBicm93c2VyIHByb21pc2VcclxuICByZXR1cm4gYnJvd3NlcjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgaWYgKCFicm93c2VyKSB7XHJcbiAgICB0aHJvdyAnTm8gdmFsaWQgYnJvd3NlciBoYXMgYmVlbiBjcmVhdGVkJztcclxuICB9XHJcblxyXG4gIHJldHVybiBicm93c2VyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsb3NlID0gYXN5bmMgKCkgPT4ge1xyXG4gIC8vIENsb3NlIHRoZSBicm93c2VyIHdoZW4gY29ubm5lY3RlZFxyXG4gIGlmIChicm93c2VyLmNvbm5lY3RlZCkge1xyXG4gICAgYXdhaXQgYnJvd3Nlci5jbG9zZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBnZXQsXHJcbiAgY2xvc2UsXHJcbiAgbmV3UGFnZVxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vIFRPRE86IHJlbW92ZSB0aGlzIHRlbXAgYmVuY2htYXJrIHN0dWZmLiBJIGhhZCB0aGlzIGlkZWEgb2YgZG9pbmcgYSBnZW5lcmFsIGJlbmNobWFya2luZ1xyXG4vLyBzeXN0ZW0sIGJ1dCBpdCBhZGRzIHNvIG11Y2ggYmxvYXQgaW4gdGhlIGNvZGUgdGhhdCBpdCBzaG91bGRuJ3QgYmUgdGhlcmUuXHJcblxyXG5pbXBvcnQgYmVuY2htYXJrIGZyb20gJy4vYmVuY2htYXJrLmpzJztcclxuaW1wb3J0IGNhY2hlIGZyb20gJy4vY2FjaGUuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCBzdmdUZW1wbGF0ZSBmcm9tICcuLy4uL3RlbXBsYXRlcy9zdmdfZXhwb3J0L3N2Z19leHBvcnQuanMnO1xyXG5cclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgdXJsIGZyb20gJ3VybCc7XHJcblxyXG5jb25zdCBfX2Jhc2VkaXIgPSB1cmwuZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuJywgaW1wb3J0Lm1ldGEudXJsKSk7XHJcblxyXG4vLyBjb25zdCBqc29uVGVtcGxhdGUgPSByZXF1aXJlKCcuLy4uL3RlbXBsYXRlcy9qc29uX2V4cG9ydC9qc29uX2V4cG9ydC5qcycpO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGNsaXAgcmVnaW9uIGZvciB0aGUgY2hhcnQgRE9NIG5vZGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYWdlIC0gQSBwYWdlIG9mIGEgYnJvd3NlciBpbnN0YW5jZS5cclxuICogQHJldHVybiB7b2JqZWN0fSAtIEEgY2xpcHBlZCByZWdpb24uXHJcbiAqL1xyXG5jb25zdCBnZXRDbGlwUmVnaW9uID0gKHBhZ2UpID0+XHJcbiAgcGFnZS4kZXZhbCgnI2NoYXJ0LWNvbnRhaW5lcicsIChlbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4LFxyXG4gICAgICB5LFxyXG4gICAgICB3aWR0aCxcclxuICAgICAgaGVpZ2h0OiBNYXRoLnRydW5jKGhlaWdodCA+IDEgPyBoZWlnaHQgOiA1MDApXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuLyoqXHJcbiAqIFJhc3Rlcml6ZXMgdGhlIHBhZ2UgdG8gYW4gaW1hZ2UgKFBORyBvciBKUEVHKVxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcGFnZSAtIEEgcGFnZSBvZiBhIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgYSByZXN1bHQgaW1hZ2UuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZyAtIFRoZSB0eXBlIG9mIGVuY29kaW5nIHVzZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGlwIC0gVGhlIGNsaXAgcmVnaW9uLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc2NyZWVuc2hvdC5cclxuICovXHJcbmNvbnN0IGNyZWF0ZUltYWdlID0gYXN5bmMgKHBhZ2UsIHR5cGUsIGVuY29kaW5nLCBjbGlwKSA9PlxyXG4gIGF3YWl0IFByb21pc2UucmFjZShbXHJcbiAgICBwYWdlLnNjcmVlbnNob3Qoe1xyXG4gICAgICB0eXBlLFxyXG4gICAgICBlbmNvZGluZyxcclxuICAgICAgY2xpcCxcclxuXHJcbiAgICAgIC8vICM0NDcgLSBhbHdheXMgcmVuZGVyIG9uIGEgdHJhbnNwYXJlbnQgcGFnZVxyXG4gICAgICAvLyB0aGlzIHdpbGwgbm90IGFmZmVjdCB1c2VycyB3aG8gZG8gbm90IGV4cGxpY2l0bHkgc2V0XHJcbiAgICAgIC8vIGNoYXJ0LmJhY2tncm91bmRDb2xvciB0byBhIGNvbG9yIHdpdGggb3BhY2l0eSBsb3dlciB0aGFuIDFcclxuICAgICAgb21pdEJhY2tncm91bmQ6IHRydWVcclxuICAgIH0pLFxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdSYXN0ZXJpemF0aW9uIHRpbWVvdXQnKSksIDE1MDApXHJcbiAgICApXHJcbiAgXSk7XHJcblxyXG4vKipcclxuICogVHVybnMgcGFnZSBpbnRvIGEgUERGLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcGFnZSAtIEEgcGFnZSBvZiBhIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIGEgY2hhcnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiBhIGNoYXJ0LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RpbmcgLSBUaGUgdHlwZSBvZiBlbmNvZGluZyB1c2VkLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gQSBidWZmZXIgd2l0aCBQREYgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVQREYgPSBhc3luYyAocGFnZSwgaGVpZ2h0LCB3aWR0aCwgZW5jb2RpbmcpID0+XHJcbiAgYXdhaXQgcGFnZS5wZGYoe1xyXG4gICAgLy8gVGhpcyB3aWxsIHJlbW92ZSBhbiBleHRyYSBlbXB0eSBwYWdlIGluIFBERiBleHBvcnRzXHJcbiAgICBoZWlnaHQ6IGhlaWdodCArIDEsXHJcbiAgICB3aWR0aCxcclxuICAgIGVuY29kaW5nXHJcbiAgfSk7XHJcblxyXG4vKipcclxuICogRXhwb3J0cyBhcyBhIFNWRy5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IHBhZ2UgLSBBIHBhZ2Ugb2YgYSBicm93c2VyIGluc3RhbmNlLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIG91dGVySFRNTCBlbGVtZW50IHdpdGggdGhlIFNWRyByZXByZXNlbnRhdGlvbi5cclxuICovXHJcbmNvbnN0IGNyZWF0ZVNWRyA9IGFzeW5jIChwYWdlKSA9PlxyXG4gIGF3YWl0IHBhZ2UuJGV2YWwoXHJcbiAgICAnI2NvbnRhaW5lciBzdmc6Zmlyc3Qtb2YtdHlwZScsXHJcbiAgICAoZWxlbWVudCkgPT4gZWxlbWVudC5vdXRlckhUTUxcclxuICApO1xyXG5cclxuLyoqIExvYWQgY29uZmlnIGludG8gYSBwYWdlIGFuZCByZW5kZXIgYSBjaGFydCAqL1xyXG5jb25zdCBzZXRBc0NvbmZpZyA9IGFzeW5jIChwYWdlLCBjaGFydCwgb3B0aW9ucykgPT5cclxuICBhd2FpdCBwYWdlLmV2YWx1YXRlKFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAoY2hhcnQsIG9wdGlvbnMpID0+IHdpbmRvdy50cmlnZ2VyRXhwb3J0KGNoYXJ0LCBvcHRpb25zKSxcclxuICAgIGNoYXJ0LFxyXG4gICAgb3B0aW9uc1xyXG4gICk7XHJcblxyXG4vKiogTG9hZCBTVkcgaW50byBhIHBhZ2UgKi9cclxuLy8gY29uc3Qgc2V0QXNTVkcgPSBhc3luYyAocGFnZSwgc3ZnU3RyKSA9PiB0cnVlO1xyXG5cclxuLyoqXHJcbiAqIERvZXMgYW4gZXhwb3J0IGZvciBhIGdpdmVuIGJyb3dzZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBicm93c2VyIC0gQSBicm93c2VyIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gY2hhcnQgLSBDaGFydCdzIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQWxsIG9wdGlvbnMgb2JqZWN0LlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGRhdGEgcmV0dXJuZWQgZnJvbSBvbmUgb2YgdGhlIG1ldGhvZHMgZm9yIGV4cG9ydGluZ1xyXG4gKiBhIHNwZWNpZmljIHR5cGUgb2YgYW4gaW1hZ2UuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhc3luYyAocGFnZSwgY2hhcnQsIG9wdGlvbnMpID0+IHtcclxuICAvKipcclxuICAgKiBLZWVwcyB0cmFjayBvZiBhbGwgcmVzb3VyY2VzIGFkZGVkIG9uIHRoZSBwYWdlIHdpdGggYWRkWFhYVGFnLiBldGNcclxuICAgKiBJdCdzIFZJVEFMIHRoYXQgYWxsIGFkZGVkIHJlc291cmNlcyBlbmRzIHVwIGhlcmUgc28gd2UgY2FuIGNsZWFyIHRoaW5nc1xyXG4gICAqIG91dCB3aGVuIGRvaW5nIGEgbmV3IGV4cG9ydCBpbiB0aGUgc2FtZSBwYWdlIVxyXG4gICAqL1xyXG4gIGNvbnN0IGluamVjdGVkUmVzb3VyY2VzID0gW107XHJcblxyXG4gIC8qKiBDbGVhciBvdXQgYWxsIHN0YXRlIHNldCBvbiB0aGUgcGFnZSB3aXRoIGFkZFNjcmlwdFRhZy9hZGRTdHlsZVRhZy4gKi9cclxuICBjb25zdCBjbGVhckluamVjdGVkID0gYXN5bmMgKHBhZ2UpID0+IHtcclxuICAgIGZvciAoY29uc3QgcmVzIG9mIGluamVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgIGF3YWl0IHJlcy5kaXNwb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzZXQgYWxsIENTUyBhbmQgc2NyaXB0IHRhZ3NcclxuICAgIGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4ge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgY29uc3QgWywgLi4uc2NyaXB0c1RvUmVtb3ZlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgIGNvbnN0IFssIC4uLnN0eWxlc1RvUmVtb3ZlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdHlsZScpO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgY29uc3QgWy4uLmxpbmtzVG9SZW1vdmVdID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpbmsnKTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSB0YWdzXHJcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbXHJcbiAgICAgICAgLi4uc2NyaXB0c1RvUmVtb3ZlLFxyXG4gICAgICAgIC4uLnN0eWxlc1RvUmVtb3ZlLFxyXG4gICAgICAgIC4uLmxpbmtzVG9SZW1vdmVcclxuICAgICAgXSkge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBleHBvcnRCZW5jaCA9IGJlbmNobWFyaygnUHVwcGV0ZWVyJyk7XHJcblxyXG4gICAgbG9nKDQsICdbZXhwb3J0XSBEZXRlcm1pbmluZyBleHBvcnQgcGF0aC4nKTtcclxuXHJcbiAgICBjb25zdCBleHBvcnRPcHRpb25zID0gb3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgLy8gRm9yY2UgYSByQUZcclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHVwcGV0ZWVyL3B1cHBldGVlci9pc3N1ZXMvNzUwN1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7fSkpO1xyXG5cclxuICAgIC8vIERlY2lkZSB3aGV0aGVyIGRpc3BsYXkgZXJyb3Igb3IgZGViYnVnZXIgd3JhcHBlciBhcm91bmQgaXRcclxuICAgIGNvbnN0IGRpc3BsYXlFcnJvcnMgPVxyXG4gICAgICBleHBvcnRPcHRpb25zPy5vcHRpb25zPy5jaGFydD8uZGlzcGxheUVycm9ycyAmJlxyXG4gICAgICBjYWNoZS5nZXRDYWNoZSgpLmFjdGl2ZU1hbmlmZXN0Lm1vZHVsZXMuZGVidWdnZXI7XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKChkKSA9PiAod2luZG93Ll9kaXNwbGF5RXJyb3JzID0gZCksIGRpc3BsYXlFcnJvcnMpO1xyXG5cclxuICAgIGNvbnN0IHN2Z0JlbmNoID0gYmVuY2htYXJrKCdTVkcgaGFuZGxpbmcnKTtcclxuXHJcbiAgICBsZXQgaXNTVkc7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBjaGFydC5pbmRleE9mICYmXHJcbiAgICAgIChjaGFydC5pbmRleE9mKCc8c3ZnJykgPj0gMCB8fCBjaGFydC5pbmRleE9mKCc8P3htbCcpID49IDApXHJcbiAgICApIHtcclxuICAgICAgLy8gU1ZHIElOUFVUIEhBTkRMSU5HXHJcblxyXG4gICAgICBsb2coNCwgJ1tleHBvcnRdIFRyZWF0aW5nIGFzIFNWRy4nKTtcclxuXHJcbiAgICAgIC8vIElmIGlucHV0IGlzIGFsc28gc3ZnLCBqdXN0IHJldHVybiBpdFxyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9ucy50eXBlID09PSAnc3ZnJykge1xyXG4gICAgICAgIHJldHVybiBjaGFydDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaXNTVkcgPSB0cnVlO1xyXG4gICAgICBjb25zdCBzZXRQYWdlQmVuY2ggPSBiZW5jaG1hcmsoJ1NldHRpbmcgY29udGVudCcpO1xyXG4gICAgICBhd2FpdCBwYWdlLnNldENvbnRlbnQoc3ZnVGVtcGxhdGUoY2hhcnQpKTtcclxuICAgICAgc2V0UGFnZUJlbmNoKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBKU09OIENvbmZpZyBoYW5kbGluZ1xyXG5cclxuICAgICAgbG9nKDQsICdbZXhwb3J0XSBUcmVhdGluZyBhcyBjb25maWcuJyk7XHJcblxyXG4gICAgICAvLyBOZWVkIHRvIHBlcmZvcm0gc3RyYWlnaHQgaW5qZWN0XHJcbiAgICAgIGlmIChleHBvcnRPcHRpb25zLnN0ckluaikge1xyXG4gICAgICAgIC8vIEluamVjdGlvbiBiYXNlZCBjb25maWd1cmF0aW9uIGV4cG9ydFxyXG4gICAgICAgIGNvbnN0IHNldFBhZ2VCZW5jaCA9IGJlbmNobWFyaygnU2V0dGluZyBwYWdlIGNvbnRlbnQgKGluamVjdCknKTtcclxuXHJcbiAgICAgICAgYXdhaXQgc2V0QXNDb25maWcoXHJcbiAgICAgICAgICBwYWdlLFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgIGhlaWdodDogZXhwb3J0T3B0aW9ucy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgd2lkdGg6IGV4cG9ydE9wdGlvbnMud2lkdGhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBzZXRQYWdlQmVuY2goKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBCYXNpYyBjb25maWd1cmF0aW9uIGV4cG9ydFxyXG5cclxuICAgICAgICBjaGFydC5jaGFydC5oZWlnaHQgPSBleHBvcnRPcHRpb25zLmhlaWdodDtcclxuICAgICAgICBjaGFydC5jaGFydC53aWR0aCA9IGV4cG9ydE9wdGlvbnMud2lkdGg7XHJcblxyXG4gICAgICAgIGNvbnN0IHNldENvbnRlbnRCZW5jaCA9IGJlbmNobWFyaygnU2V0dGluZyBwYWdlIGNvbnRlbnQgKGNvbmZpZyknKTtcclxuICAgICAgICBhd2FpdCBzZXRBc0NvbmZpZyhwYWdlLCBjaGFydCwgb3B0aW9ucyk7XHJcbiAgICAgICAgc2V0Q29udGVudEJlbmNoKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdmdCZW5jaCgpO1xyXG4gICAgY29uc3QgcmVzQmVuY2ggPSBiZW5jaG1hcmsoJ0FwcGx5aW5nIHJlc291cmNlcycpO1xyXG5cclxuICAgIC8vIFVzZSByZXNvdXJjZXNcclxuICAgIGNvbnN0IHJlc291cmNlcyA9IG9wdGlvbnMuY3VzdG9tQ29kZS5yZXNvdXJjZXM7XHJcbiAgICBpZiAocmVzb3VyY2VzKSB7XHJcbiAgICAgIC8vIExvYWQgY3VzdG9tIEpTIGNvZGVcclxuICAgICAgaWYgKHJlc291cmNlcy5qcykge1xyXG4gICAgICAgIGluamVjdGVkUmVzb3VyY2VzLnB1c2goXHJcbiAgICAgICAgICBhd2FpdCBwYWdlLmFkZFNjcmlwdFRhZyh7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHJlc291cmNlcy5qc1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBMb2FkIHNjcmlwdHMgZnJvbSBhbGwgY3VzdG9tIGZpbGVzXHJcbiAgICAgIGlmIChyZXNvdXJjZXMuZmlsZXMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgcmVzb3VyY2VzLmZpbGVzKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0xvY2FsID0gIWZpbGUuc3RhcnRzV2l0aCgnaHR0cCcpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGVhY2ggY3VzdG9tIHNjcmlwdCBmcm9tIHJlc291cmNlcycgZmlsZXNcclxuICAgICAgICAgICAgaW5qZWN0ZWRSZXNvdXJjZXMucHVzaChcclxuICAgICAgICAgICAgICBhd2FpdCBwYWdlLmFkZFNjcmlwdFRhZyhcclxuICAgICAgICAgICAgICAgIGlzTG9jYWxcclxuICAgICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZWFkRmlsZVN5bmMoZmlsZSwgJ3V0ZjgnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBjYXRjaCAobm90aWNlKSB7XHJcbiAgICAgICAgICAgIGxvZyg0LCAnW2V4cG9ydF0gSlMgZmlsZSBub3QgZm91bmQuJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjc3NCZW5jaCA9IGJlbmNobWFyaygnTG9hZGluZyBjc3MnKTtcclxuXHJcbiAgICAgIC8vIExvYWQgQ1NTXHJcbiAgICAgIGlmIChyZXNvdXJjZXMuY3NzKSB7XHJcbiAgICAgICAgbGV0IGNzc0ltcG9ydHMgPSByZXNvdXJjZXMuY3NzLm1hdGNoKC9AaW1wb3J0XFxzKihbXjtdKik7L2cpO1xyXG4gICAgICAgIGlmIChjc3NJbXBvcnRzKSB7XHJcbiAgICAgICAgICAvLyBIYW5kbGUgY3NzIHNlY3Rpb25cclxuICAgICAgICAgIGZvciAobGV0IGNzc0ltcG9ydFBhdGggb2YgY3NzSW1wb3J0cykge1xyXG4gICAgICAgICAgICBpZiAoY3NzSW1wb3J0UGF0aCkge1xyXG4gICAgICAgICAgICAgIGNzc0ltcG9ydFBhdGggPSBjc3NJbXBvcnRQYXRoXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgndXJsKCcsICcnKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ0BpbXBvcnQnLCAnJylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICcnKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLzsvLCAnJylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCkvZywgJycpXHJcbiAgICAgICAgICAgICAgICAudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBBZGQgZWFjaCBjdXN0b20gY3NzIGZyb20gcmVzb3VyY2VzXHJcbiAgICAgICAgICAgICAgaWYgKGNzc0ltcG9ydFBhdGguc3RhcnRzV2l0aCgnaHR0cCcpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RlZFJlc291cmNlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICBhd2FpdCBwYWdlLmFkZFN0eWxlVGFnKHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IGNzc0ltcG9ydFBhdGhcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmN1c3RvbUNvZGUuYWxsb3dGaWxlUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RlZFJlc291cmNlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICBhd2FpdCBwYWdlLmFkZFN0eWxlVGFnKHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oX19iYXNlZGlyLCBjc3NJbXBvcnRQYXRoKVxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBDU1Mgc2VjdGlvbiB3aWxsIGJlIGNvbnRlbnQgYnkgbm93XHJcbiAgICAgICAgaW5qZWN0ZWRSZXNvdXJjZXMucHVzaChcclxuICAgICAgICAgIGF3YWl0IHBhZ2UuYWRkU3R5bGVUYWcoe1xyXG4gICAgICAgICAgICBjb250ZW50OiByZXNvdXJjZXMuY3NzLnJlcGxhY2UoL0BpbXBvcnRcXHMqKFteO10qKTsvZywgJycpIHx8ICcgJ1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjc3NCZW5jaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc0JlbmNoKCk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSByZWFsIGNoYXJ0IHNpemVcclxuICAgIGNvbnN0IHNpemUgPSBpc1NWR1xyXG4gICAgICA/IGF3YWl0IHBhZ2UuJGV2YWwoXHJcbiAgICAgICAgICAnI2NoYXJ0LWNvbnRhaW5lciBzdmc6Zmlyc3Qtb2YtdHlwZScsXHJcbiAgICAgICAgICBhc3luYyAoZWxlbWVudCwgc2NhbGUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBjaGFydEhlaWdodDogZWxlbWVudC5oZWlnaHQuYmFzZVZhbC52YWx1ZSAqIHNjYWxlLFxyXG4gICAgICAgICAgICAgIGNoYXJ0V2lkdGg6IGVsZW1lbnQud2lkdGguYmFzZVZhbC52YWx1ZSAqIHNjYWxlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcGFyc2VGbG9hdChleHBvcnRPcHRpb25zLnNjYWxlKVxyXG4gICAgICAgIClcclxuICAgICAgOiBhd2FpdCBwYWdlLmV2YWx1YXRlKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgICAgY29uc3QgeyBjaGFydEhlaWdodCwgY2hhcnRXaWR0aCB9ID0gd2luZG93LkhpZ2hjaGFydHMuY2hhcnRzWzBdO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2hhcnRIZWlnaHQsXHJcbiAgICAgICAgICAgIGNoYXJ0V2lkdGhcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgdnBCZW5jaCA9IGJlbmNobWFyaygnU2V0dGluZyB2aWV3cG9ydCcpO1xyXG5cclxuICAgIC8vIFNldCBmaW5hbCBoZWlnaHQgYW5kIHdpZHRoIGZvciB2aWV3cG9ydFxyXG4gICAgY29uc3Qgdmlld3BvcnRIZWlnaHQgPSBNYXRoLmNlaWwoc2l6ZT8uY2hhcnRIZWlnaHQgfHwgZXhwb3J0T3B0aW9ucy5oZWlnaHQpO1xyXG4gICAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IE1hdGguY2VpbChzaXplPy5jaGFydFdpZHRoIHx8IGV4cG9ydE9wdGlvbnMud2lkdGgpO1xyXG5cclxuICAgIC8vIFNldCB0aGUgdmlld3BvcnQgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAvLyBOT1RFOiB0aGUgY2FsbCB0byBzZXRWaWV3cG9ydCBpcyBleHBlbnNpdmUgLSBjYW4gd2UgZ2V0IGF3YXkgd2l0aCBvbmx5XHJcbiAgICAvLyBjYWxsaW5nIGl0IG9uY2UsIGUuZy4gbW92aW5nIHRoaXMgb25lIGludG8gdGhlIGlzU1ZHIGNvbmRpdGlvbiBiZWxvdz9cclxuICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xyXG4gICAgICBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0LFxyXG4gICAgICB3aWR0aDogdmlld3BvcnRXaWR0aCxcclxuICAgICAgZGV2aWNlU2NhbGVGYWN0b3I6IGlzU1ZHID8gMSA6IHBhcnNlRmxvYXQoZXhwb3J0T3B0aW9ucy5zY2FsZSlcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFByZXBhcmUgYSB6b29tIGNhbGxiYWNrIGZvciB0aGUgbmV4dCBldmFsdWF0ZSBjYWxsXHJcbiAgICBjb25zdCB6b29tQ2FsbGJhY2sgPSBpc1NWR1xyXG4gICAgICA/IC8vIEluIGNhc2Ugb2YgU1ZHIHRoZSB6b29tIG11c3QgYmUgc2V0IGRpcmVjdGx5IGZvciBib2R5XHJcbiAgICAgICAgKHNjYWxlKSA9PiB7XHJcbiAgICAgICAgICAvLyBTZXQgdGhlIHpvb20gYXMgc2NhbGVcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS56b29tID0gc2NhbGU7XHJcblxyXG4gICAgICAgICAgLy8gU2V0IHRoZSBtYXJnaW4gdG8gMHB4XHJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gJzBweCc7XHJcbiAgICAgICAgfVxyXG4gICAgICA6IC8vIE5vIG5lZWQgZm9yIHN1Y2ggc2NhbGUgbWFuaXB1bGF0aW9uIGluIGNhc2Ugb2Ygb3RoZXIgdHlwZXMgb2YgZXhwb3J0c1xyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIC8vIFJlc2V0IHRoZSB6b29tIGZvciBvdGhlciBleHBvcnRzIHRoYW4gdG8gU1ZHc1xyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnpvb20gPSAxO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgLy8gU2V0IHRoZSB6b29tIGFjY29yZGluZ2x5XHJcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKHpvb21DYWxsYmFjaywgcGFyc2VGbG9hdChleHBvcnRPcHRpb25zLnNjYWxlKSk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBjbGlwIHJlZ2lvbiBmb3IgdGhlIHBhZ2VcclxuICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCwgeCwgeSB9ID0gYXdhaXQgZ2V0Q2xpcFJlZ2lvbihwYWdlKTtcclxuXHJcbiAgICBpZiAoIWlzU1ZHKSB7XHJcbiAgICAgIC8vIFNldCB0aGUgZmluYWwgdmlld3BvcnQgbm93IHRoYXQgd2UgaGF2ZSB0aGUgcmVhbCBoZWlnaHRcclxuICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydCh7XHJcbiAgICAgICAgd2lkdGg6IE1hdGgucm91bmQod2lkdGgpLFxyXG4gICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChoZWlnaHQpLFxyXG4gICAgICAgIGRldmljZVNjYWxlRmFjdG9yOiBwYXJzZUZsb2F0KGV4cG9ydE9wdGlvbnMuc2NhbGUpXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZwQmVuY2goKTtcclxuXHJcbiAgICBsZXQgZGF0YTtcclxuXHJcbiAgICBjb25zdCBleHBCZW5jaG1hcmsgPSBiZW5jaG1hcmsoJ1Jhc3Rlcml6aW5nIGNoYXJ0Jyk7XHJcblxyXG4gICAgLy8gUkFTVEVSSVpBVElPTlxyXG4gICAgaWYgKGV4cG9ydE9wdGlvbnMudHlwZSA9PT0gJ3N2ZycpIHtcclxuICAgICAgLy8gU1ZHXHJcbiAgICAgIGRhdGEgPSBhd2FpdCBjcmVhdGVTVkcocGFnZSk7XHJcbiAgICB9IGVsc2UgaWYgKGV4cG9ydE9wdGlvbnMudHlwZSA9PT0gJ3BuZycgfHwgZXhwb3J0T3B0aW9ucy50eXBlID09PSAnanBlZycpIHtcclxuICAgICAgLy8gUE5HIG9yIEpQRUdcclxuICAgICAgZGF0YSA9IGF3YWl0IGNyZWF0ZUltYWdlKHBhZ2UsIGV4cG9ydE9wdGlvbnMudHlwZSwgJ2Jhc2U2NCcsIHtcclxuICAgICAgICB3aWR0aDogdmlld3BvcnRXaWR0aCxcclxuICAgICAgICBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0LFxyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoZXhwb3J0T3B0aW9ucy50eXBlID09PSAncGRmJykge1xyXG4gICAgICAvLyBQREZcclxuICAgICAgZGF0YSA9IGF3YWl0IGNyZWF0ZVBERihwYWdlLCB2aWV3cG9ydEhlaWdodCwgdmlld3BvcnRXaWR0aCwgJ2Jhc2U2NCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgYFVuc3VwcG9ydGVkIG91dHB1dCBmb3JtYXQgJHtleHBvcnRPcHRpb25zLnR5cGV9YDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXN0cm95IG9sZCBjaGFydHMgYWZ0ZXIgdGhlIGV4cG9ydCBpcyBkb25lXHJcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgIGNvbnN0IG9sZENoYXJ0cyA9IEhpZ2hjaGFydHMuY2hhcnRzO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaW4gYW55IGFscmVhZHkgZXhpc3RpbmcgY2hhcnRzXHJcbiAgICAgIGlmIChvbGRDaGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gRGVzdHJveSBvbGQgY2hhcnRzXHJcbiAgICAgICAgZm9yIChjb25zdCBvbGRDaGFydCBvZiBvbGRDaGFydHMpIHtcclxuICAgICAgICAgIG9sZENoYXJ0ICYmIG9sZENoYXJ0LmRlc3Ryb3koKTtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgICAgSGlnaGNoYXJ0cy5jaGFydHMuc2hpZnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGV4cEJlbmNobWFyaygpO1xyXG4gICAgZXhwb3J0QmVuY2goKTtcclxuXHJcbiAgICBhd2FpdCBjbGVhckluamVjdGVkKHBhZ2UpO1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBhd2FpdCBjbGVhckluamVjdGVkKHBhZ2UpO1xyXG4gICAgbG9nKDEsIGBbZXhwb3J0XSBFcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgZXhwb3J0OiAke2Vycm9yfWApO1xyXG5cclxuICAgIHJldHVybiBlcnJvcjtcclxuICB9XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIyLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5jb25zdCB0aW1lcnMgPSB7fTtcclxuXHJcbi8vIFRPRE86IFJlYWQgZnJvbSBjb25maWdcclxubGV0IGVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChpZCkgPT4ge1xyXG4gIGlmICghZW5hYmxlZCkge1xyXG4gICAgcmV0dXJuICgpID0+IHt9O1xyXG4gIH1cclxuXHJcbiAgdGltZXJzW2lkXSA9IG5ldyBEYXRlKCk7XHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFtiZW5jaG1hcmtdIC0gJHtpZH06ICR7bmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aW1lcnNbaWRdLmdldFRpbWUoKX1tc2BcclxuICAgICk7XHJcbiAgfTtcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjMsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgY3NzVGVtcGxhdGUgZnJvbSAnLi9jc3MuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGNoYXJ0KSA9PiBgXHJcbjwhRE9DVFlQRSBodG1sPlxyXG48aHRtbCBsYW5nPSdlbi1VUyc+XHJcbiAgPGhlYWQ+XHJcbiAgICA8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFwiPlxyXG4gICAgPHRpdGxlPkhpZ2hjYXJ0cyBFeHBvcnQ8L3RpdGxlPlxyXG4gIDwvaGVhZD5cclxuICA8c3R5bGU+XHJcbiAgICAke2Nzc1RlbXBsYXRlKCl9XHJcbiAgPC9zdHlsZT5cclxuICA8Ym9keT5cclxuICAgIDxkaXYgaWQ9XCJjaGFydC1jb250YWluZXJcIj5cclxuICAgICAgJHtjaGFydH1cclxuICAgIDwvZGl2PlxyXG4gIDwvYm9keT5cclxuPC9odG1sPlxyXG5cclxuYDtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjMsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XHJcbmltcG9ydCB7IFBvb2wgfSBmcm9tICd0YXJuJztcclxuaW1wb3J0IHtcclxuICBjbG9zZSxcclxuICBuZXdQYWdlIGFzIGJyb3dzZXJOZXdQYWdlLFxyXG4gIGNyZWF0ZSBhcyBjcmVhdGVCcm93c2VyXHJcbn0gZnJvbSAnLi9icm93c2VyLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5cclxuaW1wb3J0IHB1cHBldGVlckV4cG9ydCBmcm9tICcuL2V4cG9ydC5qcyc7XHJcblxyXG5sZXQgcGVyZm9ybWVkRXhwb3J0cyA9IDA7XHJcbmxldCBleHBvcnRBdHRlbXB0cyA9IDA7XHJcbmxldCB0aW1lU3BlbnQgPSAwO1xyXG5sZXQgZHJvcHBlZEV4cG9ydHMgPSAwO1xyXG5sZXQgc3BlbnRBdmVyYWdlID0gMDtcclxubGV0IHBvb2xDb25maWcgPSB7fTtcclxuXHJcbi8vIFRoZSBwb29sIGluc3RhbmNlXHJcbmxldCBwb29sID0gZmFsc2U7XHJcblxyXG4vLyBDdXN0b20gcHVwcGV0ZWVyIGFyZ3VtZW50c1xyXG5sZXQgcHVwcGV0ZWVyQXJncztcclxuXHJcbmNvbnN0IGZhY3RvcnkgPSB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyB3b3JrZXIuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gQW4gb2JqZWN0IHdpdGggdGhlIGlkIG9mIGEgcmVzb3VyY2UsIHRoZSB3b3JrIGNvdW50IGFuZFxyXG4gICAqIGEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyIHBhZ2UuXHJcbiAgICovXHJcbiAgY3JlYXRlOiBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBpZCA9IHV1aWQoKTtcclxuICAgIGxldCBwYWdlID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3QgcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHBhZ2UgPSBhd2FpdCBicm93c2VyTmV3UGFnZSgpO1xyXG5cclxuICAgICAgaWYgKCFwYWdlIHx8IHBhZ2UuaXNDbG9zZWQoKSkge1xyXG4gICAgICAgIHRocm93ICdpbnZhbGlkIHBhZ2UnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsb2coXHJcbiAgICAgICAgMyxcclxuICAgICAgICBgW3Bvb2xdIFN1Y2Nlc3NmdWxseSBjcmVhdGVkIGEgd29ya2VyICR7aWR9IC0gdG9vayAke1xyXG4gICAgICAgICAgbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzXHJcbiAgICAgICAgfSBtcy5gXHJcbiAgICAgICk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgMSxcclxuICAgICAgICBgW3Bvb2xdIEVycm9yIGNyZWF0aW5nIGEgbmV3IHBhZ2UgaW4gcG9vbCBlbnRyeSBjcmVhdGlvbiEgJHtlcnJvcn1gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aHJvdyAnRXJyb3IgY3JlYXRpbmcgcGFnZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQsXHJcbiAgICAgIHBhZ2UsXHJcbiAgICAgIC8vIFRyeSB0byBkaXN0cmlidXRlIHRoZSBpbml0aWFsIHdvcmsgY291bnRcclxuICAgICAgd29ya0NvdW50OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAocG9vbENvbmZpZy53b3JrTGltaXQgLyAyKSlcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGVzIGEgd29ya2VyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IHdvcmtlckhhbmRsZSAtIEEgYnJvd3NlcidzIGluc3RhbmNlLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBCb29sIHRoYXQgaW5kaWNhdGVzIGlmIGEgcmVzb3VyY2UgaXMgdmFsaWQgb3Igbm90LlxyXG4gICAqL1xyXG4gIHZhbGlkYXRlOiAod29ya2VySGFuZGxlKSA9PiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHBvb2xDb25maWcud29ya0xpbWl0ICYmXHJcbiAgICAgICsrd29ya2VySGFuZGxlLndvcmtDb3VudCA+IHBvb2xDb25maWcud29ya0xpbWl0XHJcbiAgICApIHtcclxuICAgICAgbG9nKFxyXG4gICAgICAgIDMsXHJcbiAgICAgICAgYFtwb29sXSBXb3JrZXIgZmFpbGVkIHZhbGlkYXRpb246YCxcclxuICAgICAgICBgZXhjZWVkZWQgd29yayBsaW1pdCAobGltaXQgaXMgJHtwb29sQ29uZmlnLndvcmtMaW1pdH0pYFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95cyBhIHdvcmtlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB3b3JrZXJIYW5kbGUgLSBBIGJyb3dzZXIncyBpbnN0YW5jZS5cclxuICAgKi9cclxuICBkZXN0cm95OiAod29ya2VySGFuZGxlKSA9PiB7XHJcbiAgICBsb2coMywgYFtwb29sXSBEZXN0cm95aW5nIHBvb2wgZW50cnkgJHt3b3JrZXJIYW5kbGUuaWR9LmApO1xyXG5cclxuICAgIGlmICh3b3JrZXJIYW5kbGUucGFnZSkge1xyXG4gICAgICAvLyBXZSBkb24ndCByZWFsbHkgbmVlZCB0byB3YWl0IGFyb3VuZCBmb3IgdGhpcy5cclxuICAgICAgd29ya2VySGFuZGxlLnBhZ2UuY2xvc2UoKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBMb2dnZXIgZnVuY3Rpb25cclxuICBsb2c6IChtZXNzYWdlLCBsb2dMZXZlbCkgPT4gY29uc29sZS5sb2coYCR7bG9nTGV2ZWx9OiAke21lc3NhZ2V9YClcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbml0cyB0aGUgcG9vbCBvZiByZXNvdXJjZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBQb29sIGNvbmZpZ3VyYXRpb24gYWxvbmcgd2l0aCBjdXN0b20gcHVwcGV0ZWVyXHJcbiAqIGFyZ3VtZW50cyBmb3IgdGhlIHB1cHBldGVlci5sYXVuY2ggZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaW5pdCA9IGFzeW5jIChjb25maWcpID0+IHtcclxuICAvLyBUaGUgbmV3ZXN0IHB1cHBldGVlciBhcmd1bWVudHMgZm9yIHRoZSBicm93c2VyIGNyZWF0aW9uXHJcbiAgcHVwcGV0ZWVyQXJncyA9IGNvbmZpZy5wdXBwZXRlZXJBcmdzO1xyXG5cclxuICAvLyBXYWl0IHVudGlsIHdlJ3ZlIHN1Y2Vzc2Z1bGx5IGNyZWF0ZWQgYSBicm93c2VyIGluc3RhbmNlLlxyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjcmVhdGVCcm93c2VyKHB1cHBldGVlckFyZ3MpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGxvZygwLCAnW3Bvb2x8YnJvd3Nlcl0nLCBlKTtcclxuICB9XHJcblxyXG4gIC8vIEZvciB0aGUgbW9kdWxlIHNjb3BlIHVzYWdlXHJcbiAgcG9vbENvbmZpZyA9IGNvbmZpZyAmJiBjb25maWcucG9vbCA/IHsgLi4uY29uZmlnLnBvb2wgfSA6IHt9O1xyXG5cclxuICBsb2coXHJcbiAgICAzLFxyXG4gICAgJ1twb29sXSBJbml0aWFsaXppbmcgcG9vbDonLFxyXG4gICAgYG1pbiAke3Bvb2xDb25maWcuaW5pdGlhbFdvcmtlcnN9LCBtYXggJHtwb29sQ29uZmlnLm1heFdvcmtlcnN9LmBcclxuICApO1xyXG5cclxuICBpZiAocG9vbCkge1xyXG4gICAgcmV0dXJuIGxvZyhcclxuICAgICAgNCxcclxuICAgICAgJ1twb29sXSBBbHJlYWR5IGluaXRpYWxpemVkLCBwbGVhc2Uga2lsbCBpdCBiZWZvcmUgY3JlYXRpbmcgYSBuZXcgb25lLidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBBdHRhY2ggcHJvY2VzcycgZXhpdCBsaXN0ZW5lcnNcclxuICBpZiAocG9vbENvbmZpZy5saXN0ZW5Ub1Byb2Nlc3NFeGl0cykge1xyXG4gICAgYXR0YWNoUHJvY2Vzc0V4aXRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBDcmVhdGUgYSBwb29sIGFsb25nIHdpdGggYSBtaW5pbWFsIG51bWJlciBvZiByZXNvdXJjZXNcclxuICAgIHBvb2wgPSBuZXcgUG9vbCh7XHJcbiAgICAgIC8vIEdldCB0aGUgY3JlYXRlL3ZhbGlkYXRlL2Rlc3Ryb3kvbG9nIGZ1bmN0aW9uc1xyXG4gICAgICAuLi5mYWN0b3J5LFxyXG4gICAgICBtaW46IHBvb2xDb25maWcuaW5pdGlhbFdvcmtlcnMsXHJcbiAgICAgIG1heDogcG9vbENvbmZpZy5tYXhXb3JrZXJzLFxyXG4gICAgICBjcmVhdGVSZXRyeUludGVydmFsTWlsbGlzOiAyMDAsXHJcbiAgICAgIGNyZWF0ZVRpbWVvdXRNaWxsaXM6IHBvb2xDb25maWcuYWNxdWlyZVRpbWVvdXQsXHJcbiAgICAgIGFjcXVpcmVUaW1lb3V0TWlsbGlzOiBwb29sQ29uZmlnLmFjcXVpcmVUaW1lb3V0LFxyXG4gICAgICBkZXN0cm95VGltZW91dE1pbGxpczogcG9vbENvbmZpZy5hY3F1aXJlVGltZW91dCxcclxuICAgICAgaWRsZVRpbWVvdXRNaWxsaXM6IHBvb2xDb25maWcudGltZW91dFRocmVzaG9sZCxcclxuICAgICAgcmVhcEludGVydmFsTWlsbGlzOiAxMDAwLCAvLyBwb29sQ29uZmlnLnJlYXBlciA/IDEyMDAwMCA6IDAsIGZvciBub3dcclxuICAgICAgcHJvcGFnYXRlQ3JlYXRlRXJyb3I6IGZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTZXQgZXZlbnRzXHJcbiAgICBwb29sLm9uKCdjcmVhdGVGYWlsJywgKGV2ZW50SWQsIGVycikgPT4ge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgMSxcclxuICAgICAgICBgW3Bvb2xdIEVycm9yIHdoZW4gY3JlYXRpbmcgd29ya2VyIG9mIGFuIGV2ZW50IGlkICR7ZXZlbnRJZH06YCxcclxuICAgICAgICBlcnJcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvb2wub24oJ2FjcXVpcmVGYWlsJywgKGV2ZW50SWQsIGVycikgPT4ge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgMSxcclxuICAgICAgICBgW3Bvb2xdIEVycm9yIHdoZW4gYWNxdWlyaW5nIHdvcmtlciBvZiBhbiBldmVudCBpZCAke2V2ZW50SWR9OmAsXHJcbiAgICAgICAgZXJyXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwb29sLm9uKCdkZXN0cm95RmFpbCcsIChldmVudElkLCByZXNvdXJjZSwgZXJyKSA9PiB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAxLFxyXG4gICAgICAgIGBbcG9vbF0gRXJyb3Igd2hlbiBkZXN0cm95aW5nIHdvcmtlciBvZiBhbiBpZCAke3Jlc291cmNlLmlkfSwgZXZlbnQgaWQgJHtldmVudElkfTpgLFxyXG4gICAgICAgIGVyclxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcG9vbC5vbigncmVsZWFzZScsIChyZXNvdXJjZSkgPT4ge1xyXG4gICAgICBsb2coNCwgYFtwb29sXSBSZWxlYXNpbmcgYSB3b3JrZXIgb2YgYW4gaWQgJHtyZXNvdXJjZS5pZH1gKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvb2wub24oJ2Rlc3Ryb3lTdWNjZXNzJywgKGV2ZW50SWQsIHJlc291cmNlKSA9PiB7XHJcbiAgICAgIGxvZyg0LCBgW3Bvb2xdIERlc3Ryb3llZCBhIHdvcmtlciBvZiBhbiBpZCAke3Jlc291cmNlLmlkfWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbFJlc291cmNlcyA9IFtdO1xyXG4gICAgLy8gQ3JlYXRlIGFuIGluaXRpYWwgbnVtYmVyIG9mIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb29sQ29uZmlnLmluaXRpYWxXb3JrZXJzOyBpKyspIHtcclxuICAgICAgaW5pdGlhbFJlc291cmNlcy5wdXNoKGF3YWl0IHBvb2wuYWNxdWlyZSgpLnByb21pc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbGVhc2UgdGhlIGluaXRpYWwgbnVtYmVyIG9mIHJlc291cmNlcyBiYWNrIHRvIHRoZSBwb29sXHJcbiAgICBpbml0aWFsUmVzb3VyY2VzLmZvckVhY2goKHJlc291cmNlKSA9PiB7XHJcbiAgICAgIHBvb2wucmVsZWFzZShyZXNvdXJjZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbcG9vbF0gVGhlIHBvb2wgaXMgcmVhZHkgd2l0aCAke3Bvb2xDb25maWcuaW5pdGlhbFdvcmtlcnN9IGluaXRpYWwgcmVzb3VyY2VzIHdhaXRpbmcuYFxyXG4gICAgKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nKDEsIGBbcG9vbF0gQ291bGRuJ3QgY3JlYXRlIHRoZSB3b3JrZXIgcG9vbCAke2Vycm9yfWApO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEF0dGFjaGVzIHByb2Nlc3MnIGV4aXQgbGlzdGVuZXJzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaFByb2Nlc3NFeGl0TGlzdGVuZXJzKCkge1xyXG4gIGxvZyg0LCAnW3Bvb2xdIEF0dGFjaGluZyBleGl0IGxpc3RlbmVycyB0byB0aGUgcHJvY2Vzcy4nKTtcclxuXHJcbiAgLy8gS2lsbCBhbGwgcG9vbCByZXNvdXJjZXMgb24gZXhpdFxyXG4gIHByb2Nlc3Mub24oJ2V4aXQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBraWxsUG9vbCgpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBIYW5kbGVyIGZvciB0aGUgU0lHSU5UXHJcbiAgcHJvY2Vzcy5vbignU0lHSU5UJywgKG5hbWUsIGNvZGUpID0+IHtcclxuICAgIGxvZyg0LCBgVGhlICR7bmFtZX0gZXZlbnQgd2l0aCBjb2RlOiAke2NvZGV9LmApO1xyXG4gICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBIYW5kbGVyIGZvciB0aGUgU0lHVEVSTVxyXG4gIHByb2Nlc3Mub24oJ1NJR1RFUk0nLCAobmFtZSwgY29kZSkgPT4ge1xyXG4gICAgbG9nKDQsIGBUaGUgJHtuYW1lfSBldmVudCB3aXRoIGNvZGU6ICR7Y29kZX0uYCk7XHJcbiAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSB1bmNhdWdodEV4Y2VwdGlvblxyXG4gIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgYXN5bmMgKGVycm9yLCBuYW1lKSA9PiB7XHJcbiAgICBsb2coNCwgYFRoZSAke25hbWV9IGVycm9yLCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9LmApO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogS2lsbHMgdGhlIHBvb2wgYW5kIGZsdXNoIHRoZSBicm93c2VyIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGtpbGxQb29sKCkge1xyXG4gIGxvZygzLCAnW3Bvb2xdIEtpbGxpbmcgYWxsIHdvcmtlcnMuJyk7XHJcblxyXG4gIC8vIFJldHVybiB0cnVlIHdoZW4gdGhlIHBvb2wgaXMgYWxyZWFkeSBkZXN0cm95ZWRcclxuICBpZiAocG9vbC5kZXN0cm95ZWQpIHtcclxuICAgIC8vIENsb3NlIHRoZSBicm93c2VyIGluc3RhbmNlIGlmIHN0aWxsIGNvbm5lY3RlZFxyXG4gICAgYXdhaXQgY2xvc2UoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgc3RpbGwgYWxpdmUsIGRlc3Ryb3kgdGhlIHBvb2wgb2YgcGFnZXMgYmVmb3JlIGNsb3NpbmcgYSBicm93c2VyXHJcbiAgYXdhaXQgcG9vbC5kZXN0cm95KCk7XHJcblxyXG4gIC8vIENsb3NlIHRoZSBicm93c2VyIGluc3RhbmNlXHJcbiAgYXdhaXQgY2xvc2UoKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBvc3RzIHdvcmsgdG8gdGhlIHBvb2wuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjaGFydCAtIENoYXJ0J3Mgb3B0aW9ucy5cclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBBbGwgb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcG9zdFdvcmsgPSBhc3luYyAoY2hhcnQsIG9wdGlvbnMpID0+IHtcclxuICBsZXQgd29ya2VySGFuZGxlO1xyXG5cclxuICAvLyBIYW5kbGUgZmFpbCBjb25kaXRpb25zXHJcbiAgY29uc3QgZmFpbCA9IChtc2cpID0+IHtcclxuICAgICsrZHJvcHBlZEV4cG9ydHM7XHJcblxyXG4gICAgaWYgKHdvcmtlckhhbmRsZSkge1xyXG4gICAgICBwb29sLnJlbGVhc2Uod29ya2VySGFuZGxlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyAnSW4gcG9vbC5wb3N0V29yazogJyArIG1zZztcclxuICB9O1xyXG5cclxuICBsb2coNCwgJ1twb29sXSBXb3JrIHJlY2VpdmVkLCBzdGFydGluZyB0byBwcm9jZXNzLicpO1xyXG5cclxuICBpZiAocG9vbENvbmZpZy5iZW5jaG1hcmtpbmcpIHtcclxuICAgIGdldFBvb2xJbmZvKCk7XHJcbiAgfVxyXG5cclxuICArK2V4cG9ydEF0dGVtcHRzO1xyXG5cclxuICBpZiAoIXBvb2wpIHtcclxuICAgIGxvZygxLCAnW3Bvb2xdIFdvcmsgcmVjZWl2ZWQsIGJ1dCBwb29sIGhhcyBub3QgYmVlbiBzdGFydGVkLicpO1xyXG4gICAgcmV0dXJuIGZhaWwoJ1Bvb2wgaXMgbm90IGluaXRlZCBidXQgd29yayB3YXMgcG9zdGVkIHRvIGl0IScpO1xyXG4gIH1cclxuXHJcbiAgLy8gQWNxdWlyZSB0aGUgd29ya2VyIGFsb25nIHdpdGggdGhlIGlkIG9mIHJlc291cmNlIGFuZCB3b3JrIGNvdW50XHJcbiAgdHJ5IHtcclxuICAgIGxvZyg0LCAnW3Bvb2xdIEFjcXVpcmluZyB3b3JrZXInKTtcclxuICAgIHdvcmtlckhhbmRsZSA9IGF3YWl0IHBvb2wuYWNxdWlyZSgpLnByb21pc2U7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBmYWlsKGBbcG9vbF0gRXJyb3Igd2hlbiBhY3F1aXJpbmcgYXZhaWxhYmxlIGVudHJ5OiAke2Vycm9yfWApO1xyXG4gIH1cclxuXHJcbiAgbG9nKDQsICdbcG9vbF0gQWNxdWlyZWQgd29ya2VyIGhhbmRsZScpO1xyXG5cclxuICBpZiAoIXdvcmtlckhhbmRsZS5wYWdlKSB7XHJcbiAgICByZXR1cm4gZmFpbCgnUmVzb2x2ZWQgd29ya2VyIHBhZ2UgaXMgaW52YWxpZDogcG9vbCBzZXR1cCBpcyB3b25reScpO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFNhdmUgdGhlIHN0YXJ0IHRpbWVcclxuICAgIGxldCB3b3JrU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICBsb2coNCwgYFtwb29sXSBTdGFydGluZyB3b3JrIG9uIHBvb2wgZW50cnkgJHt3b3JrZXJIYW5kbGUuaWR9LmApO1xyXG5cclxuICAgIC8vIFBlcmZvcm0gYW4gZXhwb3J0IG9uIGEgcHVwcGV0ZWVyIGxldmVsXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXBwZXRlZXJFeHBvcnQod29ya2VySGFuZGxlLnBhZ2UsIGNoYXJ0LCBvcHRpb25zKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBpdCdzIGFuIGVycm9yXHJcbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgLy8gVE9ETzogSWYgdGhlIGV4cG9ydCBmYWlsZWQgYmVjYXVzZSBwdXBwZXRlZXIgdGltZWQgb3V0LCB3ZSBuZWVkIHRvIGZvcmNlIGtpbGwgdGhlIHdvcmtlciBzbyB3ZSBnZXQgYSBuZXcgcGFnZS4gVGhhdCBuZWVkcyB0byBiZSBoYW5kbGVkIGJldHRlciB0aGFuIHRoaXMgaGFjay5cclxuICAgICAgaWYgKHJlc3VsdC5tZXNzYWdlID09PSAnUmFzdGVyaXphdGlvbiB0aW1lb3V0Jykge1xyXG4gICAgICAgIHdvcmtlckhhbmRsZS5wYWdlLmNsb3NlKCk7XHJcbiAgICAgICAgd29ya2VySGFuZGxlLnBhZ2UgPSBhd2FpdCBicm93c2VyTmV3UGFnZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFpbChyZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbGVhc2UgdGhlIHJlc291cmNlIGJhY2sgdG8gdGhlIHBvb2xcclxuICAgIHBvb2wucmVsZWFzZSh3b3JrZXJIYW5kbGUpO1xyXG5cclxuICAgIC8vIFVzZWQgZm9yIHN0YXRpc3RpY3MgaW4gYXZlcmFnZVRpbWUgYW5kIHByb2Nlc3NlZFdvcmtDb3VudCwgd2hpY2hcclxuICAgIC8vIGluIHR1cm4gaXMgdXNlZCBieSB0aGUgL2hlYWx0aCByb3V0ZS5cclxuICAgIGNvbnN0IHdvcmtFbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGV4cG9ydFRpbWUgPSB3b3JrRW5kIC0gd29ya1N0YXJ0O1xyXG4gICAgdGltZVNwZW50ICs9IGV4cG9ydFRpbWU7XHJcbiAgICBzcGVudEF2ZXJhZ2UgPSB0aW1lU3BlbnQgLyArK3BlcmZvcm1lZEV4cG9ydHM7XHJcblxyXG4gICAgbG9nKDQsIGBbcG9vbF0gV29yayBjb21wbGV0ZWQgaW4gJHtleHBvcnRUaW1lfSBtcy5gKTtcclxuXHJcbiAgICAvLyBPdGhlcndpc2UgcmV0dXJuIHRoZSByZXN1bHRcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgZmFpbChgRXJyb3IgdHJ5aW5nIHRvIHBlcmZvcm0gcHVwcGV0ZWVyIGV4cG9ydDogJHtlcnJvcn0uYCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHBvb2wuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9vbCgpIHtcclxuICByZXR1cm4gcG9vbDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBvb2xJbmZvSlNPTiA9ICgpID0+ICh7XHJcbiAgbWluOiBwb29sLm1pbixcclxuICBtYXg6IHBvb2wubWF4LFxyXG4gIHNpemU6IHBvb2wuc2l6ZSxcclxuICBhdmFpbGFibGU6IHBvb2wuYXZhaWxhYmxlLFxyXG4gIGJvcnJvd2VkOiBwb29sLmJvcnJvd2VkLFxyXG4gIHBlbmRpbmc6IHBvb2wucGVuZGluZyxcclxuICBzcGFyZVJlc291cmNlQ2FwYWNpdHk6IHBvb2wuc3BhcmVSZXNvdXJjZUNhcGFjaXR5XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHBvb2wncyBpbmZvcm1hdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb29sSW5mbygpIHtcclxuICBjb25zdCB7XHJcbiAgICBtaW4sXHJcbiAgICBtYXgsXHJcbiAgICBzaXplLFxyXG4gICAgYXZhaWxhYmxlLFxyXG4gICAgYm9ycm93ZWQsXHJcbiAgICBwZW5kaW5nLFxyXG4gICAgc3BhcmVSZXNvdXJjZUNhcGFjaXR5XHJcbiAgfSA9IHBvb2w7XHJcblxyXG4gIGxvZyg0LCBgW3Bvb2xdIFRoZSBtaW5pbXVtIG51bWJlciBvZiByZXNvdXJjZXMgYWxsb3dlZCBieSBwb29sOiAke21pbn0uYCk7XHJcbiAgbG9nKDQsIGBbcG9vbF0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc291cmNlcyBhbGxvd2VkIGJ5IHBvb2w6ICR7bWF4fS5gKTtcclxuICBsb2coXHJcbiAgICA0LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIGFsbCByZXNvdXJjZXMgaW4gcG9vbCAoZnJlZSBvciBpbiB1c2UpOiAke3NpemV9LmBcclxuICApO1xyXG4gIGxvZyhcclxuICAgIDQsXHJcbiAgICBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIGN1cnJlbnRseSBhdmFpbGFibGU6ICR7YXZhaWxhYmxlfS5gXHJcbiAgKTtcclxuICBsb2coXHJcbiAgICA0LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIHJlc291cmNlcyB0aGF0IGFyZSBjdXJyZW50bHkgYWNxdWlyZWQ6ICR7Ym9ycm93ZWR9LmBcclxuICApO1xyXG4gIGxvZyhcclxuICAgIDQsXHJcbiAgICBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgY2FsbGVycyB3YWl0aW5nIHRvIGFjcXVpcmUgYSByZXNvdXJjZTogJHtwZW5kaW5nfS5gXHJcbiAgKTtcclxuICBsb2coXHJcbiAgICA0LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIGhvdyBtYW55IG1vcmUgcmVzb3VyY2VzIGNhbiB0aGUgcG9vbCBtYW5hZ2UvY3JlYXRlOiAke3NwYXJlUmVzb3VyY2VDYXBhY2l0eX0uYFxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBpbml0LFxyXG4gIGtpbGxQb29sLFxyXG4gIHBvc3RXb3JrLFxyXG4gIGdldFBvb2wsXHJcbiAgZ2V0UG9vbEluZm8sXHJcbiAgZ2V0UG9vbEluZm9KU09OLFxyXG4gIHdvcmtBdHRlbXB0czogKCkgPT4gZXhwb3J0QXR0ZW1wdHMsXHJcbiAgZHJvcHBlZFdvcms6ICgpID0+IGRyb3BwZWRFeHBvcnRzLFxyXG4gIGF2ZXJhZ2VUaW1lOiAoKSA9PiBzcGVudEF2ZXJhZ2UsXHJcbiAgcHJvY2Vzc2VkV29ya0NvdW50OiAoKSA9PiBwZXJmb3JtZWRFeHBvcnRzXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IGNhY2hlIGZyb20gJy4uLy4uL2NhY2hlLmpzJztcclxuaW1wb3J0IHBvb2wgZnJvbSAnLi4vLi4vcG9vbC5qcyc7XHJcblxyXG5jb25zdCBwYWNrYWdlVmVyc2lvbiA9IHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX3ZlcnNpb247XHJcbmNvbnN0IHNlcnZlclN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgL2hlYWx0aCByb3V0ZSB3aGljaCBvdXRwdXRzIGJhc2ljIHN0YXRzIGZvciB0aGUgc2VydmVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYXBwKSA9PlxyXG4gICFhcHBcclxuICAgID8gZmFsc2VcclxuICAgIDogYXBwLmdldCgnL2hlYWx0aCcsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmQoe1xyXG4gICAgICAgICAgc3RhdHVzOiAnT0snLFxyXG4gICAgICAgICAgYm9vdFRpbWU6IHNlcnZlclN0YXJ0VGltZSxcclxuICAgICAgICAgIHVwdGltZTpcclxuICAgICAgICAgICAgTWF0aC5mbG9vcihcclxuICAgICAgICAgICAgICAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzZXJ2ZXJTdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDAgLyA2MFxyXG4gICAgICAgICAgICApICsgJyBtaW51dGVzJyxcclxuICAgICAgICAgIHZlcnNpb246IHBhY2thZ2VWZXJzaW9uLFxyXG4gICAgICAgICAgaGlnaGNoYXJ0c1ZlcnNpb246IGNhY2hlLnZlcnNpb24oKSxcclxuICAgICAgICAgIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogcG9vbC5hdmVyYWdlVGltZSgpLFxyXG4gICAgICAgICAgcGVyZm9ybWVkRXhwb3J0czogcG9vbC5wcm9jZXNzZWRXb3JrQ291bnQoKSxcclxuICAgICAgICAgIGZhaWxlZEV4cG9ydHM6IHBvb2wuZHJvcHBlZFdvcmsoKSxcclxuICAgICAgICAgIGV4cG9ydEF0dGVtcHRzOiBwb29sLndvcmtBdHRlbXB0cygpLFxyXG4gICAgICAgICAgc3VjZXNzUmF0aW86IChwb29sLnByb2Nlc3NlZFdvcmtDb3VudCgpIC8gcG9vbC53b3JrQXR0ZW1wdHMoKSkgKiAxMDAsXHJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHQtbWVtYmVyXHJcbiAgICAgICAgICBwb29sOiBwb29sLmdldFBvb2xJbmZvSlNPTigpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IGV4aXN0c1N5bmMsIHJlYWRGaWxlU3luYywgcHJvbWlzZXMgYXMgZnNQcm9taXNlcyB9IGZyb20gJ2ZzJztcclxuXHJcbmltcG9ydCBwcm9tcHRzIGZyb20gJ3Byb21wdHMnO1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBkZWVwQ29weSwgaXNPYmplY3QsIHByaW50VXNhZ2UsIHRvQm9vbGVhbiB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5pbXBvcnQge1xyXG4gIGFic29sdXRlUHJvcHMsXHJcbiAgZGVmYXVsdENvbmZpZyxcclxuICBuZXN0ZWRBcmdzLFxyXG4gIHByb21wdHNDb25maWdcclxufSBmcm9tICcuL3NjaGVtYXMvY29uZmlnLmpzJztcclxuXHJcbmxldCBnZW5lcmFsT3B0aW9ucyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEdldHRlciBmb3IgdGhlIGdlbmVyYWwgb3B0aW9ucy5cclxuICpcclxuICogQHJldHVybiB7b2JqZWN0fSAtIEdlbmVyYWwgb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0T3B0aW9ucyA9ICgpID0+IGdlbmVyYWxPcHRpb25zO1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemVzIGFuZCBzZXRzIHRoZSBnZW5lcmFsIG9wdGlvbnMgZm9yIHRoZSBzZXJ2ZXIgaW5zdGFjZS5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IHVzZXJPcHRpb25zIC0gQWRkaXRpb25hbCB1c2VyIG9wdGlvbnMgKGUuZy4gZnJvbSB0aGUgbm9kZVxyXG4gKiBtb2R1bGUgdXNhZ2UpLlxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmdzIC0gQ0xJIGFyZ3VtZW50cy5cclxuICogQHJldHVybiB7b2JqZWN0fSAtIEdlbmVyYWwgb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2V0T3B0aW9ucyA9ICh1c2VyT3B0aW9ucywgYXJncykgPT4ge1xyXG4gIC8vIE9ubHkgZm9yIHRoZSBDTEkgdXNhZ2VcclxuICBpZiAoYXJncz8ubGVuZ3RoKSB7XHJcbiAgICAvLyBHZXQgdGhlIGFkZGl0aW9uYWwgb3B0aW9ucyBmcm9tIHRoZSBjdXN0b20gSlNPTiBmaWxlXHJcbiAgICBnZW5lcmFsT3B0aW9ucyA9IGxvYWRDb25maWdGaWxlKGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLy8gVXBkYXRlIHRoZSBkZWZhdWx0IGNvbmZpZyB3aXRoIGEgY29ycmVjdCBvcHRpb24gdmFsdWVzXHJcbiAgdXBkYXRlRGVmYXVsdENvbmZpZyhkZWZhdWx0Q29uZmlnLCBnZW5lcmFsT3B0aW9ucyk7XHJcblxyXG4gIC8vIFNldCB2YWx1ZXMgZm9yIHNlcnZlcidzIG9wdGlvbnMgYW5kIHJldHVybnMgdGhlbVxyXG4gIGdlbmVyYWxPcHRpb25zID0gaW5pdE9wdGlvbnMoZGVmYXVsdENvbmZpZyk7XHJcblxyXG4gIC8vIEFwcGx5IHVzZXIgb3B0aW9ucyBpZiB0aGVyZSBhcmUgYW55XHJcbiAgaWYgKHVzZXJPcHRpb25zKSB7XHJcbiAgICAvLyBNZXJnZSB1c2VyIG9wdGlvbnNcclxuICAgIGdlbmVyYWxPcHRpb25zID0gbWVyZ2VDb25maWdPcHRpb25zKFxyXG4gICAgICBnZW5lcmFsT3B0aW9ucyxcclxuICAgICAgdXNlck9wdGlvbnMsXHJcbiAgICAgIGFic29sdXRlUHJvcHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBPbmx5IGZvciB0aGUgQ0xJIHVzYWdlXHJcbiAgaWYgKGFyZ3M/Lmxlbmd0aCkge1xyXG4gICAgLy8gUGFpciBwcm92aWRlZCBhcmd1bWVudHNcclxuICAgIGdlbmVyYWxPcHRpb25zID0gcGFpckFyZ3VtZW50VmFsdWUoZ2VuZXJhbE9wdGlvbnMsIGFyZ3MsIGRlZmF1bHRDb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIGZpbmFsIGdlbmVyYWwgb3B0aW9uc1xyXG4gIHJldHVybiBnZW5lcmFsT3B0aW9ucztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEaXNwbGF5cyBhIHByb21wdCBmb3IgdGhlIG1hbnVhbCBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnRmlsZU5hbWUgLSBUaGUgbmFtZSBvZiBhIGNvbmZpZ3VyYXRpb24gZmlsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBtYW51YWxDb25maWcgPSBhc3luYyAoY29uZmlnRmlsZU5hbWUpID0+IHtcclxuICAvLyBQcmVwYXJlIGEgY29uZmlnIG9iamVjdFxyXG4gIGxldCBjb25maWdGaWxlID0ge307XHJcblxyXG4gIC8vIENoZWNrIGlmIHByb3ZpZGVkIGNvbmZpZyBmaWxlIGV4aXN0c1xyXG4gIGlmIChleGlzdHNTeW5jKGNvbmZpZ0ZpbGVOYW1lKSkge1xyXG4gICAgY29uZmlnRmlsZSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGNvbmZpZ0ZpbGVOYW1lLCAndXRmOCcpKTtcclxuICB9XHJcblxyXG4gIC8vIFF1ZXN0aW9uIGFib3V0IGEgY29uZmlndXJhdGlvbiBjYXRlZ29yeVxyXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMgKHAsIGNhdGVnb3JpZXMpID0+IHtcclxuICAgIGxldCBxdWVzdGlvbnNDb3VudGVyID0gMDtcclxuICAgIGxldCBhbGxRdWVzdGlvbnMgPSBbXTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IGluIHRoZSBtYW51YWxDb25maWcgb2JqZWN0XHJcbiAgICBmb3IgKGNvbnN0IHNlY3Rpb24gb2YgY2F0ZWdvcmllcykge1xyXG4gICAgICAvLyBNYXJrIGVhY2ggb3B0aW9uIHdpdGggYSBzZWN0aW9uXHJcbiAgICAgIHByb21wdHNDb25maWdbc2VjdGlvbl0gPSBwcm9tcHRzQ29uZmlnW3NlY3Rpb25dLm1hcCgob3B0aW9uKSA9PiAoe1xyXG4gICAgICAgIC4uLm9wdGlvbixcclxuICAgICAgICBzZWN0aW9uXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIC8vIENvbGxlY3QgdGhlIHF1ZXN0aW9uc1xyXG4gICAgICBhbGxRdWVzdGlvbnMgPSBbLi4uYWxsUXVlc3Rpb25zLCAuLi5wcm9tcHRzQ29uZmlnW3NlY3Rpb25dXTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBwcm9tcHRzKGFsbFF1ZXN0aW9ucywge1xyXG4gICAgICBvblN1Ym1pdDogYXN5bmMgKHByb21wdCwgYW5zd2VyKSA9PiB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBkZWZhdWx0IG1vZHVsZXNcclxuICAgICAgICBpZiAocHJvbXB0Lm5hbWUgPT09ICdtb2R1bGVzJykge1xyXG4gICAgICAgICAgYW5zd2VyID0gYW5zd2VyLmxlbmd0aFxyXG4gICAgICAgICAgICA/IGFuc3dlci5tYXAoKG1vZHVsZSkgPT4gcHJvbXB0LmNob2ljZXNbbW9kdWxlXSlcclxuICAgICAgICAgICAgOiBwcm9tcHQuY2hvaWNlcztcclxuXHJcbiAgICAgICAgICBjb25maWdGaWxlW3Byb21wdC5zZWN0aW9uXVtwcm9tcHQubmFtZV0gPSBhbnN3ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbmZpZ0ZpbGVbcHJvbXB0LnNlY3Rpb25dID0gcmVjdXJzaXZlUHJvcHMoXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ0ZpbGVbcHJvbXB0LnNlY3Rpb25dIHx8IHt9KSxcclxuICAgICAgICAgICAgcHJvbXB0Lm5hbWUuc3BsaXQoJy4nKSxcclxuICAgICAgICAgICAgYW5zd2VyXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCsrcXVlc3Rpb25zQ291bnRlciA9PT0gYWxsUXVlc3Rpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgZnNQcm9taXNlcy53cml0ZUZpbGUoXHJcbiAgICAgICAgICAgICAgY29uZmlnRmlsZU5hbWUsXHJcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoY29uZmlnRmlsZSwgbnVsbCwgMiksXHJcbiAgICAgICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBsb2coMSwgYFtjb25maWddIEVycm9yIHdoaWxlIGNyZWF0aW5nIGNvbmZpZy5qc29uOiAke2Vycm9yfWApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvLyBGaW5kIHRoZSBjYXRlZ29yaWVzXHJcbiAgY29uc3QgY2hvaWNlcyA9IE9iamVjdC5rZXlzKHByb21wdHNDb25maWcpLm1hcCgoY2hvaWNlKSA9PiAoe1xyXG4gICAgdGl0bGU6IGAke2Nob2ljZX0gb3B0aW9uc2AsXHJcbiAgICB2YWx1ZTogY2hvaWNlXHJcbiAgfSkpO1xyXG5cclxuICAvLyBDYXRlZ29yeSBwcm9tcHRcclxuICByZXR1cm4gcHJvbXB0cyhcclxuICAgIHtcclxuICAgICAgdHlwZTogJ211bHRpc2VsZWN0JyxcclxuICAgICAgbmFtZTogJ2NhdGVnb3J5JyxcclxuICAgICAgbWVzc2FnZTogJ1doaWNoIGNhdGVnb3J5IGRvIHlvdSB3YW50IHRvIGNvbmZpZ3VyZT8nLFxyXG4gICAgICBoaW50OiAnU3BhY2U6IFNlbGVjdCBzcGVjaWZpYywgQTogU2VsZWN0IGFsbCwgRW50ZXI6IENvbmZpcm0uJyxcclxuICAgICAgaW5zdHJ1Y3Rpb25zOiAnJyxcclxuICAgICAgY2hvaWNlc1xyXG4gICAgfSxcclxuICAgIHsgb25TdWJtaXQgfVxyXG4gICk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWFwcyB0aGUgb2xkIG9wdGlvbnMgdG8gdGhlIG5ldyBjb25maWcgc3RydWN0dXJlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gb2xkT3B0aW9ucyAtIE9wdGlvbnMgdG8gYmUgbWFwcGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1hcFRvTmV3Q29uZmlnID0gKG9sZE9wdGlvbnMpID0+IHtcclxuICBjb25zdCBuZXdPcHRpb25zID0ge307XHJcbiAgLy8gQ3ljbGUgdGhyb3VnaCBvbGQtc3RydWN0dXJlZCBvcHRpb25zXHJcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2xkT3B0aW9ucykpIHtcclxuICAgIGNvbnN0IHByb3BlcnRpZXNDaGFpbiA9IG5lc3RlZEFyZ3Nba2V5XSA/IG5lc3RlZEFyZ3Nba2V5XS5zcGxpdCgnLicpIDogW107XHJcblxyXG4gICAgLy8gUG9wdWxhdGUgb2JqZWN0IGluIGNvcnJlY3QgcHJvcGVydGllcyBsZXZlbHNcclxuICAgIHByb3BlcnRpZXNDaGFpbi5yZWR1Y2UoXHJcbiAgICAgIChvYmosIHByb3AsIGluZGV4KSA9PlxyXG4gICAgICAgIChvYmpbcHJvcF0gPVxyXG4gICAgICAgICAgcHJvcGVydGllc0NoYWluLmxlbmd0aCAtIDEgPT09IGluZGV4ID8gdmFsdWUgOiBvYmpbcHJvcF0gfHwge30pLFxyXG4gICAgICBuZXdPcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gbmV3T3B0aW9ucztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgdGhlIG5ldyBvcHRpb25zIHRvIHRoZSBvcHRpb25zIG9iamVjdC4gSXQgb21pdHMgdW5kZWZpbmVkIHZhbHVlcy5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPbGQgb3B0aW9ucy5cclxuICogQHBhcmFtIHtvYmplY3R9IG5ld09wdGlvbnMgLSBOZXcgb3B0aW9ucy5cclxuICogQHBhcmFtIHtzdHJpbmdbXX0gYWJzb2x1dGVQcm9wcyAtIEFycmF5IG9mIG9iamVjdCBuYW1lcyB0aGF0IHNob3VsZCBiZSBmb3JjZVxyXG4gKiBtZXJnZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWVyZ2VDb25maWdPcHRpb25zID0gKG9wdGlvbnMsIG5ld09wdGlvbnMsIGFic29sdXRlUHJvcHMgPSBbXSkgPT4ge1xyXG4gIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBkZWVwQ29weShvcHRpb25zKTtcclxuXHJcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobmV3T3B0aW9ucykpIHtcclxuICAgIG1lcmdlZE9wdGlvbnNba2V5XSA9XHJcbiAgICAgIGlzT2JqZWN0KHZhbHVlKSAmJlxyXG4gICAgICAhYWJzb2x1dGVQcm9wcy5pbmNsdWRlcyhrZXkpICYmXHJcbiAgICAgIG1lcmdlZE9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyBtZXJnZUNvbmZpZ09wdGlvbnMobWVyZ2VkT3B0aW9uc1trZXldLCB2YWx1ZSwgYWJzb2x1dGVQcm9wcylcclxuICAgICAgICA6IHZhbHVlICE9PSB1bmRlZmluZWRcclxuICAgICAgICA/IHZhbHVlXHJcbiAgICAgICAgOiBtZXJnZWRPcHRpb25zW2tleV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWVyZ2VkT3B0aW9ucztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyBvcHRpb25zIGZvciB0aGUgYHN0YXJ0RXhwb3J0YCBtZXRob2QgYnkgbWVyZ2luZyB1c2VyIG9wdGlvbnNcclxuICogd2l0aCB0aGUgZ2VuZXJhbCBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gZXhwb3J0T3B0aW9ucyAtIFVzZXIgb3B0aW9ucyBmb3IgZXhwb3J0aW5nLlxyXG4gKiBAcGFyYW0ge2FueX0gZ2VuZXJhbE9wdGlvbnMgLSBHZW5lcmFsIG9wdGlvbnMgYXJlIHVzZWQgZm9yIHRoZSBleHBvcnQgc2VydmVyLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gVXNlciBvcHRpb25zIG1lcmdlZCB3aXRoIGRlZmF1bHQgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBpbml0RXhwb3J0U2V0dGluZ3MgPSAoZXhwb3J0T3B0aW9ucywgZ2VuZXJhbE9wdGlvbnMgPSB7fSkgPT4ge1xyXG4gIGxldCBvcHRpb25zID0ge307XHJcblxyXG4gIGlmIChleHBvcnRPcHRpb25zLnN2Zykge1xyXG4gICAgb3B0aW9ucyA9IGRlZXBDb3B5KGdlbmVyYWxPcHRpb25zKTtcclxuICAgIG9wdGlvbnMuZXhwb3J0LnR5cGUgPSBleHBvcnRPcHRpb25zLnR5cGUgfHwgZXhwb3J0T3B0aW9ucy5leHBvcnQudHlwZTtcclxuICAgIG9wdGlvbnMuZXhwb3J0LnNjYWxlID0gZXhwb3J0T3B0aW9ucy5zY2FsZSB8fCBleHBvcnRPcHRpb25zLmV4cG9ydC5zY2FsZTtcclxuICAgIG9wdGlvbnMuZXhwb3J0Lm91dGZpbGUgPVxyXG4gICAgICBleHBvcnRPcHRpb25zLm91dGZpbGUgfHwgZXhwb3J0T3B0aW9ucy5leHBvcnQub3V0ZmlsZTtcclxuICAgIG9wdGlvbnMucGF5bG9hZCA9IHtcclxuICAgICAgc3ZnOiBleHBvcnRPcHRpb25zLnN2Z1xyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlQ29uZmlnT3B0aW9ucyhcclxuICAgICAgZ2VuZXJhbE9wdGlvbnMsXHJcbiAgICAgIGV4cG9ydE9wdGlvbnMsXHJcbiAgICAgIC8vIE9taXQgZ29pbmcgZG93biByZWN1cnNpdmVseSB3aXRoIHRoZSBiZWxvd3NcclxuICAgICAgYWJzb2x1dGVQcm9wc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9wdGlvbnMuZXhwb3J0Lm91dGZpbGUgPVxyXG4gICAgb3B0aW9ucy5leHBvcnQ/Lm91dGZpbGUgfHwgYGNoYXJ0LiR7b3B0aW9ucy5leHBvcnQ/LnR5cGUgfHwgJ3BuZyd9YDtcclxuICByZXR1cm4gb3B0aW9ucztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb2FkcyB0aGUgY29uZmlndXJhdGlvbiBmcm9tIGEgY3VzdG9tIEpTT04gZmlsZS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJncyAtIENMSSBhcmd1bWVudHMuXHJcbiAqIEByZXR1cm4ge29iamVjdH0gLSBPcHRpb25zIG9iamVjdCBmcm9tIHRoZSBKU09OIGZpbGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkQ29uZmlnRmlsZShhcmdzKSB7XHJcbiAgLy8gQ2hlY2sgaWYgdGhlIC0tbG9hZENvbmZpZyBvcHRpb24gd2FzIHVzZWRcclxuICBjb25zdCBjb25maWdJbmRleCA9IGFyZ3MuZmluZEluZGV4KFxyXG4gICAgKGFyZykgPT4gYXJnLnJlcGxhY2UoLy0vZywgJycpID09PSAnbG9hZENvbmZpZydcclxuICApO1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgLS1sb2FkQ29uZmlnIGhhcyBhIHZhbHVlXHJcbiAgaWYgKGNvbmZpZ0luZGV4ID4gLTEgJiYgYXJnc1tjb25maWdJbmRleCArIDFdKSB7XHJcbiAgICBjb25zdCBmaWxlTmFtZSA9IGFyZ3NbY29uZmlnSW5kZXggKyAxXTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIGFuIGFkZGl0aW9uYWwgY29uZmlnIGZpbGUgaXMgYSBjb3JyZWN0IEpTT04gZmlsZVxyXG4gICAgICBpZiAoZmlsZU5hbWUgJiYgZmlsZU5hbWUuZW5kc1dpdGgoJy5qc29uJykpIHtcclxuICAgICAgICAvLyBMb2FkIGFuIG9wdGlvbmFsIGN1c3RvbSBKU09OIGNvbmZpZyBmaWxlXHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGZpbGVOYW1lKSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZygxLCBgW2NvbmZpZ10gVW5hYmxlIHRvIGxvYWQgY29uZmlnIGZyb20gdGhlICR7ZmlsZU5hbWV9OiAke2Vycm9yfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTm8gYWRkaXRpb25hbCBvcHRpb25zIHRvIHJldHVyblxyXG4gIHJldHVybiB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHRpbmcgY29ycmVjdCB2YWx1ZXMgb2YgdGhlIG9wdGlvbnMgZnJvbSB0aGUgZGVmYXVsdCBjb25maWcuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWdPYmogLSBUaGUgY29uZmlnIG9iamVjdCBiYXNlZCBvbiB3aGljaCB0aGUgaW5pdGlhbFxyXG4gKiBjb25maWd1cmF0aW9uIGJlIG1hZGUuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjdXN0b21PYmogLSBUaGUgY3VzdG9tIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBhZGRpdGlvbmFsXHJcbiAqIG9wdGlvbiB2YWx1ZXMgdG8gc2V0LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcENoYWluIC0gUmVxdWlyZWQgZm9yIGNyZWF0aW5nIGEgc3RyaW5nIGNoYWluIG9mXHJcbiAqIHByb3BlcnRpZXMgZm9yIG5lc3RlZCBhcmd1bWVudHMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVEZWZhdWx0Q29uZmlnKGNvbmZpZ09iaiwgY3VzdG9tT2JqID0ge30sIHByb3BDaGFpbiA9ICcnKSB7XHJcbiAgT2JqZWN0LmtleXMoY29uZmlnT2JqKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGlmICghWydwdXBwZXRlZXInLCAnaGlnaGNoYXJ0cyddLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgY29uc3QgZW50cnkgPSBjb25maWdPYmpba2V5XTtcclxuICAgICAgY29uc3QgY3VzdG9tVmFsdWUgPSBjdXN0b21PYmogJiYgY3VzdG9tT2JqW2tleV07XHJcbiAgICAgIGxldCBudW1FbnZWYWw7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGVudHJ5LnZhbHVlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHVwZGF0ZURlZmF1bHRDb25maWcoZW50cnksIGN1c3RvbVZhbHVlLCBgJHtwcm9wQ2hhaW59LiR7a2V5fWApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIElmIGEgdmFsdWUgZnJvbSBhIGN1c3RvbSBKU09OIGV4aXN0cywgaXQgdGFrZSBwcmVjZWRlbmNlXHJcbiAgICAgICAgaWYgKGN1c3RvbVZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGVudHJ5LnZhbHVlID0gY3VzdG9tVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhIHZhbHVlIGZyb20gYW4gZW52IHZhcmlhYmxlIGV4aXN0cywgaXQgdGFrZSBwcmVjZWRlbmNlXHJcbiAgICAgICAgaWYgKGVudHJ5LmVudkxpbmspIHtcclxuICAgICAgICAgIC8vIExvYWQgdGhlIGVudiB2YXJcclxuICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgZW50cnkudmFsdWUgPSB0b0Jvb2xlYW4oXHJcbiAgICAgICAgICAgICAgW3Byb2Nlc3MuZW52W2VudHJ5LmVudkxpbmtdLCBlbnRyeS52YWx1ZV0uZmluZChcclxuICAgICAgICAgICAgICAgIChlbCkgPT4gZWwgfHwgZWwgPT09ICdmYWxzZSdcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGVudHJ5LnR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIG51bUVudlZhbCA9ICtwcm9jZXNzLmVudltlbnRyeS5lbnZMaW5rXTtcclxuICAgICAgICAgICAgZW50cnkudmFsdWUgPSBudW1FbnZWYWwgPj0gMCA/IG51bUVudlZhbCA6IGVudHJ5LnZhbHVlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgZW50cnkudHlwZS5pbmRleE9mKCddJykgPj0gMCAmJlxyXG4gICAgICAgICAgICBwcm9jZXNzLmVudltlbnRyeS5lbnZMaW5rXVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnZhbHVlID0gcHJvY2Vzcy5lbnZbZW50cnkuZW52TGlua10uc3BsaXQoJywnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnZhbHVlID0gcHJvY2Vzcy5lbnZbZW50cnkuZW52TGlua10gfHwgZW50cnkudmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0cyBvcHRpb25zIHJlY3Vyc2l2ZWx5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gaXRlbXMgLSBJdGVtcyB0byB1cGRhdGUgb3B0aW9ucyBmcm9tLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gVXBkYXRlZCBvcHRpb25zIG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGluaXRPcHRpb25zKGl0ZW1zKSB7XHJcbiAgbGV0IG9wdGlvbnMgPSB7fTtcclxuICBmb3IgKGNvbnN0IFtuYW1lLCBpdGVtXSBvZiBPYmplY3QuZW50cmllcyhpdGVtcykpIHtcclxuICAgIG9wdGlvbnNbbmFtZV0gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgJ3ZhbHVlJylcclxuICAgICAgPyBpdGVtLnZhbHVlXHJcbiAgICAgIDogaW5pdE9wdGlvbnMoaXRlbSk7XHJcbiAgfVxyXG4gIHJldHVybiBvcHRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogUGFpcnMgYXJndW1lbnQgd2l0aCBhIGNvcnJlc3BvbmRpbmcgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQWxsIHNlcnZlciBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmdzIC0gQXJyYXkgb2YgYXJndW1lbnRzIGZyb20gYSB1c2VyLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdENvbmZpZyAtIFRoZSBkZWZhdWx0IGNvbmZpZyBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBwYWlyQXJndW1lbnRWYWx1ZShvcHRpb25zLCBhcmdzLCBkZWZhdWx0Q29uZmlnKSB7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgb3B0aW9uID0gYXJnc1tpXS5yZXBsYWNlKC8tL2csICcnKTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSByaWdodCBwbGFjZSBmb3IgcHJvcGVydHkncyB2YWx1ZVxyXG4gICAgY29uc3QgcHJvcGVydGllc0NoYWluID0gbmVzdGVkQXJnc1tvcHRpb25dXHJcbiAgICAgID8gbmVzdGVkQXJnc1tvcHRpb25dLnNwbGl0KCcuJylcclxuICAgICAgOiBbXTtcclxuXHJcbiAgICBwcm9wZXJ0aWVzQ2hhaW4ucmVkdWNlKChvYmosIHByb3AsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChwcm9wZXJ0aWVzQ2hhaW4ubGVuZ3RoIC0gMSA9PT0gaW5kZXgpIHtcclxuICAgICAgICAvLyBGaW5kcyBhbiBvcHRpb24gYW5kIHNldCBhIGNvcnJlc3BvbmRpbmcgdmFsdWVcclxuICAgICAgICBpZiAodHlwZW9mIG9ialtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIGlmIChhcmdzWysraV0pIHtcclxuICAgICAgICAgICAgb2JqW3Byb3BdID0gYXJnc1tpXSB8fCBvYmpbcHJvcF07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTWlzc2luZyBhcmd1bWVudCB2YWx1ZSBmb3IgJHtvcHRpb259IWAucmVkLCAnXFxuJyk7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwcmludFVzYWdlKGRlZmF1bHRDb25maWcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2JqW3Byb3BdO1xyXG4gICAgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IHNldHMgYSBwcm9wZXJ0eSBpbiBhIGNvcnJlY3QgaW5kZW50YXRpb24gbGV2ZWwgYmFzZWQgb24gdGhlXHJcbiAqIGFycmF5IG9mIG5lc3RlZCBwcm9wZXJ0aWVzIG5hbWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0VG9VcGRhdGUgLSBPYmplY3Qgd2hlcmUgYSBwcm9wZXJ0eSBtdXN0IGJlIHNldCBvbiBhXHJcbiAqIGNvcnJlY3QgbGV2ZWwuXHJcbiAqIEBwYXJhbSAge3N0cmluZ1tdfW5lc3RlZE5hbWVzIC0gQXJyYXkgb2YgbmFzdGVkIG5hbWVzIHRoYXQgaW5kaWNhdGVzXHJcbiAqIGluZGVudGF0aW9uIGxldmVsLlxyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBBIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgcHJvcGVydHkuXHJcbiAqIEByZXR1cm4ge29iamVjdH0gLSBVcGRhdGVkIG9wdGlvbnMgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVjdXJzaXZlUHJvcHMob2JqZWN0VG9VcGRhdGUsIG5lc3RlZE5hbWVzLCB2YWx1ZSkge1xyXG4gIHdoaWxlIChuZXN0ZWROYW1lcy5sZW5ndGggPiAxKSB7XHJcbiAgICBjb25zdCBwcm9wTmFtZSA9IG5lc3RlZE5hbWVzLnNoaWZ0KCk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgcHJvcGVydHkgaW4gb2JqZWN0IGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdFRvVXBkYXRlLCBwcm9wTmFtZSkpIHtcclxuICAgICAgb2JqZWN0VG9VcGRhdGVbcHJvcE5hbWVdID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCBmdW5jdGlvbiBhZ2FpbiBpZiB0aGVyZSBzdGlsbCBuYW1lcyB0byBnb1xyXG4gICAgb2JqZWN0VG9VcGRhdGVbcHJvcE5hbWVdID0gcmVjdXJzaXZlUHJvcHMoXHJcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIG9iamVjdFRvVXBkYXRlW3Byb3BOYW1lXSksXHJcbiAgICAgIG5lc3RlZE5hbWVzLFxyXG4gICAgICB2YWx1ZVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gb2JqZWN0VG9VcGRhdGU7XHJcbiAgfVxyXG5cclxuICAvLyBBc3NpZ24gdGhlIGZpbmFsIHZhbHVlXHJcbiAgb2JqZWN0VG9VcGRhdGVbbmVzdGVkTmFtZXNbMF1dID0gdmFsdWU7XHJcbiAgcmV0dXJuIG9iamVjdFRvVXBkYXRlO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZ2V0T3B0aW9ucyxcclxuICBzZXRPcHRpb25zLFxyXG4gIG1hbnVhbENvbmZpZyxcclxuICBtYXBUb05ld0NvbmZpZyxcclxuICBtZXJnZUNvbmZpZ09wdGlvbnMsXHJcbiAgaW5pdEV4cG9ydFNldHRpbmdzXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgcmVhZEZpbGUsIHJlYWRGaWxlU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuXHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsga2lsbFBvb2wsIHBvc3RXb3JrIH0gZnJvbSAnLi9wb29sLmpzJztcclxuaW1wb3J0IHtcclxuICBjbGVhclRleHQsXHJcbiAgZml4VHlwZSxcclxuICBoYW5kbGVSZXNvdXJjZXMsXHJcbiAgaXNDb3JyZWN0SlNPTixcclxuICBvcHRpb25zU3RyaW5naWZ5LFxyXG4gIHJvdW5kTnVtYmVyLFxyXG4gIHRvQm9vbGVhbixcclxuICB3cmFwQXJvdW5kXHJcbn0gZnJvbSAnLi91dGlscy5qcyc7XHJcbmltcG9ydCB7IGluaXRFeHBvcnRTZXR0aW5ncywgZ2V0T3B0aW9ucyB9IGZyb20gJy4vY29uZmlnLmpzJztcclxuXHJcbmxldCBhbGxvd0NvZGVFeGVjdXRpb24gPSBmYWxzZTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdGFydEV4cG9ydCA9IGFzeW5jIChzZXR0aW5ncywgZW5kQ2FsbGJhY2spID0+IHtcclxuICAvLyBTdGFydGluZyBleHBvcnRpbmcgcHJvY2VzcyBtZXNzYWdlXHJcbiAgbG9nKDQsICdbY2hhcnRdIFN0YXJ0aW5nIGV4cG9ydGluZyBwcm9jZXNzLicpO1xyXG5cclxuICAvLyBJbml0aWFsaXplIG9wdGlvbnNcclxuICBjb25zdCBvcHRpb25zID0gaW5pdEV4cG9ydFNldHRpbmdzKHNldHRpbmdzLCBnZXRPcHRpb25zKCkpO1xyXG5cclxuICAvLyBHZXQgdGhlIGV4cG9ydCBvcHRpb25zXHJcbiAgY29uc3QgZXhwb3J0T3B0aW9ucyA9IG9wdGlvbnMuZXhwb3J0O1xyXG5cclxuICAvLyBJZiBTVkcgaXMgYW4gaW5wdXQgKGFyZ3VtZW50IGNhbiBiZSBzZW50IG9ubHkgYnkgdGhlIHJlcXVlc3QpXHJcbiAgaWYgKG9wdGlvbnMucGF5bG9hZD8uc3ZnICYmIG9wdGlvbnMucGF5bG9hZC5zdmcgIT09ICcnKSB7XHJcbiAgICByZXR1cm4gZXhwb3J0QXNTdHJpbmcob3B0aW9ucy5wYXlsb2FkLnN2Zy50cmltKCksIG9wdGlvbnMsIGVuZENhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8vIEV4cG9ydCB1c2luZyBvcHRpb25zIGZyb20gdGhlIGZpbGVcclxuICBpZiAoZXhwb3J0T3B0aW9ucy5pbmZpbGUgJiYgZXhwb3J0T3B0aW9ucy5pbmZpbGUubGVuZ3RoKSB7XHJcbiAgICBsb2coNCwgJ1tjaGFydF0gQXR0ZW1wdGluZyB0byBleHBvcnQgZnJvbSBhbiBpbnB1dCBmaWxlLicpO1xyXG5cclxuICAgIC8vIFRyeSB0byByZWFkIHRoZSBmaWxlXHJcbiAgICByZXR1cm4gcmVhZEZpbGUoZXhwb3J0T3B0aW9ucy5pbmZpbGUsICd1dGY4JywgKGVycm9yLCBpbmZpbGUpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvZygxLCBgW2NoYXJ0XSBFcnJvciBsb2FkaW5nIGlucHV0IGZpbGU6ICR7ZXJyb3J9LmApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvblxyXG4gICAgICBvcHRpb25zLmV4cG9ydC5pbnN0ciA9IGluZmlsZTtcclxuICAgICAgcmV0dXJuIGV4cG9ydEFzU3RyaW5nKG9wdGlvbnMuZXhwb3J0Lmluc3RyLnRyaW0oKSwgb3B0aW9ucywgZW5kQ2FsbGJhY2spO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBFeHBvcnQgd2l0aCBvcHRpb25zIGZyb20gdGhlIHJhdyByZXByZXNlbnRhdGlvblxyXG4gIGlmIChcclxuICAgIChleHBvcnRPcHRpb25zLmluc3RyICYmIGV4cG9ydE9wdGlvbnMuaW5zdHIgIT09ICcnKSB8fFxyXG4gICAgKGV4cG9ydE9wdGlvbnMub3B0aW9ucyAmJiBleHBvcnRPcHRpb25zLm9wdGlvbnMgIT09ICcnKVxyXG4gICkge1xyXG4gICAgbG9nKDQsICdbY2hhcnRdIEF0dGVtcHRpbmcgdG8gZXhwb3J0IGZyb20gYSByYXcgaW5wdXQuJyk7XHJcblxyXG4gICAgLy8gUGVyZm9ybSBhIGRpcmVjdCBpbmplY3Qgd2hlbiBmb3JjZWRcclxuICAgIGlmICh0b0Jvb2xlYW4ob3B0aW9ucy5jdXN0b21Db2RlPy5hbGxvd0NvZGVFeGVjdXRpb24pKSB7XHJcbiAgICAgIHJldHVybiBkb1N0cmFpZ2h0SW5qZWN0KG9wdGlvbnMsIGVuZENhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFaXRoZXIgdHJ5IHRvIHBhcnNlIHRvIEpTT04gZmlyc3Qgb3IgZG8gdGhlIGRpcmVjdCBleHBvcnRcclxuICAgIHJldHVybiB0eXBlb2YgZXhwb3J0T3B0aW9ucy5pbnN0ciA9PT0gJ3N0cmluZydcclxuICAgICAgPyBleHBvcnRBc1N0cmluZyhleHBvcnRPcHRpb25zLmluc3RyLnRyaW0oKSwgb3B0aW9ucywgZW5kQ2FsbGJhY2spXHJcbiAgICAgIDogZG9FeHBvcnQoXHJcbiAgICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgICAgZXhwb3J0T3B0aW9ucy5pbnN0ciB8fCBleHBvcnRPcHRpb25zLm9wdGlvbnMsXHJcbiAgICAgICAgICBlbmRDYWxsYmFja1xyXG4gICAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBObyBpbnB1dCBzcGVjaWZpZWQsIHBhc3MgYW4gZXJyb3IgbWVzc2FnZSB0byB0aGUgY2FsbGJhY2tcclxuICBsb2coXHJcbiAgICAxLFxyXG4gICAgY2xlYXJUZXh0KFxyXG4gICAgICBgW2NoYXJ0XSBObyBpbnB1dCBzcGVjaWZpZWQuXHJcbiAgICAgICR7SlNPTi5zdHJpbmdpZnkoZXhwb3J0T3B0aW9ucywgdW5kZWZpbmVkLCAnICAnKX0uYFxyXG4gICAgKVxyXG4gICk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICBlbmRDYWxsYmFjayAmJlxyXG4gICAgZW5kQ2FsbGJhY2soZmFsc2UsIHtcclxuICAgICAgZXJyb3I6IHRydWUsXHJcbiAgICAgIG1lc3NhZ2U6ICdObyBpbnB1dCBzcGVjaWZpZWQuJ1xyXG4gICAgfSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGJhdGNoRXhwb3J0ID0gKG9wdGlvbnMpID0+IHtcclxuICBjb25zdCBiYXRjaEZ1bmN0aW9ucyA9IFtdO1xyXG5cclxuICAvLyBTcGxpdCBhbmQgcGFpciB0aGUgLS1iYXRjaCBhcmd1bWVudHNcclxuICBmb3IgKGxldCBwYWlyIG9mIG9wdGlvbnMuZXhwb3J0LmJhdGNoLnNwbGl0KCc7JykpIHtcclxuICAgIHBhaXIgPSBwYWlyLnNwbGl0KCc9Jyk7XHJcbiAgICBpZiAocGFpci5sZW5ndGggPT09IDIpIHtcclxuICAgICAgYmF0Y2hGdW5jdGlvbnMucHVzaChcclxuICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBzdGFydEV4cG9ydChcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgZXhwb3J0OiB7XHJcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLmV4cG9ydCxcclxuICAgICAgICAgICAgICAgIGluZmlsZTogcGFpclswXSxcclxuICAgICAgICAgICAgICAgIG91dGZpbGU6IHBhaXJbMV1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChpbmZvLCBlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIFRocm93IGFuIGVycm9yXHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGJhc2U2NCBmcm9tIGEgYnVmZmVyIHRvIGEgY29ycmVjdCBpbWFnZSBmaWxlXHJcbiAgICAgICAgICAgICAgd3JpdGVGaWxlU3luYyhcclxuICAgICAgICAgICAgICAgIGluZm8ub3B0aW9ucy5leHBvcnQub3V0ZmlsZSxcclxuICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKGluZm8uZGF0YSwgJ2Jhc2U2NCcpXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBLaWxsIHRoZSBwb29sIGFmdGVyIGFsbCBleHBvcnRzIGFyZSBkb25lXHJcbiAgUHJvbWlzZS5hbGwoYmF0Y2hGdW5jdGlvbnMpXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIGtpbGxQb29sKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICBsb2coMSwgYFtjaGFydF0gRXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIGJhdGNoIGV4cG9ydDogJHtlcnJvcn1gKTtcclxuICAgICAga2lsbFBvb2woKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNpbmdsZUV4cG9ydCA9IChvcHRpb25zKSA9PiB7XHJcbiAgLy8gVXNlIGluc3RyIG9yIGl0cyBhbGlhcywgb3B0aW9uc1xyXG4gIG9wdGlvbnMuZXhwb3J0Lmluc3RyID0gb3B0aW9ucy5leHBvcnQuaW5zdHIgfHwgb3B0aW9ucy5leHBvcnQub3B0aW9ucztcclxuXHJcbiAgLy8gUGVyZm9ybSBhbiBleHBvcnRcclxuICBzdGFydEV4cG9ydChvcHRpb25zLCAoaW5mbywgZXJyb3IpID0+IHtcclxuICAgIC8vIEV4aXQgcHJvY2VzcyB3aGVuIGVycm9yXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgbG9nKDEsIGBbY2xpXSAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IG91dGZpbGUsIHR5cGUgfSA9IGluZm8ub3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgYmFzZTY0IGZyb20gYSBidWZmZXIgdG8gYSBjb3JyZWN0IGltYWdlIGZpbGVcclxuICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgIG91dGZpbGUgfHwgYGNoYXJ0LiR7dHlwZX1gLFxyXG4gICAgICB0eXBlICE9PSAnc3ZnJyA/IEJ1ZmZlci5mcm9tKGluZm8uZGF0YSwgJ2Jhc2U2NCcpIDogaW5mby5kYXRhXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEtpbGwgdGhlIHBvb2xcclxuICAgIGtpbGxQb29sKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gZm9yIGNob29zaW5nIGNoYXJ0IHNpemUgYW5kIHNjYWxlIGJhc2VkIG9uIG9wdGlvbnMgcHJpb3JpdGl6YXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQWxsIG9wdGlvbnMgb2JqZWN0LlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gQW4gb2JqZWN0IHdpdGggdXBkYXRlZCBzaXplIGFuZCBzY2FsZSBmb3IgYSBjaGFydC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmaW5kQ2hhcnRTaXplID0gKG9wdGlvbnMpID0+IHtcclxuICBjb25zdCB7IGNoYXJ0LCBleHBvcnRpbmcgfSA9XHJcbiAgICBvcHRpb25zLmV4cG9ydD8ub3B0aW9ucyB8fCBpc0NvcnJlY3RKU09OKG9wdGlvbnMuZXhwb3J0Py5pbnN0cik7XHJcblxyXG4gIC8vIFNlZSBpZiBnbG9iYWxPcHRpb25zIGhvbGRzIGNoYXJ0IG9yIGV4cG9ydGluZyBzaXplXHJcbiAgY29uc3QgZ2xvYmFsT3B0aW9ucyA9IGlzQ29ycmVjdEpTT04ob3B0aW9ucy5leHBvcnQ/Lmdsb2JhbE9wdGlvbnMpO1xyXG5cclxuICAvLyBTZWN1cmUgc2NhbGUgdmFsdWVcclxuICBsZXQgc2NhbGUgPVxyXG4gICAgb3B0aW9ucy5leHBvcnQ/LnNjYWxlIHx8XHJcbiAgICBleHBvcnRpbmc/LnNjYWxlIHx8XHJcbiAgICBnbG9iYWxPcHRpb25zPy5leHBvcnRpbmc/LnNjYWxlIHx8XHJcbiAgICBvcHRpb25zLmV4cG9ydD8uZGVmYXVsdFNjYWxlIHx8XHJcbiAgICAxO1xyXG5cclxuICAvLyB0aGUgc2NhbGUgY2Fubm90IGJlIGxvd2VyIHRoYW4gMC4xIGFuZCBjYW5ub3QgYmUgaGlnaGVyIHRoYW4gNS4wXHJcbiAgc2NhbGUgPSBNYXRoLm1heCgwLjEsIE1hdGgubWluKHNjYWxlLCA1LjApKTtcclxuXHJcbiAgLy8gd2Ugd2FudCB0byByb3VuZCB0aGUgbnVtYmVycyBsaWtlIDAuMjMyMzQgLT4gMC4yM1xyXG4gIHNjYWxlID0gcm91bmROdW1iZXIoc2NhbGUsIDIpO1xyXG5cclxuICAvLyBGaW5kIGNoYXJ0IHNpemUgYW5kIHNjYWxlXHJcbiAgcmV0dXJuIHtcclxuICAgIGhlaWdodDpcclxuICAgICAgb3B0aW9ucy5leHBvcnQ/LmhlaWdodCB8fFxyXG4gICAgICBleHBvcnRpbmc/LnNvdXJjZUhlaWdodCB8fFxyXG4gICAgICBjaGFydD8uaGVpZ2h0IHx8XHJcbiAgICAgIGdsb2JhbE9wdGlvbnM/LmV4cG9ydGluZz8uc291cmNlSGVpZ2h0IHx8XHJcbiAgICAgIGdsb2JhbE9wdGlvbnM/LmNoYXJ0Py5oZWlnaHQgfHxcclxuICAgICAgb3B0aW9ucy5leHBvcnQ/LmRlZmF1bHRIZWlnaHQgfHxcclxuICAgICAgNDAwLFxyXG4gICAgd2lkdGg6XHJcbiAgICAgIG9wdGlvbnMuZXhwb3J0Py53aWR0aCB8fFxyXG4gICAgICBleHBvcnRpbmc/LnNvdXJjZVdpZHRoIHx8XHJcbiAgICAgIGNoYXJ0Py53aWR0aCB8fFxyXG4gICAgICBnbG9iYWxPcHRpb25zPy5leHBvcnRpbmc/LnNvdXJjZVdpZHRoIHx8XHJcbiAgICAgIGdsb2JhbE9wdGlvbnM/LmNoYXJ0Py53aWR0aCB8fFxyXG4gICAgICBvcHRpb25zLmV4cG9ydD8uZGVmYXVsdFdpZHRoIHx8XHJcbiAgICAgIDYwMCxcclxuICAgIHNjYWxlXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiBmb3IgZmluYWwgb3B0aW9ucyBwcmVwYXJhdGlvbiBiZWZvcmUgZXhwb3J0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEFsbCBvcHRpb25zIG9iamVjdC5cclxuICogQHBhcmFtIHtvYmplY3R9IGNoYXJ0SnNvbiAtIENoYXJ0IEpTT04uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGVuZENhbGxiYWNrIC0gVGhlIGVuZCBjYWxsYmFjay5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN2ZyAtIFRoZSBTVkcgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5jb25zdCBkb0V4cG9ydCA9IChvcHRpb25zLCBjaGFydEpzb24sIGVuZENhbGxiYWNrLCBzdmcpID0+IHtcclxuICBsZXQgeyBleHBvcnQ6IGV4cG9ydE9wdGlvbnMsIGN1c3RvbUNvZGU6IGN1c3RvbUNvZGVPcHRpb25zIH0gPSBvcHRpb25zO1xyXG5cclxuICBjb25zdCBhbGxvd0NvZGVFeGVjdXRpb25TY29wZWQgPVxyXG4gICAgdHlwZW9mIGN1c3RvbUNvZGVPcHRpb25zLmFsbG93Q29kZUV4ZWN1dGlvbiA9PT0gJ2Jvb2xlYW4nXHJcbiAgICAgID8gY3VzdG9tQ29kZU9wdGlvbnMuYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICAgIDogYWxsb3dDb2RlRXhlY3V0aW9uO1xyXG5cclxuICBpZiAoIWN1c3RvbUNvZGVPcHRpb25zKSB7XHJcbiAgICBjdXN0b21Db2RlT3B0aW9ucyA9IG9wdGlvbnMuY3VzdG9tQ29kZSA9IHt9O1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuY3VzdG9tQ29kZS5yZXNvdXJjZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAvLyBQcm9jZXNzIHJlc291cmNlc1xyXG4gICAgb3B0aW9ucy5jdXN0b21Db2RlLnJlc291cmNlcyA9IGhhbmRsZVJlc291cmNlcyhcclxuICAgICAgb3B0aW9ucy5jdXN0b21Db2RlLnJlc291cmNlcyxcclxuICAgICAgdG9Cb29sZWFuKG9wdGlvbnMuY3VzdG9tQ29kZS5hbGxvd0ZpbGVSZXNvdXJjZXMpXHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAoIW9wdGlvbnMuY3VzdG9tQ29kZS5yZXNvdXJjZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc291cmNlcyA9IHJlYWRGaWxlU3luYygncmVzb3VyY2VzLmpzb24nLCAndXRmOCcpO1xyXG4gICAgICBvcHRpb25zLmN1c3RvbUNvZGUucmVzb3VyY2VzID0gaGFuZGxlUmVzb3VyY2VzKFxyXG4gICAgICAgIHJlc291cmNlcyxcclxuICAgICAgICB0b0Jvb2xlYW4ob3B0aW9ucy5jdXN0b21Db2RlLmFsbG93RmlsZVJlc291cmNlcylcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBsb2coMywgYFtjaGFydF0gVGhlIGRlZmF1bHQgcmVzb3VyY2VzLmpzb24gZmlsZSBub3QgZm91bmQuYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgYWxsb3dDb2RlRXhlY3V0aW9uIGZsYWcgaXNuJ3Qgc2V0LCB3ZSBzaG91bGQgcmVmdXNlIHRoZSB1c2FnZVxyXG4gIC8vIG9mIGNhbGxiYWNrLCByZXNvdXJjZXMsIGFuZCBjdXN0b20gY29kZS4gQWRkaXRpb25hbGx5LCB0aGUgd29ya2VyIHdpbGxcclxuICAvLyByZWZ1c2UgdG8gcnVuIGFyYml0cmFyeSBKYXZhU2NyaXB0LiBQcmlvcml0aXplZCBzaG91bGQgYmUgdGhlIHNjb3BlZFxyXG4gIC8vIG9wdGlvbiwgdGhlbiB3ZSBzaG91bGQgdGFrZSBhIGxvb2sgYXQgdGhlIG92ZXJhbGwgcG9vbCBvcHRpb24uXHJcbiAgaWYgKCFhbGxvd0NvZGVFeGVjdXRpb25TY29wZWQgJiYgY3VzdG9tQ29kZU9wdGlvbnMpIHtcclxuICAgIGlmIChcclxuICAgICAgY3VzdG9tQ29kZU9wdGlvbnMuY2FsbGJhY2sgfHxcclxuICAgICAgY3VzdG9tQ29kZU9wdGlvbnMucmVzb3VyY2VzIHx8XHJcbiAgICAgIGN1c3RvbUNvZGVPcHRpb25zLmN1c3RvbUNvZGVcclxuICAgICkge1xyXG4gICAgICAvLyBTZW5kIGJhY2sgYSBmcmllbmRseSBtZXNzYWdlIHNheWluZyB0aGF0IHRoZSBleHBvcnRlciBkb2VzIG5vdCBzdXBwb3J0XHJcbiAgICAgIC8vIHRoZXNlIHNldHRpbmdzLlxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIGVuZENhbGxiYWNrICYmXHJcbiAgICAgICAgZW5kQ2FsbGJhY2soZmFsc2UsIHtcclxuICAgICAgICAgIGVycm9yOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTogY2xlYXJUZXh0KFxyXG4gICAgICAgICAgICBgVGhlIGNhbGxiYWNrLCByZXNvdXJjZXMgYW5kIGN1c3RvbUNvZGUgaGF2ZSBiZWVuIGRpc2FibGVkIGZvciB0aGlzXHJcbiAgICAgICAgICAgIHNlcnZlci5gXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXNldCBhbGwgYWRkaXRpb25hbCBjdXN0b20gY29kZVxyXG4gICAgY3VzdG9tQ29kZU9wdGlvbnMuY2FsbGJhY2sgPSBmYWxzZTtcclxuICAgIGN1c3RvbUNvZGVPcHRpb25zLnJlc291cmNlcyA9IGZhbHNlO1xyXG4gICAgY3VzdG9tQ29kZU9wdGlvbnMuY3VzdG9tQ29kZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2xlYW4gcHJvcGVydGllcyB0byBrZWVwIGl0IGxlYW4gYW5kIG1lYW5cclxuICBpZiAoY2hhcnRKc29uKSB7XHJcbiAgICBjaGFydEpzb24uY2hhcnQgPSBjaGFydEpzb24uY2hhcnQgfHwge307XHJcbiAgICBjaGFydEpzb24uZXhwb3J0aW5nID0gY2hhcnRKc29uLmV4cG9ydGluZyB8fCB7fTtcclxuICAgIGNoYXJ0SnNvbi5leHBvcnRpbmcuZW5hYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0T3B0aW9ucy5jb25zdHIgPSBleHBvcnRPcHRpb25zLmNvbnN0ciB8fCAnY2hhcnQnO1xyXG4gIGV4cG9ydE9wdGlvbnMudHlwZSA9IGZpeFR5cGUoZXhwb3J0T3B0aW9ucy50eXBlLCBleHBvcnRPcHRpb25zLm91dGZpbGUpO1xyXG4gIGlmIChleHBvcnRPcHRpb25zLnR5cGUgPT09ICdzdmcnKSB7XHJcbiAgICBleHBvcnRPcHRpb25zLndpZHRoID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyBQcmVwYXJlIGdsb2JhbCBhbmQgdGhlbWUgb3B0aW9uc1xyXG4gIFsnZ2xvYmFsT3B0aW9ucycsICd0aGVtZU9wdGlvbnMnXS5mb3JFYWNoKChvcHRpb25zTmFtZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKGV4cG9ydE9wdGlvbnMgJiYgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0pIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0eXBlb2YgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXS5lbmRzV2l0aCgnLmpzb24nKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPSBpc0NvcnJlY3RKU09OKFxyXG4gICAgICAgICAgICByZWFkRmlsZVN5bmMoZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0sICd1dGY4JyksXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdID0gaXNDb3JyZWN0SlNPTihcclxuICAgICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0sXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSA9IHt9O1xyXG4gICAgICBsb2coMSwgYFtjaGFydF0gVGhlICR7b3B0aW9uc05hbWV9IG5vdCBmb3VuZC5gKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gUHJlcGFyZSBjdXN0b21Db2RlXHJcbiAgaWYgKGN1c3RvbUNvZGVPcHRpb25zLmFsbG93Q29kZUV4ZWN1dGlvbikge1xyXG4gICAgY3VzdG9tQ29kZU9wdGlvbnMuY3VzdG9tQ29kZSA9IHdyYXBBcm91bmQoXHJcbiAgICAgIGN1c3RvbUNvZGVPcHRpb25zLmN1c3RvbUNvZGUsXHJcbiAgICAgIGN1c3RvbUNvZGVPcHRpb25zLmFsbG93RmlsZVJlc291cmNlc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIEdldCB0aGUgY2FsbGJhY2tcclxuICBpZiAoXHJcbiAgICBjdXN0b21Db2RlT3B0aW9ucyAmJlxyXG4gICAgY3VzdG9tQ29kZU9wdGlvbnMuY2FsbGJhY2sgJiZcclxuICAgIGN1c3RvbUNvZGVPcHRpb25zLmNhbGxiYWNrPy5pbmRleE9mKCd7JykgPCAwXHJcbiAgKSB7XHJcbiAgICAvLyBUaGUgYWxsb3dGaWxlUmVzb3VyY2VzIGlzIGFsd2F5cyBzZXQgdG8gZmFsc2UgZm9yIEhUVFAgcmVxdWVzdHMgdG8gYXZvaWRcclxuICAgIC8vIGluamVjdGluZyBhcmJpdHJhcnkgZmlsZXMgZnJvbSB0aGUgZnNcclxuICAgIGlmIChjdXN0b21Db2RlT3B0aW9ucy5hbGxvd0ZpbGVSZXNvdXJjZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjdXN0b21Db2RlT3B0aW9ucy5jYWxsYmFjayA9IHJlYWRGaWxlU3luYyhcclxuICAgICAgICAgIGN1c3RvbUNvZGVPcHRpb25zLmNhbGxiYWNrLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2coMiwgYFtjaGFydF0gRXJyb3IgbG9hZGluZyBjYWxsYmFjazogJHtlcnJvcn0uYCk7XHJcbiAgICAgICAgY3VzdG9tQ29kZU9wdGlvbnMuY2FsbGJhY2sgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY3VzdG9tQ29kZU9wdGlvbnMuY2FsbGJhY2sgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNpemUgc2VhcmNoXHJcbiAgb3B0aW9ucy5leHBvcnQgPSB7XHJcbiAgICAuLi5vcHRpb25zLmV4cG9ydCxcclxuICAgIC4uLmZpbmRDaGFydFNpemUob3B0aW9ucylcclxuICB9O1xyXG5cclxuICAvLyBQb3N0IHRoZSB3b3JrIHRvIHRoZSBwb29sXHJcbiAgcG9zdFdvcmsoZXhwb3J0T3B0aW9ucy5zdHJJbmogfHwgY2hhcnRKc29uIHx8IHN2Zywgb3B0aW9ucylcclxuICAgIC50aGVuKChyZXN1bHQpID0+IGVuZENhbGxiYWNrKHJlc3VsdCkpXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGxvZygwLCAnW2NoYXJ0XSBXaGVuIHBvc3Rpbmcgd29yazonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBlbmRDYWxsYmFjayhmYWxzZSwgZXJyb3IpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gZm9yIHN0cmFpZ2h0IGluamVjdGluZyB0aGUgY29kZS5cclxuICogRGFuZ2Vyb3VzIGFuZCBtdXN0IGJlIHVzZWQgZGVsaWJlcmF0ZWx5IGJ5IHNvbWVvbmUgd2hvIHNldHMgdXAgYSBzZXJ2ZXJcclxuICogKHNlZSAgLS1hbGxvd0NvZGVFeGVjdXRpb24pLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEFsbCBvcHRpb25zIG9iamVjdC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZW5kQ2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGV4cG9ydGluZyBpcyBkb25lLlxyXG4gKi9cclxuY29uc3QgZG9TdHJhaWdodEluamVjdCA9IChvcHRpb25zLCBlbmRDYWxsYmFjaykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBsZXQgc3RySW5qO1xyXG4gICAgbGV0IGluc3RyID0gb3B0aW9ucy5leHBvcnQuaW5zdHIgfHwgb3B0aW9ucy5leHBvcnQub3B0aW9ucztcclxuXHJcbiAgICBpZiAodHlwZW9mIGluc3RyICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAvLyBUcnkgdG8gc3RyaW5naWZ5IG9wdGlvbnNcclxuICAgICAgc3RySW5qID0gaW5zdHIgPSBvcHRpb25zU3RyaW5naWZ5KFxyXG4gICAgICAgIGluc3RyLFxyXG4gICAgICAgIG9wdGlvbnMuY3VzdG9tQ29kZT8uYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBzdHJJbmogPSBpbnN0ci5yZXBsYWNlQWxsKC9cXHR8XFxufFxcci9nLCAnJykudHJpbSgpO1xyXG5cclxuICAgIC8vIEdldCByaWQgb2YgdGhlIDtcclxuICAgIGlmIChzdHJJbmpbc3RySW5qLmxlbmd0aCAtIDFdID09PSAnOycpIHtcclxuICAgICAgc3RySW5qID0gc3RySW5qLnN1YnN0cmluZygwLCBzdHJJbmoubGVuZ3RoIC0gMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2F2ZSBhcyBzdHJpZ2h0IGluamVjdCBzdHJpbmdcclxuICAgIG9wdGlvbnMuZXhwb3J0LnN0ckluaiA9IHN0ckluajtcclxuICAgIHJldHVybiBkb0V4cG9ydChvcHRpb25zLCBmYWxzZSwgZW5kQ2FsbGJhY2spO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gY2xlYXJUZXh0KFxyXG4gICAgICBgTWFsZm9ybWVkIGlucHV0IGRldGVjdGVkIGZvciAke29wdGlvbnMuZXhwb3J0Py5yZXF1ZXN0SWQgfHwgJz8nfTpcclxuICAgICAgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHlvdXIgSlNPTi9KYXZhU2NyaXB0IG9wdGlvbnNcclxuICAgICAgYXJlIHNlbnQgdXNpbmcgdGhlIFwib3B0aW9uc1wiIGF0dHJpYnV0ZSwgYW5kIHRoYXQgaWYgeW91J3JlIHVzaW5nXHJcbiAgICAgIFNWRywgaXQgaXMgdW5lc2NhcGVkLmBcclxuICAgICk7XHJcblxyXG4gICAgbG9nKDEsIG1lc3NhZ2UpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZW5kQ2FsbGJhY2sgJiZcclxuICAgICAgZW5kQ2FsbGJhY2soXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgZXJyb3I6IHRydWUsXHJcbiAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogUHJlcGFyZXMgYW4gaW5wdXQgYmVmb3JlIGV4cG9ydGluZy5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1RvRXhwb3J0IC0gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNWRy9leHBvcnQgb3B0aW9ucy5cclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBBbGwgb3B0aW9ucyBvYmplY3QuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGVuZENhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBleHBvcnRpbmcgaXMgZG9uZS5cclxuICovXHJcbmNvbnN0IGV4cG9ydEFzU3RyaW5nID0gKHN0cmluZ1RvRXhwb3J0LCBvcHRpb25zLCBlbmRDYWxsYmFjaykgPT4ge1xyXG4gIGNvbnN0IHsgYWxsb3dDb2RlRXhlY3V0aW9uIH0gPSBvcHRpb25zLmN1c3RvbUNvZGU7XHJcblxyXG4gIC8vIENoZWNrIGlmIGl0IGlzIFNWR1xyXG4gIGlmIChcclxuICAgIHN0cmluZ1RvRXhwb3J0LmluZGV4T2YoJzxzdmcnKSA+PSAwIHx8XHJcbiAgICBzdHJpbmdUb0V4cG9ydC5pbmRleE9mKCc8P3htbCcpID49IDBcclxuICApIHtcclxuICAgIGxvZyg0LCAnW2NoYXJ0XSBQYXJzaW5nIGlucHV0IGFzIFNWRy4nKTtcclxuICAgIHJldHVybiBkb0V4cG9ydChvcHRpb25zLCBmYWxzZSwgZW5kQ2FsbGJhY2ssIHN0cmluZ1RvRXhwb3J0KTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBUcnkgdG8gcGFyc2UgdG8gSlNPTiBhbmQgY2FsbCB0aGUgZG9FeHBvcnQgZnVuY3Rpb25cclxuICAgIGNvbnN0IGNoYXJ0SlNPTiA9IEpTT04ucGFyc2Uoc3RyaW5nVG9FeHBvcnQucmVwbGFjZUFsbCgvXFx0fFxcbnxcXHIvZywgJyAnKSk7XHJcblxyXG4gICAgLy8gSWYgYSBjb3JyZWN0IEpTT04sIGRvIHRoZSBleHBvcnRcclxuICAgIHJldHVybiBkb0V4cG9ydChvcHRpb25zLCBjaGFydEpTT04sIGVuZENhbGxiYWNrKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gTm90IGEgdmFsaWQgSlNPTlxyXG4gICAgaWYgKHRvQm9vbGVhbihhbGxvd0NvZGVFeGVjdXRpb24pKSB7XHJcbiAgICAgIHJldHVybiBkb1N0cmFpZ2h0SW5qZWN0KG9wdGlvbnMsIGVuZENhbGxiYWNrKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIERvIG5vdCBhbGxvdyBzdHJhaWdodCBpbmplY3Rpb24gd2l0aG91dCB0aGUgYWxsb3dDb2RlRXhlY3V0aW9uIGZsYWdcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICBlbmRDYWxsYmFjayAmJlxyXG4gICAgICAgIGVuZENhbGxiYWNrKGZhbHNlLCB7XHJcbiAgICAgICAgICBlcnJvcjogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6IGNsZWFyVGV4dChcclxuICAgICAgICAgICAgYE9ubHkgSlNPTiBjb25maWd1cmF0aW9ucyBhbmQgU1ZHIGlzIGFsbG93ZWQgZm9yIHRoaXMgc2VydmVyLiBJZlxyXG4gICAgICAgICAgICB0aGlzIGlzIHlvdXIgc2VydmVyLCBKYXZhU2NyaXB0IGV4cG9ydGluZyBjYW4gYmUgZW5hYmxlZCBieSBzdGFydGluZ1xyXG4gICAgICAgICAgICB0aGUgc2VydmVyIHdpdGggdGhlIC0tYWxsb3dDb2RlRXhlY3V0aW9uIGZsYWcuYFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEFsbG93Q29kZUV4ZWN1dGlvbiA9ICgpID0+IGFsbG93Q29kZUV4ZWN1dGlvbjtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRBbGxvd0NvZGVFeGVjdXRpb24gPSAodmFsdWUpID0+IHtcclxuICBhbGxvd0NvZGVFeGVjdXRpb24gPSB0b0Jvb2xlYW4odmFsdWUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyBhbiBleHBvcnRpbmcgcHJvY2Vzc1xyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBTZXR0aW5ncyBmb3IgZXhwb3J0LlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBlbmRDYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gZXhwb3J0aW5nIGlzIGRvbmUuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgYmF0Y2hFeHBvcnQsXHJcbiAgc2luZ2xlRXhwb3J0LFxyXG4gIGdldEFsbG93Q29kZUV4ZWN1dGlvbixcclxuICBzZXRBbGxvd0NvZGVFeGVjdXRpb24sXHJcbiAgc3RhcnRFeHBvcnQsXHJcbiAgZmluZENoYXJ0U2l6ZVxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcclxuaW1wb3J0IHsgV2ViU29ja2V0IH0gZnJvbSAnd3MnO1xyXG5cclxuaW1wb3J0IHdlYnNvY2tldCBmcm9tICcuLi93ZWJzb2NrZXQuanMnO1xyXG5pbXBvcnQgeyBnZXRBbGxvd0NvZGVFeGVjdXRpb24sIHN0YXJ0RXhwb3J0IH0gZnJvbSAnLi4vLi4vY2hhcnQuanMnO1xyXG5pbXBvcnQgeyBnZXRPcHRpb25zLCBtZXJnZUNvbmZpZ09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi8uLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQge1xyXG4gIGNsZWFyVGV4dCxcclxuICBmaXhUeXBlLFxyXG4gIGlzQ29ycmVjdEpTT04sXHJcbiAgaXNQcml2YXRlUmFuZ2VVcmxGb3VuZCxcclxuICBvcHRpb25zU3RyaW5naWZ5LFxyXG4gIG1lYXN1cmVUaW1lXHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuLy8gUmV2ZXJzZWQgTUlNRSB0eXBlc1xyXG5jb25zdCByZXZlcnNlZE1pbWUgPSB7XHJcbiAgcG5nOiAnaW1hZ2UvcG5nJyxcclxuICBqcGVnOiAnaW1hZ2UvanBlZycsXHJcbiAgZ2lmOiAnaW1hZ2UvZ2lmJyxcclxuICBwZGY6ICdhcHBsaWNhdGlvbi9wZGYnLFxyXG4gIHN2ZzogJ2ltYWdlL3N2Zyt4bWwnXHJcbn07XHJcblxyXG4vLyBUaGUgcmVxdWVzdHMgY291bnRlclxyXG5sZXQgcmVxdWVzdHNDb3VudGVyID0gMDtcclxuXHJcbmNvbnN0IGJlbmNobWFyayA9IGZhbHNlO1xyXG5cclxuLy8gVGhlIGFycmF5IG9mIGNhbGxiYWNrcyB0byBjYWxsIGJlZm9yZSBhIHJlcXVlc3RcclxuY29uc3QgYmVmb3JlUmVxdWVzdCA9IFtdO1xyXG5cclxuLy8gVGhlIGFycmF5IG9mIGNhbGxiYWNrcyB0byBjYWxsIGFmdGVyIGEgcmVxdWVzdFxyXG5jb25zdCBhZnRlclJlcXVlc3QgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBDYWxscyBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGNhbGxiYWNrcyAtIEFuIGFycmF5IG9mIGNhbGxiYWNrcy5cclxuICogQHBhcmFtIHtvYmplY3R9IHJlcXVlc3QgLSBUaGUgcmVxdWVzdC5cclxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRoZSBkYXRhIHRvIHNlbmQgdG8gY2FsbGJhY2tzLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHJlc3VsdCBmcm9tIGEgY2FsbGJhY2suXHJcbiAqL1xyXG5jb25zdCBkb0NhbGxiYWNrcyA9IChjYWxsYmFja3MsIHJlcXVlc3QsIHJlc3BvbnNlLCBkYXRhKSA9PiB7XHJcbiAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgY29uc3QgeyBpZCwgdW5pcXVlSWQsIHR5cGUsIGJvZHkgfSA9IGRhdGE7XHJcblxyXG4gIGNhbGxiYWNrcy5zb21lKChjYWxsYmFjaykgPT4ge1xyXG4gICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgIGxldCBjYWxsUmVzcG9uc2UgPSBjYWxsYmFjayhyZXF1ZXN0LCByZXNwb25zZSwgaWQsIHVuaXF1ZUlkLCB0eXBlLCBib2R5KTtcclxuXHJcbiAgICAgIGlmIChjYWxsUmVzcG9uc2UgIT09IHVuZGVmaW5lZCAmJiBjYWxsUmVzcG9uc2UgIT09IHRydWUpIHtcclxuICAgICAgICByZXN1bHQgPSBjYWxsUmVzcG9uc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYW4gZXhwb3J0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdCAtIFRoZSByZXF1ZXN0LlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UuXHJcbiAqL1xyXG5jb25zdCBleHBvcnRIYW5kbGVyID0gKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgLy8gU3RhcnQgY291bnRpbmcgdGltZVxyXG4gIGNvbnN0IHN0b3BDb3VudGVyID0gbWVhc3VyZVRpbWUoKTtcclxuXHJcbiAgLy8gR2V0IHRoZSBjdXJyZW50IHNlcnZlcidzIGdlbmVyYWwgb3B0aW9uc1xyXG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0T3B0aW9ucygpO1xyXG5cclxuICAvLyBJbml0IGRlZmF1bHQgb3B0aW9uc1xyXG4gIGlmIChiZW5jaG1hcmspIHtcclxuICAgIGNvbnNvbGUubG9nKCdJbml0IGRlZmF1bHQgb3B0aW9uczonLCBzdG9wQ291bnRlcigpLCAnbXMuJyk7XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgdGhlIFdlYlNvY2tldCBjbGllbnRcclxuICBjb25zdCB3ZWJzb2NrZXRDbGllbnQgPSB3ZWJzb2NrZXQuZ2V0Q2xpZW50KCk7XHJcblxyXG4gIGNvbnN0IGJvZHkgPSByZXF1ZXN0LmJvZHk7XHJcbiAgY29uc3QgaWQgPSArK3JlcXVlc3RzQ291bnRlcjtcclxuICBjb25zdCB1bmlxdWVJZCA9IHV1aWQoKS5yZXBsYWNlKC8tL2csICcnKTtcclxuICBsZXQgdHlwZSA9IGZpeFR5cGUoYm9keS50eXBlKTtcclxuXHJcbiAgLy8gRml4IHR5cGVcclxuICBpZiAoYmVuY2htYXJrKSB7XHJcbiAgICBjb25zb2xlLmxvZygnRml4IHR5cGU6Jywgc3RvcENvdW50ZXIoKSwgJ21zLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhyb3cgJ0JhZCBSZXF1ZXN0JyBpZiB0aGVyZSdzIG5vIGJvZHlcclxuICBpZiAoIWJvZHkpIHtcclxuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAwKS5zZW5kKFxyXG4gICAgICBjbGVhclRleHQoXHJcbiAgICAgICAgYEJvZHkgaXMgcmVxdWlyZWQuIFNlbmRpbmcgYSBib2R5PyBNYWtlIHN1cmUgeW91ciBDb250ZW50LXR5cGUgaGVhZGVyXHJcbiAgICAgICAgaXMgY29ycmVjdC4gQWNjZXB0ZWQgaXMgYXBwbGljYXRpb24vanNvbiBhbmQgbXVsdGlwYXJ0L2Zvcm0tZGF0YS5gXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBBbGwgb2YgdGhlIGJlbG93IGNhbiBiZSB1c2VkXHJcbiAgbGV0IGluc3RyID0gaXNDb3JyZWN0SlNPTihib2R5LmluZmlsZSB8fCBib2R5Lm9wdGlvbnMgfHwgYm9keS5kYXRhKTtcclxuXHJcbiAgLy8gSXMgY29ycmVjdCBKU09OXHJcbiAgaWYgKGJlbmNobWFyaykge1xyXG4gICAgY29uc29sZS5sb2coJ0lzIGNvcnJlY3QgSlNPTjonLCBzdG9wQ291bnRlcigpLCAnbXMuJyk7XHJcbiAgfVxyXG5cclxuICAvLyBUaHJvdyAnQmFkIFJlcXVlc3QnIGlmIHRoZXJlJ3Mgbm8gSlNPTiBvciBTVkcgdG8gZXhwb3J0XHJcbiAgaWYgKCFpbnN0ciAmJiAhYm9keS5zdmcpIHtcclxuICAgIGxvZyhcclxuICAgICAgMixcclxuICAgICAgY2xlYXJUZXh0KFxyXG4gICAgICAgIGBSZXF1ZXN0ICR7dW5pcXVlSWR9IGZyb20gJHtcclxuICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gfHwgcmVxdWVzdC5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3NcclxuICAgICAgICB9IHdhcyBpbmNvcnJlY3QuIENoZWNrIHlvdXIgcGF5bG9hZC5gXHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDApLnNlbmQoXHJcbiAgICAgIGNsZWFyVGV4dChcclxuICAgICAgICBgTm8gY29ycmVjdCBjaGFydCBkYXRhIGZvdW5kLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgdXNpbmdcclxuICAgICAgICBhcHBsaWNhdGlvbi9qc29uIG9yIG11bHRpcGFydC9mb3JtLWRhdGEgaGVhZGVycywgYW5kIHRoYXQgdGhlIGNoYXJ0XHJcbiAgICAgICAgZGF0YSBpcyBpbiB0aGUgJ2luZmlsZScsICdvcHRpb25zJyBvciAnZGF0YScgYXR0cmlidXRlIGlmIHNlbmRpbmdcclxuICAgICAgICBKU09OIG9yIGluIHRoZSAnc3ZnJyBpZiBzZW5kaW5nIFNWRy5gXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBsZXQgY2FsbFJlc3BvbnNlID0gZmFsc2U7XHJcblxyXG4gIC8vIENhbGwgdGhlIGJlZm9yZSByZXF1ZXN0IGZ1bmN0aW9uc1xyXG4gIGNhbGxSZXNwb25zZSA9IGRvQ2FsbGJhY2tzKGJlZm9yZVJlcXVlc3QsIHJlcXVlc3QsIHJlc3BvbnNlLCB7XHJcbiAgICBpZCxcclxuICAgIHVuaXF1ZUlkLFxyXG4gICAgdHlwZSxcclxuICAgIGJvZHlcclxuICB9KTtcclxuXHJcbiAgLy8gRG8gY2FsbGJhY2tzXHJcbiAgaWYgKGJlbmNobWFyaykge1xyXG4gICAgY29uc29sZS5sb2coJ0RvIGNhbGxiYWNrczonLCBzdG9wQ291bnRlcigpLCAnbXMuJyk7XHJcbiAgfVxyXG5cclxuICAvLyBCbG9jayB0aGUgcmVxdWVzdCBpZiBvbmUgb2YgYSBjYWxsYmFja3MgZmFpbGVkXHJcbiAgaWYgKGNhbGxSZXNwb25zZSAhPT0gdHJ1ZSkge1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLnNlbmQoY2FsbFJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGxldCBjb25uZWN0aW9uQWJvcnRlZCA9IGZhbHNlO1xyXG5cclxuICAvLyBJbiBjYXNlIHRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZCwgZm9yY2UgdG8gYWJvcnQgZnVydGhlciBhY3Rpb25zXHJcbiAgcmVxdWVzdC5zb2NrZXQub24oJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgY29ubmVjdGlvbkFib3J0ZWQgPSB0cnVlO1xyXG4gIH0pO1xyXG5cclxuICBsb2coNCwgYFtleHBvcnRdIEdvdCBhbiBpbmNvbWluZyBIVFRQIHJlcXVlc3QgJHt1bmlxdWVJZH0uYCk7XHJcblxyXG4gIGJvZHkuY29uc3RyID0gKHR5cGVvZiBib2R5LmNvbnN0ciA9PT0gJ3N0cmluZycgJiYgYm9keS5jb25zdHIpIHx8ICdjaGFydCc7XHJcblxyXG4gIC8vIEdhdGhlciBhbmQgb3JnYW5pemUgb3B0aW9ucyBmcm9tIHRoZSBwYXlsb2FkXHJcbiAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XHJcbiAgICBleHBvcnQ6IHtcclxuICAgICAgaW5zdHIsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIGNvbnN0cjogYm9keS5jb25zdHJbMF0udG9Mb3dlckNhc2UoKSArIGJvZHkuY29uc3RyLnN1YnN0cigxKSxcclxuICAgICAgaGVpZ2h0OiBib2R5LmhlaWdodCxcclxuICAgICAgd2lkdGg6IGJvZHkud2lkdGgsXHJcbiAgICAgIHNjYWxlOiBib2R5LnNjYWxlIHx8IGRlZmF1bHRPcHRpb25zLmV4cG9ydC5zY2FsZSxcclxuICAgICAgZ2xvYmFsT3B0aW9uczogaXNDb3JyZWN0SlNPTihib2R5Lmdsb2JhbE9wdGlvbnMsIHRydWUpLFxyXG4gICAgICB0aGVtZU9wdGlvbnM6IGlzQ29ycmVjdEpTT04oYm9keS50aGVtZU9wdGlvbnMsIHRydWUpXHJcbiAgICB9LFxyXG4gICAgY3VzdG9tQ29kZToge1xyXG4gICAgICBhbGxvd0NvZGVFeGVjdXRpb246IGdldEFsbG93Q29kZUV4ZWN1dGlvbigpLFxyXG4gICAgICBhbGxvd0ZpbGVSZXNvdXJjZXM6IGZhbHNlLFxyXG4gICAgICByZXNvdXJjZXM6IGlzQ29ycmVjdEpTT04oYm9keS5yZXNvdXJjZXMsIHRydWUpLFxyXG4gICAgICBjYWxsYmFjazogYm9keS5jYWxsYmFjayxcclxuICAgICAgY3VzdG9tQ29kZTogYm9keS5jdXN0b21Db2RlXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gT3JnYW5pemUgb3B0aW9uc1xyXG4gIGlmIChiZW5jaG1hcmspIHtcclxuICAgIGNvbnNvbGUubG9nKCdPcmdhbml6ZSBvcHRpb25zOicsIHN0b3BDb3VudGVyKCksICdtcy4nKTtcclxuICB9XHJcblxyXG4gIGlmIChpbnN0cikge1xyXG4gICAgLy8gU3RyaW5naWZ5IEpTT04gd2l0aCBvcHRpb25zXHJcbiAgICByZXF1ZXN0T3B0aW9ucy5leHBvcnQuaW5zdHIgPSBvcHRpb25zU3RyaW5naWZ5KFxyXG4gICAgICBpbnN0cixcclxuICAgICAgcmVxdWVzdE9wdGlvbnMuY3VzdG9tQ29kZS5hbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICk7XHJcblxyXG4gICAgLy8gU3RyaW5naWZ5IEpTT04gd2l0aCBvcHRpb25zXHJcbiAgICBpZiAoYmVuY2htYXJrKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTdHJpbmdpZnkgSlNPTiB3aXRoIG9wdGlvbnM6Jywgc3RvcENvdW50ZXIoKSwgJ21zLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTWVyZ2UgdGhlIHJlcXVlc3Qgb3B0aW9ucyBpbnRvIGRlZmF1bHQgb25lc1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBtZXJnZUNvbmZpZ09wdGlvbnMoZGVmYXVsdE9wdGlvbnMsIHJlcXVlc3RPcHRpb25zKTtcclxuXHJcbiAgLy8gTWVyZ2UgY29uZmlnIG9wdGlvbnNcclxuICBpZiAoYmVuY2htYXJrKSB7XHJcbiAgICBjb25zb2xlLmxvZygnTWVyZ2UgY29uZmlnIG9wdGlvbnM6Jywgc3RvcENvdW50ZXIoKSwgJ21zLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gU2F2ZSB0aGUgSlNPTiBpZiBleGlzdHNcclxuICBvcHRpb25zLmV4cG9ydC5vcHRpb25zID0gaW5zdHI7XHJcblxyXG4gIC8vIExhc3RseSwgYWRkIHRoZSBzZXJ2ZXIgc3BlY2lmaWMgYXJndW1lbnRzIGludG8gb3B0aW9ucyBhcyBwYXlsb2FkXHJcbiAgb3B0aW9ucy5wYXlsb2FkID0ge1xyXG4gICAgc3ZnOiBib2R5LnN2ZyB8fCBmYWxzZSxcclxuICAgIGI2NDogYm9keS5iNjQgfHwgZmFsc2UsXHJcbiAgICBkYXRhT3B0aW9uczogaXNDb3JyZWN0SlNPTihib2R5LmRhdGFPcHRpb25zLCB0cnVlKSxcclxuICAgIG5vRG93bmxvYWQ6IGJvZHkubm9Eb3dubG9hZCB8fCBmYWxzZSxcclxuICAgIHJlcXVlc3RJZDogdW5pcXVlSWRcclxuICB9O1xyXG5cclxuICAvLyBTZXR0aW5nIHBheWxvYWRcclxuICBpZiAoYmVuY2htYXJrKSB7XHJcbiAgICBjb25zb2xlLmxvZygnU2V0dGluZyBwYXlsb2FkOicsIHN0b3BDb3VudGVyKCksICdtcy4nKTtcclxuICB9XHJcblxyXG4gIC8vIFRlc3QgeGxpbms6aHJlZiBlbGVtZW50cyBmcm9tIHBheWxvYWQncyBTVkdcclxuICBpZiAoYm9keS5zdmcgJiYgaXNQcml2YXRlUmFuZ2VVcmxGb3VuZChvcHRpb25zLnBheWxvYWQuc3ZnKSkge1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgIC5zdGF0dXMoNDAwKVxyXG4gICAgICAuc2VuZChcclxuICAgICAgICAnU1ZHIHBvdGVudGlhbGx5IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGZvcmJpZGRlbiBVUkwgaW4geGxpbms6aHJlZiBlbGVtZW50LidcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIFVSTCByYW5nZVxyXG4gIGlmIChiZW5jaG1hcmspIHtcclxuICAgIGNvbnNvbGUubG9nKCdDaGVjayBVUkwgcmFuZ2U6Jywgc3RvcENvdW50ZXIoKSwgJ21zLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgdGhlIGNsaWVudCBpcyBmb3VuZCwgc2VuZCBkYXRhIHRocm91Z2ggV2ViU29ja2V0XHJcbiAgaWYgKHdlYnNvY2tldENsaWVudCAmJiB3ZWJzb2NrZXRDbGllbnQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcclxuICAgIC8vIEFscmVhZHkgcHJlcGFyZWQgb3B0aW9ucyBidXQgYmVmb3JlIHRoZSBleHBvcnQgcHJvY2Vzc1xyXG4gICAgd2Vic29ja2V0Q2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucykpO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhcnQgdGhlIGV4cG9ydCBwcm9jZXNzXHJcbiAgc3RhcnRFeHBvcnQob3B0aW9ucywgKGluZm8sIGVycm9yKSA9PiB7XHJcbiAgICAvLyBSZW1vdmUgdGhlIGNsb3NlIGV2ZW50IGZyb20gdGhlIHNvY2tldFxyXG4gICAgcmVxdWVzdC5zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xyXG5cclxuICAgIC8vIEFmdGVyIFB1cHBldGVlciBleHBvcnRpbmdcclxuICAgIGlmIChiZW5jaG1hcmspIHtcclxuICAgICAgY29uc29sZS5sb2coJ0FmdGVyIFB1cHBldGVlciBleHBvcnRpbmc6Jywgc3RvcENvdW50ZXIoKSwgJ21zLicsICdcXG4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkLCBkbyBub3RoaW5nXHJcbiAgICBpZiAoY29ubmVjdGlvbkFib3J0ZWQpIHtcclxuICAgICAgcmV0dXJuIGxvZyhcclxuICAgICAgICAzLFxyXG4gICAgICAgIGNsZWFyVGV4dChcclxuICAgICAgICAgIGBbZXhwb3J0XSBUaGUgY2xpZW50IGNsb3NlZCB0aGUgY29ubmVjdGlvbiBiZWZvcmUgdGhlIGNoYXJ0IHdhcyBkb25lXHJcbiAgICAgICAgICBwcm9jZXNzaW5nLmBcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgZXJyb3IsIHJldHVybiBpdFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAxLFxyXG4gICAgICAgIGNsZWFyVGV4dChcclxuICAgICAgICAgIGBbZXhwb3J0XSBXb3JrOiAke3VuaXF1ZUlkfSBjb3VsZCBub3QgYmUgY29tcGxldGVkLCBzZW5kaW5nOlxyXG4gICAgICAgICAgJHtlcnJvcn1gXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQwMCkuc2VuZChlcnJvci5tZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBkYXRhIGlzIG1pc3NpbmcsIHJldHVybiB0aGUgZXJyb3JcclxuICAgIGlmICghaW5mbyB8fCAhaW5mby5kYXRhKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAxLFxyXG4gICAgICAgIGNsZWFyVGV4dChcclxuICAgICAgICAgIGBbZXhwb3J0XSBVbmV4cGVjdGVkIHJldHVybiBmcm9tIGNoYXJ0IGdlbmVyYXRpb24sIHBsZWFzZSBjaGVjayB5b3VyXHJcbiAgICAgICAgICBkYXRhIFJlcXVlc3Q6ICR7dW5pcXVlSWR9IGlzICR7aW5mby5kYXRhfS5gXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2VcclxuICAgICAgICAuc3RhdHVzKDQwMClcclxuICAgICAgICAuc2VuZChcclxuICAgICAgICAgICdVbmV4cGVjdGVkIHJldHVybiBmcm9tIGNoYXJ0IGdlbmVyYXRpb24sIHBsZWFzZSBjaGVjayB5b3VyIGRhdGEuJ1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IHRoZSB0eXBlIGZyb20gb3B0aW9uc1xyXG4gICAgdHlwZSA9IGluZm8ub3B0aW9ucy5leHBvcnQudHlwZTtcclxuXHJcbiAgICAvLyBUaGUgYWZ0ZXIgcmVxdWVzdCBjYWxsYmFja3NcclxuICAgIGRvQ2FsbGJhY2tzKGFmdGVyUmVxdWVzdCwgcmVxdWVzdCwgcmVzcG9uc2UsIHsgaWQsIGJvZHk6IGluZm8uZGF0YSB9KTtcclxuXHJcbiAgICBpZiAoaW5mby5kYXRhKSB7XHJcbiAgICAgIC8vIElmIG9ubHkgYmFzZTY0IGlzIHJlcXVpcmVkLCByZXR1cm4gaXRcclxuICAgICAgaWYgKGJvZHkuYjY0KSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgYWxyZWFkeSBiYXNlNjQgb3IgYSByYXcgU1ZHXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdwZGYnKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZChcclxuICAgICAgICAgICAgQnVmZmVyLmZyb20oaW5mby5kYXRhLCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnNlbmQoaW5mby5kYXRhKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU2V0IGNvcnJlY3QgY29udGVudCB0eXBlXHJcbiAgICAgIHJlc3BvbnNlLmhlYWRlcignQ29udGVudC1UeXBlJywgcmV2ZXJzZWRNaW1lW3R5cGVdIHx8ICdpbWFnZS9wbmcnKTtcclxuXHJcbiAgICAgIC8vIERlY2lkZSB3aGV0aGVyIHRvIGRvd25sb2FkIG9yIG5vdCBjaGFydCBmaWxlXHJcbiAgICAgIGlmICghYm9keS5ub0Rvd25sb2FkKSB7XHJcbiAgICAgICAgcmVzcG9uc2UuYXR0YWNobWVudChcclxuICAgICAgICAgIGAke3JlcXVlc3QucGFyYW1zLmZpbGVuYW1lIHx8ICdjaGFydCd9LiR7dHlwZSB8fCAncG5nJ31gXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgU1ZHLCByZXR1cm4gcGxhaW4gY29udGVudFxyXG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ3N2ZydcclxuICAgICAgICA/IHJlc3BvbnNlLnNlbmQoaW5mby5kYXRhKVxyXG4gICAgICAgIDogcmVzcG9uc2Uuc2VuZChCdWZmZXIuZnJvbShpbmZvLmRhdGEsICdiYXNlNjQnKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoYXBwKSA9PiB7XHJcbiAgYXBwLnBvc3QoJy8nLCBleHBvcnRIYW5kbGVyKTtcclxuICBhcHAucG9zdCgnLzpmaWxlbmFtZScsIGV4cG9ydEhhbmRsZXIpO1xyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzUHJvbWlzZXMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IHBvc2l4IH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XHJcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xyXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcclxuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInO1xyXG5cclxuaW1wb3J0IHJhdGVMaW1pdCBmcm9tICcuL3JhdGVfbGltaXQuanMnO1xyXG5pbXBvcnQgd2Vic29ja2V0IGZyb20gJy4vd2Vic29ja2V0LmpzJztcclxuaW1wb3J0IHsgZW52Q29uZmlnIH0gZnJvbSAnLi4vZW52Q29uZmlnLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgX19kaXJuYW1lIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IGhlYWx0aFJvdXRlIGZyb20gJy4vcm91dGVzL2hlYWx0aC5qcyc7XHJcbmltcG9ydCBleHBvcnRSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvZXhwb3J0LmpzJztcclxuaW1wb3J0IHZzd2l0Y2hSb3V0ZSBmcm9tICcuL3JvdXRlcy9jaGFuZ2VfaGNfdmVyc2lvbi5qcyc7XHJcbmltcG9ydCB1aVJvdXRlIGZyb20gJy4vcm91dGVzL3VpLmpzJztcclxuXHJcbi8vIENyZWF0ZSBleHByZXNzIGFwcFxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4vLyBEaXNhYmxlIHRoZSBYLVBvd2VyZWQtQnkgaGVhZGVyXHJcbmFwcC5kaXNhYmxlKCd4LXBvd2VyZWQtYnknKTtcclxuXHJcbi8vIEVuYWJsZSBDT1JTIHN1cHBvcnRcclxuYXBwLnVzZShjb3JzKCkpO1xyXG5cclxuLy8gRW5hYmxlIHBhcnNpbmcgb2YgZm9ybSBkYXRhIChmaWxlcykgd2l0aCBNdWx0ZXIgcGFja2FnZVxyXG5jb25zdCBzdG9yYWdlID0gbXVsdGVyLm1lbW9yeVN0b3JhZ2UoKTtcclxuY29uc3QgdXBsb2FkID0gbXVsdGVyKHtcclxuICBzdG9yYWdlLFxyXG4gIGxpbWl0czoge1xyXG4gICAgZmllbGRzU2l6ZTogJzUwTUInXHJcbiAgfVxyXG59KTtcclxuXHJcbmFwcC51c2UodXBsb2FkLmFueSgpKTtcclxuXHJcbi8vIEVuYWJsZSBib2R5IHBhcnNlclxyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbih7IGxpbWl0OiAnNTBtYicgfSkpO1xyXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlLCBsaW1pdDogJzUwbWInIH0pKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UsIGxpbWl0OiAnNTBtYicgfSkpO1xyXG5cclxuLyoqXHJcbiAqIEVycm9yIGhhbmRsZXIgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBlcnJvciAtIEFuIGVycm9yIG9iamVjdC5cclxuICogQHJldHVybiB7c3RyaW5nfSAtIEFuIGVycm9yIG1lc3NhZ2UuXHJcbiAqL1xyXG5jb25zdCBlcnJvckhhbmRsZXIgPSAoZXJyb3IpID0+IGxvZygxLCBgW3NlcnZlcl0gU29ja2V0IGVycm9yOiAke2Vycm9yfWApO1xyXG5cclxuLyoqXHJcbiAqIEF0dGFjaGVzIGVycm9yIGhhbmRsZXJzIGZvciBhIHNlcnZlci5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IHNlcnZlciAtIFRoZSBodHRwL2h0dHBzIHNlcnZlci5cclxuICovXHJcbmNvbnN0IGF0dGFjaEVycm9ySGFuZGxlcnMgPSAoc2VydmVyKSA9PiB7XHJcbiAgc2VydmVyLm9uKCdjbGllbnRFcnJvcicsIGVycm9ySGFuZGxlcik7XHJcbiAgc2VydmVyLm9uKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XHJcbiAgc2VydmVyLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT5cclxuICAgIHNvY2tldC5vbignZXJyb3InLCAoZXJyb3IpID0+IGVycm9ySGFuZGxlcihlcnJvciwgc29ja2V0KSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0YXJ0U2VydmVyID0gYXN5bmMgKHNlcnZlckNvbmZpZykgPT4ge1xyXG4gIC8vIFN0b3AgaWYgbm90IGVuYWJsZWRcclxuICBpZiAoIXNlcnZlckNvbmZpZy5lbmFibGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIExpc3RlbiBIVFRQIHNlcnZlciwgaWYgVExTIGlzIG5vdCBmb3JjZWRcclxuICBpZiAoIXNlcnZlckNvbmZpZy5zc2wuZm9yY2UpIHtcclxuICAgIC8vIE1haW4gc2VydmVyIGluc3RhbmNlIChIVFRQKVxyXG4gICAgY29uc3QgaHR0cFNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XHJcbiAgICAvLyBBdHRhY2ggZXJyb3IgaGFuZGxlcnMgYW5kIGxpc3RlbiB0byB0aGUgc2VydmVyXHJcbiAgICBhdHRhY2hFcnJvckhhbmRsZXJzKGh0dHBTZXJ2ZXIpO1xyXG4gICAgLy8gTGlzdGVuXHJcbiAgICBodHRwU2VydmVyLmxpc3RlbihzZXJ2ZXJDb25maWcucG9ydCwgc2VydmVyQ29uZmlnLmhvc3QpO1xyXG5cclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFtzZXJ2ZXJdIFN0YXJ0ZWQgSFRUUCBzZXJ2ZXIgb24gJHtzZXJ2ZXJDb25maWcuaG9zdH06JHtzZXJ2ZXJDb25maWcucG9ydH0uYFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIExpc3RlbiBIVFRQUyBzZXJ2ZXJcclxuICBpZiAoc2VydmVyQ29uZmlnLnNzbC5lbmFibGUpIHtcclxuICAgIC8vIFNldCB1cCBhbiBTU0wgc2VydmVyIGFsc29cclxuICAgIGxldCBrZXksIGNlcnQ7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IHRoZSBTU0wga2V5XHJcbiAgICAgIGtleSA9IGF3YWl0IGZzUHJvbWlzZXMucmVhZEZpbGUoXHJcbiAgICAgICAgcG9zaXguam9pbihzZXJ2ZXJDb25maWcuc3NsLmNlcnRQYXRoLCAnc2VydmVyLmtleScpLFxyXG4gICAgICAgICd1dGY4J1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gR2V0IHRoZSBTU0wgY2VydGlmaWNhdGVcclxuICAgICAgY2VydCA9IGF3YWl0IGZzUHJvbWlzZXMucmVhZEZpbGUoXHJcbiAgICAgICAgcG9zaXguam9pbihzZXJ2ZXJDb25maWcuc3NsLmNlcnRQYXRoLCAnc2VydmVyLmNydCcpLFxyXG4gICAgICAgICd1dGY4J1xyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nKFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgYFtzZXJ2ZXJdIFVuYWJsZSB0byBsb2FkIGtleS9jZXJ0aWZpY2F0ZSBmcm9tICR7c2VydmVyQ29uZmlnLnNzbC5jZXJ0UGF0aH0uYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXkgJiYgY2VydCkge1xyXG4gICAgICAvLyBNYWluIHNlcnZlciBpbnN0YW5jZSAoSFRUUFMpXHJcbiAgICAgIGNvbnN0IGh0dHBzU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHsga2V5LCBjZXJ0IH0sIGFwcCk7XHJcbiAgICAgIC8vIEF0dGFjaCBlcnJvciBoYW5kbGVycyBhbmQgbGlzdGVuIHRvIHRoZSBzZXJ2ZXJcclxuICAgICAgYXR0YWNoRXJyb3JIYW5kbGVycyhodHRwc1NlcnZlcik7XHJcbiAgICAgIC8vIExpc3RlblxyXG4gICAgICBodHRwc1NlcnZlci5saXN0ZW4oc2VydmVyQ29uZmlnLnNzbC5wb3J0LCBzZXJ2ZXJDb25maWcuaG9zdCk7XHJcblxyXG4gICAgICBsb2coXHJcbiAgICAgICAgMyxcclxuICAgICAgICBgW3NlcnZlcl0gU3RhcnRlZCBIVFRQUyBzZXJ2ZXIgb24gJHtzZXJ2ZXJDb25maWcuaG9zdH06JHtzZXJ2ZXJDb25maWcuc3NsLnBvcnR9LmBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEVuYWJsZSB0aGUgcmF0ZSBsaW1pdGVyIGlmIGNvbmZpZyBzYXlzIHNvXHJcbiAgaWYgKFxyXG4gICAgc2VydmVyQ29uZmlnLnJhdGVMaW1pdGluZyAmJlxyXG4gICAgc2VydmVyQ29uZmlnLnJhdGVMaW1pdGluZy5lbmFibGUgJiZcclxuICAgICFbMCwgTmFOXS5pbmNsdWRlcyhzZXJ2ZXJDb25maWcucmF0ZUxpbWl0aW5nLm1heFJlcXVlc3RzKVxyXG4gICkge1xyXG4gICAgcmF0ZUxpbWl0KGFwcCwgc2VydmVyQ29uZmlnLnJhdGVMaW1pdGluZyk7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgdXAgc3RhdGljIGZvbGRlcidzIHJvdXRlXHJcbiAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhwb3NpeC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSk7XHJcblxyXG4gIC8vIFNldCB1cCByb3V0ZXNcclxuICBoZWFsdGhSb3V0ZShhcHApO1xyXG4gIGV4cG9ydFJvdXRlcyhhcHApO1xyXG4gIHVpUm91dGUoYXBwKTtcclxuICB2c3dpdGNoUm91dGUoYXBwKTtcclxuXHJcbiAgLy8gU2V0IHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBpZiBlbmFibGVkXHJcbiAgaWYgKGVudkNvbmZpZy5XU19FTkFCTEUgPT0gdHJ1ZSkge1xyXG4gICAgd2Vic29ja2V0LmNvbm5lY3QoZW52Q29uZmlnLldTX1VSTCwge1xyXG4gICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGVudkNvbmZpZy5XU19SRUpFQ1RfVU5BVVRIT1JJWkVELFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgLy8gU2V0IGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhc3RzIG9ubHkgNSBtaW51dGVzXHJcbiAgICAgICAgYXV0aDogand0LnNpZ24oeyBzdWNjZXNzOiAnc3VjY2VzcycgfSwgZW52Q29uZmlnLldTX1NFQ1JFVCwge1xyXG4gICAgICAgICAgYWxnb3JpdGhtOiAnSFMyNTYnLFxyXG4gICAgICAgICAgZXhwaXJlc0luOiAnNW0nXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGV4cHJlc3MgaW5zdGFuY2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RXhwcmVzcyA9ICgpID0+IHtcclxuICByZXR1cm4gZXhwcmVzcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBhcHAgaW5zdGFuY2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0QXBwID0gKCkgPT4ge1xyXG4gIHJldHVybiBhcHA7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhIG1pZGRsZXdhcmUgdG8gdGhlIHNlcnZlci5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IHBhdGggLSBBbiBlbmRwb2ludCBwYXRoIHRvIGFkZCBtaWRkbGV3YXJlcyB0by5cclxuICogQHBhcmFtIHtBcnJheX0gbWlkZGxld2FyZXMgLSBBbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIG1pZGRsZXdhcmVzIHRvIHVzZVxyXG4gKiBhZ2FpbnN0IHRoZSBzcGVjaWZpYyBlbmRwb2ludC5cclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2UgPSAocGF0aCwgLi4ubWlkZGxld2FyZXMpID0+IHtcclxuICBhcHAudXNlKHBhdGgsIC4uLm1pZGRsZXdhcmVzKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgZ2V0IHJvdXRlIHRvIHRoZSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXRoIC0gQW4gZW5kcG9pbnQgcGF0aCB0byBhZGQgbWlkZGxld2FyZXMgdG8uXHJcbiAqIEBwYXJhbSB7QXJyYXl9IG1pZGRsZXdhcmVzIC0gQW4gdW5saW1pdGVkIG51bWJlciBvZiBtaWRkbGV3YXJlcyB0byB1c2VcclxuICogYWdhaW5zdCB0aGUgc3BlY2lmaWMgZW5kcG9pbnQgZm9yIEdFVCBtZXRob2QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0ID0gKHBhdGgsIC4uLm1pZGRsZXdhcmVzKSA9PiB7XHJcbiAgYXBwLmdldChwYXRoLCAuLi5taWRkbGV3YXJlcyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhIHBvc3Qgcm91dGUgdG8gdGhlIHNlcnZlci5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IHBhdGggLSBBbiBlbmRwb2ludCBwYXRoIHRvIGFkZCBtaWRkbGV3YXJlcyB0by5cclxuICogQHBhcmFtIHtBcnJheX0gbWlkZGxld2FyZXMgLSBBbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIG1pZGRsZXdhcmVzIHRvIHVzZVxyXG4gKiBhZ2FpbnN0IHRoZSBzcGVjaWZpYyBlbmRwb2ludCBmb3IgUE9TVCBtZXRob2QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcG9zdCA9IChwYXRoLCAuLi5taWRkbGV3YXJlcykgPT4ge1xyXG4gIGFwcC5wb3N0KHBhdGgsIC4uLm1pZGRsZXdhcmVzKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGb3JjZWZ1bGx5IGVuYWJsZXMgcmF0ZSBsaW1pdGluZy5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGxpbWl0Q29uZmlnIC0gVGhlIG9wdGlvbnMgb2JqZWN0IGZvciB0aGUgcmF0ZSBsaW1pdGVyXHJcbiAqIGNvbmZpZ3VyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW5hYmxlUmF0ZUxpbWl0aW5nID0gKGxpbWl0Q29uZmlnKSA9PiB7XHJcbiAgcmV0dXJuIHJhdGVMaW1pdChhcHAsIGxpbWl0Q29uZmlnKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzdGFydFNlcnZlcixcclxuICBnZXRFeHByZXNzLFxyXG4gIGdldEFwcCxcclxuICB1c2UsXHJcbiAgZ2V0LFxyXG4gIHBvc3QsXHJcbiAgZW5hYmxlUmF0ZUxpbWl0aW5nXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDIzLCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHsgX19kaXJuYW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG4vKipcclxuICogQWRkcyB0aGUgLyByb3V0ZSBmb3IgYSBVSSB3aGVuIGVuYWJsZWQgZm9yIHRoZSBleHBvcnQgc2VydmVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYXBwKSA9PlxyXG4gICFhcHBcclxuICAgID8gZmFsc2VcclxuICAgIDogYXBwLmdldCgnLycsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmRGaWxlKGpvaW4oX19kaXJuYW1lLCAncHVibGljJywgJ2luZGV4Lmh0bWwnKSk7XHJcbiAgICAgIH0pO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBjYWNoZSBmcm9tICcuLi8uLi9jYWNoZS5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyBhIHJvdXRlIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hhbmdlIHRoZSBIQyB2ZXJzaW9uIG9uIHRoZSBzZXJ2ZXJcclxuICogVE9ETzogQWRkIGF1dGggdG9rZW4gYW5kIGNvbm5lY3QgdG8gQVBJXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYXBwKSA9PlxyXG4gICFhcHBcclxuICAgID8gZmFsc2VcclxuICAgIDogYXBwLnBvc3QoJy9jaGFuZ2VfaGNfdmVyc2lvbi86bmV3VmVyc2lvbicsIGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGN0b2tlbiA9IHByb2Nlc3MuZW52LkhJR0hDSEFSVFNfQURNSU5fVE9LRU47XHJcblxyXG4gICAgICAgIGlmICghY3Rva2VuIHx8ICFjdG9rZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XHJcbiAgICAgICAgICAgIGVycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOlxyXG4gICAgICAgICAgICAgICdTZXJ2ZXIgbm90IGNvbmZpZ3VyZWQgdG8gZG8gcnVuLXRpbWUgdmVyc2lvbiBjaGFuZ2VzOiBISUdIQ0hBUlRTX0FETUlOX1RPS0VOIG5vdCBzZXQnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRva2VuID0gcmVxdWVzdC5nZXQoJ2hjLWF1dGgnKTtcclxuXHJcbiAgICAgICAgaWYgKCF0b2tlbiB8fCB0b2tlbiAhPT0gY3Rva2VuKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XHJcbiAgICAgICAgICAgIGVycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBvciBtaXNzaW5nIHRva2VuOiBzZXQgdG9rZW4gaW4gdGhlIGhjLWF1dGggaGVhZGVyJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdWZXJzaW9uID0gcmVxdWVzdC5wYXJhbXMubmV3VmVyc2lvbjtcclxuXHJcbiAgICAgICAgaWYgKG5ld1ZlcnNpb24pIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbmFtZWQtYXMtZGVmYXVsdC1tZW1iZXJcclxuICAgICAgICAgICAgYXdhaXQgY2FjaGUudXBkYXRlVmVyc2lvbihuZXdWZXJzaW9uKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc2VuZCh7XHJcbiAgICAgICAgICAgICAgZXJyb3I6IHRydWUsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXNwb25zZS5zZW5kKHtcclxuICAgICAgICAgICAgdmVyc2lvbjogY2FjaGUudmVyc2lvbigpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzcG9uc2Uuc2VuZCh7XHJcbiAgICAgICAgICAgIGVycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnTm8gbmV3IHZlcnNpb24gc3VwcGxpZWQnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyMywgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vIEFkZCB0aGUgbWFpbiBkaXJlY3RvcnkgaW4gdGhlIGdsb2JhbCBvYmplY3RcclxuaW1wb3J0ICdjb2xvcnMnO1xyXG5cclxuaW1wb3J0IHNlcnZlciwgeyBzdGFydFNlcnZlciB9IGZyb20gJy4vc2VydmVyL3NlcnZlci5qcyc7XHJcbmltcG9ydCB7XHJcbiAgc2V0QWxsb3dDb2RlRXhlY3V0aW9uLFxyXG4gIGJhdGNoRXhwb3J0LFxyXG4gIHNpbmdsZUV4cG9ydCxcclxuICBzdGFydEV4cG9ydFxyXG59IGZyb20gJy4vY2hhcnQuanMnO1xyXG5pbXBvcnQgeyBtYXBUb05ld0NvbmZpZywgc2V0T3B0aW9ucyB9IGZyb20gJy4vY29uZmlnLmpzJztcclxuaW1wb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCwgZW5hYmxlRmlsZUxvZ2dpbmcgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGtpbGxQb29sLCBpbml0IH0gZnJvbSAnLi9wb29sLmpzJztcclxuaW1wb3J0IHsgY2hlY2tDYWNoZSB9IGZyb20gJy4vY2FjaGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxvZyxcclxuICBtYXBUb05ld0NvbmZpZyxcclxuICBzZXRPcHRpb25zLFxyXG4gIHNpbmdsZUV4cG9ydCxcclxuICBzdGFydEV4cG9ydCxcclxuICBiYXRjaEV4cG9ydCxcclxuICBzZXJ2ZXIsXHJcbiAgc3RhcnRTZXJ2ZXIsXHJcbiAga2lsbFBvb2wsXHJcbiAgaW5pdFBvb2w6IGFzeW5jIChvcHRpb25zID0ge30pID0+IHtcclxuICAgIC8vIFNldCB0aGUgYWxsb3dDb2RlRXhlY3V0aW9uIHBlciBleHBvcnQgbW9kdWxlIHNjb3BlXHJcbiAgICBzZXRBbGxvd0NvZGVFeGVjdXRpb24oXHJcbiAgICAgIG9wdGlvbnMuY3VzdG9tQ29kZSAmJiBvcHRpb25zLmN1c3RvbUNvZGUuYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFNldCB0aGUgbG9nIGxldmVsXHJcbiAgICBzZXRMb2dMZXZlbChvcHRpb25zLmxvZ2dpbmcgJiYgcGFyc2VJbnQob3B0aW9ucy5sb2dnaW5nLmxldmVsKSk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBsb2cgZmlsZSBwYXRoIGFuZCBuYW1lXHJcbiAgICBpZiAob3B0aW9ucy5sb2dnaW5nICYmIG9wdGlvbnMubG9nZ2luZy5kZXN0KSB7XHJcbiAgICAgIGVuYWJsZUZpbGVMb2dnaW5nKFxyXG4gICAgICAgIG9wdGlvbnMubG9nZ2luZy5kZXN0LFxyXG4gICAgICAgIG9wdGlvbnMubG9nZ2luZy5maWxlIHx8ICdoaWdoY2hhcnRzLWV4cG9ydC1zZXJ2ZXIubG9nJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIGNhY2hlIG5lZWRzIHRvIGJlIHVwZGF0ZWRcclxuICAgIGF3YWl0IGNoZWNrQ2FjaGUob3B0aW9ucy5oaWdoY2hhcnRzIHx8IHsgdmVyc2lvbjogJ2xhdGVzdCcgfSk7XHJcblxyXG4gICAgLy8gSW5pdCB0aGUgcG9vbFxyXG4gICAgYXdhaXQgaW5pdCh7XHJcbiAgICAgIHBvb2w6IG9wdGlvbnMucG9vbCB8fCB7XHJcbiAgICAgICAgaW5pdGlhbFdvcmtlcnM6IDEsXHJcbiAgICAgICAgbWF4V29ya2VyczogMVxyXG4gICAgICB9LFxyXG4gICAgICBwdXBwZXRlZXJBcmdzOiBvcHRpb25zLnB1cHBldGVlcj8uYXJncyB8fCBbXVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmV0dXJuIHVwZGF0ZWQgb3B0aW9uc1xyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsiZG90ZW52IiwiY29uZmlnIiwiZGVmYXVsdENvbmZpZyIsInB1cHBldGVlciIsImFyZ3MiLCJ2YWx1ZSIsInR5cGUiLCJkZXNjcmlwdGlvbiIsImhpZ2hjaGFydHMiLCJ2ZXJzaW9uIiwiZW52TGluayIsImNkblVSTCIsImNvcmVTY3JpcHRzIiwibW9kdWxlcyIsImluZGljYXRvcnMiLCJzY3JpcHRzIiwiZm9yY2VGZXRjaCIsImV4cG9ydCIsImluZmlsZSIsImluc3RyIiwib3B0aW9ucyIsIm91dGZpbGUiLCJjb25zdHIiLCJkZWZhdWx0SGVpZ2h0IiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdFNjYWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJzY2FsZSIsImdsb2JhbE9wdGlvbnMiLCJ0aGVtZU9wdGlvbnMiLCJiYXRjaCIsImN1c3RvbUNvZGUiLCJhbGxvd0NvZGVFeGVjdXRpb24iLCJhbGxvd0ZpbGVSZXNvdXJjZXMiLCJjYWxsYmFjayIsInJlc291cmNlcyIsImxvYWRDb25maWciLCJjcmVhdGVDb25maWciLCJzZXJ2ZXIiLCJlbmFibGUiLCJjbGlOYW1lIiwiaG9zdCIsInBvcnQiLCJzc2wiLCJmb3JjZSIsImNlcnRQYXRoIiwicmF0ZUxpbWl0aW5nIiwibWF4UmVxdWVzdHMiLCJ3aW5kb3ciLCJkZWxheSIsInRydXN0UHJveHkiLCJza2lwS2V5Iiwic2tpcFRva2VuIiwicG9vbCIsImluaXRpYWxXb3JrZXJzIiwibWF4V29ya2VycyIsIndvcmtMaW1pdCIsInF1ZXVlU2l6ZSIsInRpbWVvdXRUaHJlc2hvbGQiLCJhY3F1aXJlVGltZW91dCIsInJlYXBlciIsImJlbmNobWFya2luZyIsImxpc3RlblRvUHJvY2Vzc0V4aXRzIiwibG9nZ2luZyIsImxldmVsIiwiZmlsZSIsImRlc3QiLCJ1aSIsInJvdXRlIiwib3RoZXIiLCJub0xvZ28iLCJwYXlsb2FkIiwiam9pbiIsImFic29sdXRlUHJvcHMiLCJuZXN0ZWRBcmdzIiwiY3JlYXRlTmVzdGVkQXJncyIsIm9iaiIsInByb3BDaGFpbiIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiayIsImluY2x1ZGVzIiwiZW50cnkiLCJzdWJzdHJpbmciLCJ0b0NvbnNvbGUiLCJ0b0ZpbGUiLCJwYXRoQ3JlYXRlZCIsImxldmVsc0Rlc2MiLCJ0aXRsZSIsImNvbG9yIiwibGlzdGVuZXJzIiwia2V5Iiwib3B0aW9uIiwiZW50cmllcyIsImxvZyIsIm5ld0xldmVsIiwidGV4dHMiLCJsZW5ndGgiLCJwcmVmaXgiLCJEYXRlIiwidG9TdHJpbmciLCJzcGxpdCIsInRyaW0iLCJmbiIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJhcHBlbmRGaWxlIiwiY29uY2F0IiwiZXJyb3IiLCJjb25zb2xlIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJfX2Rpcm5hbWUiLCJmaWxlVVJMVG9QYXRoIiwiVVJMIiwiZG9jdW1lbnQiLCJyZXF1aXJlIiwicGF0aFRvRmlsZVVSTCIsIl9fZmlsZW5hbWUiLCJocmVmIiwiX2RvY3VtZW50Q3VycmVudFNjcmlwdCIsInNyYyIsImJhc2VVUkkiLCJjbGVhclRleHQiLCJ0ZXh0IiwicnVsZSIsInJlcGxhY2VyIiwicmVwbGFjZUFsbCIsImZpeFR5cGUiLCJmb3JtYXRzIiwib3V0VHlwZSIsInBvcCIsImZpbmQiLCJ0IiwiaGFuZGxlUmVzb3VyY2VzIiwiYWxsb3dlZFByb3BzIiwiaGFuZGxlZFJlc291cmNlcyIsImNvcnJlY3RSZXNvdXJjZXMiLCJlbmRzV2l0aCIsImlzQ29ycmVjdEpTT04iLCJyZWFkRmlsZVN5bmMiLCJub3RpY2UiLCJmaWxlcyIsInByb3BOYW1lIiwibWFwIiwiaXRlbSIsImRhdGEiLCJwYXJzZWREYXRhIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZGVlcENvcHkiLCJjb3B5IiwiQXJyYXkiLCJpc0FycmF5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwib3B0aW9uc1N0cmluZ2lmeSIsImFsbG93RnVuY3Rpb25zIiwibmFtZSIsInN0YXJ0c1dpdGgiLCJwcmludFVzYWdlIiwiYm9sZCIsInllbGxvdyIsImN5Y2xlQ2F0ZWdvcmllcyIsImNhdGVnb3JpZXMiLCJkZXNjTmFtZSIsImdyZWVuIiwiaSIsImJsdWUiLCJjYXRlZ29yeSIsInRvVXBwZXJDYXNlIiwicmVkIiwidG9Cb29sZWFuIiwid3JhcEFyb3VuZCIsInJlcGxhY2UiLCJyYXRlTGltaXQiLCJhcHAiLCJsaW1pdENvbmZpZyIsIm1zZyIsInJhdGVPcHRpb25zIiwibWF4IiwibGltaXRlciIsIndpbmRvd01zIiwiZGVsYXlNcyIsImhhbmRsZXIiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJmb3JtYXQiLCJqc29uIiwic3RhdHVzIiwic2VuZCIsIm1lc3NhZ2UiLCJkZWZhdWx0Iiwic2tpcCIsInF1ZXJ5IiwiYWNjZXNzX3Rva2VuIiwidXNlIiwiZW52VG9Cb29sZWFuIiwieiIsImVudW0iLCJ0cmFuc2Zvcm0iLCJ2IiwiZW52Q29uZmlnIiwib2JqZWN0IiwiV1NfRU5BQkxFIiwiV1NfUkVDT05ORUNUIiwiV1NfUkVKRUNUX1VOQVVUSE9SSVpFRCIsIldTX1BJTkdfVElNRU9VVCIsImNvZXJjZSIsIm51bWJlciIsIldTX1JFQ09OTkVDVF9JTlRFUlZBTCIsIldTX1VSTCIsInN0cmluZyIsIldTX1NFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJ3ZWJTb2NrZXQiLCJyZWNvbm5lY3RJbnRlcnZhbCIsImNvbm5lY3QiLCJ3ZWJTb2NrZXRVcmwiLCJXZWJTb2NrZXQiLCJvbiIsImNsZWFySW50ZXJ2YWwiLCJjb2RlIiwiY2xlYXJUaW1lb3V0IiwiX3BpbmdUaW1lb3V0Iiwic2V0VGltZW91dCIsInRlcm1pbmF0ZSIsInNldEludGVydmFsIiwicmVjb25uZWN0Iiwid2Vic29ja2V0IiwiZ2V0Q2xpZW50IiwiYXN5bmMiLCJmZXRjaCIsInVybCIsInJlcXVlc3RPcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm90b2NvbCIsImh0dHBzIiwiaHR0cCIsImdldFByb3RvY29sIiwiZ2V0IiwicmVzIiwiY2h1bmsiLCJjYWNoZVBhdGgiLCJjYWNoZSIsImFjdGl2ZU1hbmlmZXN0Iiwic291cmNlcyIsImhjVmVyc2lvbiIsImFwcGxpZWRDb25maWciLCJleHRyYWN0VmVyc2lvbiIsInN1YnN0ciIsImluZGV4T2YiLCJmZXRjaFNjcmlwdCIsInNjcmlwdCIsInByb3h5QWdlbnQiLCJhZ2VudCIsInRpbWVvdXQiLCJzdGF0dXNDb2RlIiwidXBkYXRlQ2FjaGUiLCJzb3VyY2VQYXRoIiwiY3VzdG9tU2NyaXB0cyIsImFsbFNjcmlwdHMiLCJjIiwibSIsInByb3h5SG9zdCIsInByb3h5UG9ydCIsIkh0dHBzUHJveHlBZ2VudCIsImZldGNoZWRNb2R1bGVzIiwiYWxsIiwid3JpdGVGaWxlU3luYyIsImNoZWNrQ2FjaGUiLCJtYW5pZmVzdFBhdGgiLCJyZXF1ZXN0VXBkYXRlIiwibWFuaWZlc3QiLCJtb2R1bGVNYXAiLCJudW1iZXJPZk1vZHVsZXMiLCJzb21lIiwibW9kdWxlTmFtZSIsIm5ld01hbmlmZXN0Iiwic2F2ZUNvbmZpZ1RvTWFuaWZlc3QiLCJjYWNoZSQxIiwibmV3VmVyc2lvbiIsImFzc2lnbiIsIlJBTkRPTV9QSUQiLCJyYW5kb21CeXRlcyIsIlBVUFBFVEVFUl9ESVIiLCJwYXRoIiwibWluaW1hbEFyZ3MiLCJ0ZW1wbGF0ZSIsImZzIiwiYnJvd3NlciIsIm5ld1BhZ2UiLCJwIiwic2V0Q29udGVudCIsImFkZFNjcmlwdFRhZyIsImV2YWx1YXRlIiwic2V0dXBIaWdoY2hhcnRzIiwiZXJyIiwiJGV2YWwiLCJlbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiX2Rpc3BsYXlFcnJvcnMiLCJpbm5lckhUTUwiLCJjbG9zZSIsImNvbm5lY3RlZCIsIl9fYmFzZWRpciIsInNldEFzQ29uZmlnIiwicGFnZSIsImNoYXJ0IiwidHJpZ2dlckV4cG9ydCIsInB1cHBldGVlckV4cG9ydCIsImluamVjdGVkUmVzb3VyY2VzIiwiY2xlYXJJbmplY3RlZCIsImRpc3Bvc2UiLCJzY3JpcHRzVG9SZW1vdmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlc1RvUmVtb3ZlIiwibGlua3NUb1JlbW92ZSIsInJlbW92ZSIsImV4cG9ydEJlbmNoIiwiZXhwb3J0T3B0aW9ucyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRpc3BsYXlFcnJvcnMiLCJkZWJ1Z2dlciIsImQiLCJzdmdCZW5jaCIsImlzU1ZHIiwic2V0UGFnZUJlbmNoIiwic3ZnVGVtcGxhdGUiLCJzdHJJbmoiLCJzZXRDb250ZW50QmVuY2giLCJyZXNCZW5jaCIsImpzIiwicHVzaCIsImNvbnRlbnQiLCJpc0xvY2FsIiwiY3NzQmVuY2giLCJjc3MiLCJjc3NJbXBvcnRzIiwibWF0Y2giLCJjc3NJbXBvcnRQYXRoIiwiYWRkU3R5bGVUYWciLCJzaXplIiwiY2hhcnRIZWlnaHQiLCJiYXNlVmFsIiwiY2hhcnRXaWR0aCIsInBhcnNlRmxvYXQiLCJIaWdoY2hhcnRzIiwiY2hhcnRzIiwidnBCZW5jaCIsInZpZXdwb3J0SGVpZ2h0IiwiTWF0aCIsImNlaWwiLCJ2aWV3cG9ydFdpZHRoIiwic2V0Vmlld3BvcnQiLCJkZXZpY2VTY2FsZUZhY3RvciIsInpvb21DYWxsYmFjayIsImJvZHkiLCJzdHlsZSIsInpvb20iLCJtYXJnaW4iLCJ4IiwieSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRydW5jIiwiZ2V0Q2xpcFJlZ2lvbiIsInJvdW5kIiwiZXhwQmVuY2htYXJrIiwib3V0ZXJIVE1MIiwiY3JlYXRlU1ZHIiwiZW5jb2RpbmciLCJjbGlwIiwicmFjZSIsInNjcmVlbnNob3QiLCJvbWl0QmFja2dyb3VuZCIsIkVycm9yIiwiY3JlYXRlSW1hZ2UiLCJwZGYiLCJjcmVhdGVQREYiLCJvbGRDaGFydHMiLCJvbGRDaGFydCIsImRlc3Ryb3kiLCJzaGlmdCIsInB1cHBldGVlckFyZ3MiLCJwZXJmb3JtZWRFeHBvcnRzIiwiZXhwb3J0QXR0ZW1wdHMiLCJ0aW1lU3BlbnQiLCJkcm9wcGVkRXhwb3J0cyIsInNwZW50QXZlcmFnZSIsInBvb2xDb25maWciLCJmYWN0b3J5IiwiY3JlYXRlIiwiaWQiLCJ1dWlkIiwicyIsImdldFRpbWUiLCJicm93c2VyTmV3UGFnZSIsImlzQ2xvc2VkIiwid29ya0NvdW50IiwicmFuZG9tIiwidmFsaWRhdGUiLCJ3b3JrZXJIYW5kbGUiLCJsb2dMZXZlbCIsImluaXQiLCJhbGxBcmdzIiwidHJ5Q291bnQiLCJvcGVuIiwibGF1bmNoIiwiaGVhZGxlc3MiLCJ1c2VyRGF0YURpciIsImUiLCJjcmVhdGVCcm93c2VyIiwia2lsbFBvb2wiLCJleGl0IiwiUG9vbCIsIm1pbiIsImNyZWF0ZVJldHJ5SW50ZXJ2YWxNaWxsaXMiLCJjcmVhdGVUaW1lb3V0TWlsbGlzIiwiYWNxdWlyZVRpbWVvdXRNaWxsaXMiLCJkZXN0cm95VGltZW91dE1pbGxpcyIsImlkbGVUaW1lb3V0TWlsbGlzIiwicmVhcEludGVydmFsTWlsbGlzIiwicHJvcGFnYXRlQ3JlYXRlRXJyb3IiLCJldmVudElkIiwicmVzb3VyY2UiLCJpbml0aWFsUmVzb3VyY2VzIiwiYWNxdWlyZSIsInByb21pc2UiLCJyZWxlYXNlIiwiZGVzdHJveWVkIiwicG9zdFdvcmsiLCJmYWlsIiwiZ2V0UG9vbEluZm8iLCJ3b3JrU3RhcnQiLCJyZXN1bHQiLCJleHBvcnRUaW1lIiwiYXZhaWxhYmxlIiwiYm9ycm93ZWQiLCJwZW5kaW5nIiwic3BhcmVSZXNvdXJjZUNhcGFjaXR5IiwicG9vbCQxIiwicGFja2FnZVZlcnNpb24iLCJucG1fcGFja2FnZV92ZXJzaW9uIiwic2VydmVyU3RhcnRUaW1lIiwiZ2VuZXJhbE9wdGlvbnMiLCJnZXRPcHRpb25zIiwibWVyZ2VDb25maWdPcHRpb25zIiwibmV3T3B0aW9ucyIsIm1lcmdlZE9wdGlvbnMiLCJ1cGRhdGVEZWZhdWx0Q29uZmlnIiwiY29uZmlnT2JqIiwiY3VzdG9tT2JqIiwiY3VzdG9tVmFsdWUiLCJudW1FbnZWYWwiLCJlbCIsImluaXRPcHRpb25zIiwiaXRlbXMiLCJzdGFydEV4cG9ydCIsInNldHRpbmdzIiwiZW5kQ2FsbGJhY2siLCJzdmciLCJpbml0RXhwb3J0U2V0dGluZ3MiLCJleHBvcnRBc1N0cmluZyIsInJlYWRGaWxlIiwiZG9TdHJhaWdodEluamVjdCIsImRvRXhwb3J0IiwiZmluZENoYXJ0U2l6ZSIsImV4cG9ydGluZyIsInByZWNpc2lvbiIsIm11bHRpcGxpZXIiLCJwb3ciLCJyb3VuZE51bWJlciIsInNvdXJjZUhlaWdodCIsInNvdXJjZVdpZHRoIiwiY2hhcnRKc29uIiwiY3VzdG9tQ29kZU9wdGlvbnMiLCJhbGxvd0NvZGVFeGVjdXRpb25TY29wZWQiLCJlbmFibGVkIiwib3B0aW9uc05hbWUiLCJ0aGVuIiwiY2F0Y2giLCJyZXF1ZXN0SWQiLCJzdHJpbmdUb0V4cG9ydCIsImNoYXJ0SlNPTiIsInJldmVyc2VkTWltZSIsInBuZyIsImpwZWciLCJnaWYiLCJyZXF1ZXN0c0NvdW50ZXIiLCJiZWZvcmVSZXF1ZXN0IiwiYWZ0ZXJSZXF1ZXN0IiwiZG9DYWxsYmFja3MiLCJjYWxsYmFja3MiLCJ1bmlxdWVJZCIsImNhbGxSZXNwb25zZSIsImV4cG9ydEhhbmRsZXIiLCJzdGFydCIsImhydGltZSIsImJpZ2ludCIsIm1lYXN1cmVUaW1lIiwiZGVmYXVsdE9wdGlvbnMiLCJ3ZWJzb2NrZXRDbGllbnQiLCJoZWFkZXJzIiwiY29ubmVjdGlvbiIsInJlbW90ZUFkZHJlc3MiLCJjb25uZWN0aW9uQWJvcnRlZCIsInNvY2tldCIsInRvTG93ZXJDYXNlIiwiYjY0IiwiZGF0YU9wdGlvbnMiLCJub0Rvd25sb2FkIiwiaXBSZWdFeCIsInJlYWR5U3RhdGUiLCJPUEVOIiwiaW5mbyIsInJlbW92ZUFsbExpc3RlbmVycyIsIkJ1ZmZlciIsImZyb20iLCJoZWFkZXIiLCJhdHRhY2htZW50IiwicGFyYW1zIiwiZmlsZW5hbWUiLCJleHByZXNzIiwiZGlzYWJsZSIsImNvcnMiLCJzdG9yYWdlIiwibXVsdGVyIiwibWVtb3J5U3RvcmFnZSIsInVwbG9hZCIsImxpbWl0cyIsImZpZWxkc1NpemUiLCJhbnkiLCJib2R5UGFyc2VyIiwibGltaXQiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJlcnJvckhhbmRsZXIiLCJhdHRhY2hFcnJvckhhbmRsZXJzIiwic3RhcnRTZXJ2ZXIiLCJzZXJ2ZXJDb25maWciLCJodHRwU2VydmVyIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwiY2VydCIsImZzUHJvbWlzZXMiLCJwb3NpeCIsImh0dHBzU2VydmVyIiwiTmFOIiwic3RhdGljIiwiYm9vdFRpbWUiLCJ1cHRpbWUiLCJmbG9vciIsImhpZ2hjaGFydHNWZXJzaW9uIiwiYXZlcmFnZVByb2Nlc3NpbmdUaW1lIiwiZmFpbGVkRXhwb3J0cyIsInN1Y2Vzc1JhdGlvIiwiaGVhbHRoUm91dGUiLCJwb3N0IiwiZXhwb3J0Um91dGVzIiwic2VuZEZpbGUiLCJ1aVJvdXRlIiwiY3Rva2VuIiwiSElHSENIQVJUU19BRE1JTl9UT0tFTiIsInRva2VuIiwidnN3aXRjaFJvdXRlIiwicmVqZWN0VW5hdXRob3JpemVkIiwiYXV0aCIsImp3dCIsInNpZ24iLCJzdWNjZXNzIiwiYWxnb3JpdGhtIiwiZXhwaXJlc0luIiwiZ2V0RXhwcmVzcyIsImdldEFwcCIsIm1pZGRsZXdhcmVzIiwiZW5hYmxlUmF0ZUxpbWl0aW5nIiwiaW5kZXgiLCJtYXBUb05ld0NvbmZpZyIsIm9sZE9wdGlvbnMiLCJwcm9wZXJ0aWVzQ2hhaW4iLCJyZWR1Y2UiLCJwcm9wIiwic2V0T3B0aW9ucyIsInVzZXJPcHRpb25zIiwiY29uZmlnSW5kZXgiLCJmaW5kSW5kZXgiLCJhcmciLCJmaWxlTmFtZSIsImxvYWRDb25maWdGaWxlIiwicGFpckFyZ3VtZW50VmFsdWUiLCJzaW5nbGVFeHBvcnQiLCJiYXRjaEV4cG9ydCIsImJhdGNoRnVuY3Rpb25zIiwicGFpciIsImluaXRQb29sIiwicGFyc2VJbnQiLCJsb2dEZXN0IiwibG9nRmlsZSIsImVuYWJsZUZpbGVMb2dnaW5nIl0sIm1hcHBpbmdzIjoid3lCQWlCQUEsRUFBT0MsU0FJQSxNQUFNQyxFQUFnQixDQUMzQkMsVUFBVyxDQUNUQyxLQUFNLENBQ0pDLE1BQU8sR0FDUEMsS0FBTSxXQUNOQyxZQUFhLDZDQUdqQkMsV0FBWSxDQUNWQyxRQUFTLENBQ1BKLE1BQU8sU0FDUEssUUFBUyxxQkFDVEosS0FBTSxTQUNOQyxZQUFhLDhCQUVmSSxPQUFRLENBQ05OLE1BQU8sK0JBQ1BLLFFBQVMsaUJBQ1RKLEtBQU0sU0FDTkMsWUFBYSw2Q0FFZkssWUFBYSxDQUNYRixRQUFTLDBCQUNUTCxNQUFPLENBQUMsYUFBYyxrQkFBbUIsaUJBQ3pDQyxLQUFNLFdBQ05DLFlBQWEscUNBRWZNLFFBQVMsQ0FDUEgsUUFBUyxxQkFDVEwsTUFBTyxDQUNMLFFBQ0EsTUFDQSxRQUNBLFlBQ0EsY0FDQSx1QkFDQSxnQkFDQSx1QkFDQSxlQUNBLFFBQ0EsT0FDQSxtQkFDQSxlQUNBLGNBQ0EsVUFDQSxVQUNBLFdBQ0EsVUFDQSxjQUNBLFlBQ0Esc0JBQ0EsU0FDQSxTQUNBLFdBQ0EsWUFDQSxlQUNBLFNBQ0EsZUFD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
